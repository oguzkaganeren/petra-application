mutation controlUser(
	$loginDate: timestamptz
	$loginIP: inet
	$loginTypeID: Int
	$mail: String
	$name: String
	$registerDate: timestamptz
	$accessToken: String
) {
	__typename
	insert_User(
		objects: {
			loginDate: $loginDate
			loginIP: $loginIP
			loginTypeID: $loginTypeID
			mail: $mail
			name: $name
			registerDate: $registerDate
			accessToken: $accessToken
		}
		on_conflict: { constraint: User_mail_key, update_columns: loginDate, where: {} }
	) {
		returning {
			userID
		}
	}
}
mutation addCompany(
	$name: String!
	$taxNumber: String!
	$faxNumber: String
	$registerDate: timestamptz!
	$mail: String!
	$longtitude: Float!
	$latitude: Float!
	$address: String
	$userID: Int!
) {
	__typename
	insert_Company(
		objects: {
			name: $name
			taxNumber: $taxNumber
			faxNumber: $faxNumber
			registerDate: $registerDate
			mail: $mail
			CompanyUsers: { data: { userID: $userID } }
			Location: { data: { longtitude: $longtitude, latitude: $latitude, address: $address } }
		}
	) {
		returning {
			companyID
			locationID
		}
	}
}
mutation addRestaurant(
	$CompanyID: Int
	$ISO: String
	$latitude: Float
	$longtitude: Float
	$address: String
	$RestaurantType: String
	$name: String
	$since: date
) {
	__typename
	insert_Restaurant(
		objects: {
			ISO: $ISO
			Location: { data: { latitude: $latitude, longtitude: $longtitude, address: $address } }
			RestaurantType: { data: { type: $RestaurantType } }
			name: $name
			since: $since
			companyID: $CompanyID
		}
	) {
		returning {
			restaurantID
		}
	}
}
