import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as React from 'react';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHoc from '@apollo/react-hoc';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  timestamptz: any;
  timetz: any;
  date: any;
  inet: any;
};

/** columns and relationships of "Address" */
export type Address = {
  __typename?: 'Address';
  /** An object relationship */
  City: City;
  /** An object relationship */
  District: District;
  /** An array relationship */
  Locations: Array<Location>;
  /** An aggregated array relationship */
  Locations_aggregate: Location_Aggregate;
  address: Scalars['String'];
  addressID: Scalars['Int'];
  cityID: Scalars['Int'];
  districtID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};


/** columns and relationships of "Address" */
export type AddressLocationsArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};


/** columns and relationships of "Address" */
export type AddressLocations_AggregateArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};

/** aggregated selection of "Address" */
export type Address_Aggregate = {
  __typename?: 'Address_aggregate';
  aggregate?: Maybe<Address_Aggregate_Fields>;
  nodes: Array<Address>;
};

/** aggregate fields of "Address" */
export type Address_Aggregate_Fields = {
  __typename?: 'Address_aggregate_fields';
  avg?: Maybe<Address_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Address_Max_Fields>;
  min?: Maybe<Address_Min_Fields>;
  stddev?: Maybe<Address_Stddev_Fields>;
  stddev_pop?: Maybe<Address_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Address_Stddev_Samp_Fields>;
  sum?: Maybe<Address_Sum_Fields>;
  var_pop?: Maybe<Address_Var_Pop_Fields>;
  var_samp?: Maybe<Address_Var_Samp_Fields>;
  variance?: Maybe<Address_Variance_Fields>;
};


/** aggregate fields of "Address" */
export type Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Address" */
export type Address_Aggregate_Order_By = {
  avg?: Maybe<Address_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Address_Max_Order_By>;
  min?: Maybe<Address_Min_Order_By>;
  stddev?: Maybe<Address_Stddev_Order_By>;
  stddev_pop?: Maybe<Address_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Address_Stddev_Samp_Order_By>;
  sum?: Maybe<Address_Sum_Order_By>;
  var_pop?: Maybe<Address_Var_Pop_Order_By>;
  var_samp?: Maybe<Address_Var_Samp_Order_By>;
  variance?: Maybe<Address_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Address" */
export type Address_Arr_Rel_Insert_Input = {
  data: Array<Address_Insert_Input>;
  on_conflict?: Maybe<Address_On_Conflict>;
};

/** aggregate avg on columns */
export type Address_Avg_Fields = {
  __typename?: 'Address_avg_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Address" */
export type Address_Avg_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Address". All fields are combined with a logical 'AND'. */
export type Address_Bool_Exp = {
  City?: Maybe<City_Bool_Exp>;
  District?: Maybe<District_Bool_Exp>;
  Locations?: Maybe<Location_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Address_Bool_Exp>>>;
  _not?: Maybe<Address_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Address_Bool_Exp>>>;
  address?: Maybe<String_Comparison_Exp>;
  addressID?: Maybe<Int_Comparison_Exp>;
  cityID?: Maybe<Int_Comparison_Exp>;
  districtID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "Address" */
export enum Address_Constraint {
  /** unique or primary key constraint */
  AddressPkey = 'Address_pkey'
}

/** input type for incrementing integer columne in table "Address" */
export type Address_Inc_Input = {
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Address" */
export type Address_Insert_Input = {
  City?: Maybe<City_Obj_Rel_Insert_Input>;
  District?: Maybe<District_Obj_Rel_Insert_Input>;
  Locations?: Maybe<Location_Arr_Rel_Insert_Input>;
  address?: Maybe<Scalars['String']>;
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Address_Max_Fields = {
  __typename?: 'Address_max_fields';
  address?: Maybe<Scalars['String']>;
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "Address" */
export type Address_Max_Order_By = {
  address?: Maybe<Order_By>;
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Address_Min_Fields = {
  __typename?: 'Address_min_fields';
  address?: Maybe<Scalars['String']>;
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "Address" */
export type Address_Min_Order_By = {
  address?: Maybe<Order_By>;
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** response of any mutation on the table "Address" */
export type Address_Mutation_Response = {
  __typename?: 'Address_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Address>;
};

/** input type for inserting object relation for remote table "Address" */
export type Address_Obj_Rel_Insert_Input = {
  data: Address_Insert_Input;
  on_conflict?: Maybe<Address_On_Conflict>;
};

/** on conflict condition type for table "Address" */
export type Address_On_Conflict = {
  constraint: Address_Constraint;
  update_columns: Array<Address_Update_Column>;
  where?: Maybe<Address_Bool_Exp>;
};

/** ordering options when selecting data from "Address" */
export type Address_Order_By = {
  City?: Maybe<City_Order_By>;
  District?: Maybe<District_Order_By>;
  Locations_aggregate?: Maybe<Location_Aggregate_Order_By>;
  address?: Maybe<Order_By>;
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "Address" */
export enum Address_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  AddressId = 'addressID',
  /** column name */
  CityId = 'cityID',
  /** column name */
  DistrictId = 'districtID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "Address" */
export type Address_Set_Input = {
  address?: Maybe<Scalars['String']>;
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type Address_Stddev_Fields = {
  __typename?: 'Address_stddev_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Address" */
export type Address_Stddev_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Address_Stddev_Pop_Fields = {
  __typename?: 'Address_stddev_pop_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Address" */
export type Address_Stddev_Pop_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Address_Stddev_Samp_Fields = {
  __typename?: 'Address_stddev_samp_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Address" */
export type Address_Stddev_Samp_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Address_Sum_Fields = {
  __typename?: 'Address_sum_fields';
  addressID?: Maybe<Scalars['Int']>;
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Address" */
export type Address_Sum_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** update columns of table "Address" */
export enum Address_Update_Column {
  /** column name */
  Address = 'address',
  /** column name */
  AddressId = 'addressID',
  /** column name */
  CityId = 'cityID',
  /** column name */
  DistrictId = 'districtID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type Address_Var_Pop_Fields = {
  __typename?: 'Address_var_pop_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Address" */
export type Address_Var_Pop_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Address_Var_Samp_Fields = {
  __typename?: 'Address_var_samp_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Address" */
export type Address_Var_Samp_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Address_Variance_Fields = {
  __typename?: 'Address_variance_fields';
  addressID?: Maybe<Scalars['Float']>;
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Address" */
export type Address_Variance_Order_By = {
  addressID?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSite" */
export type ArchSite = {
  __typename?: 'ArchSite';
  /** An array relationship */
  ArchSiteComments: Array<ArchSiteComment>;
  /** An aggregated array relationship */
  ArchSiteComments_aggregate: ArchSiteComment_Aggregate;
  /** An array relationship */
  ArchSitePrices: Array<ArchSitePrice>;
  /** An aggregated array relationship */
  ArchSitePrices_aggregate: ArchSitePrice_Aggregate;
  /** An array relationship */
  ArchSiteTypeArchSites: Array<ArchSiteTypeArchSite>;
  /** An aggregated array relationship */
  ArchSiteTypeArchSites_aggregate: ArchSiteTypeArchSite_Aggregate;
  /** An array relationship */
  ArchSiteWorkingSchedules: Array<ArchSiteWorkingSchedule>;
  /** An aggregated array relationship */
  ArchSiteWorkingSchedules_aggregate: ArchSiteWorkingSchedule_Aggregate;
  /** An object relationship */
  Company: Company;
  /** An object relationship */
  Location: Location;
  /** An array relationship */
  TravelGuideArchSites: Array<TravelGuideArchSite>;
  /** An aggregated array relationship */
  TravelGuideArchSites_aggregate: TravelGuideArchSite_Aggregate;
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID: Scalars['Int'];
  averageTime?: Maybe<Scalars['Int']>;
  companyID: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  destruction?: Maybe<Scalars['String']>;
  diameter?: Maybe<Scalars['Float']>;
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  name: Scalars['String'];
  period?: Maybe<Scalars['String']>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteCommentsArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteComments_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSitePricesArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSitePrices_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteTypeArchSitesArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteTypeArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteWorkingSchedulesArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteArchSiteWorkingSchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteTravelGuideArchSitesArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** columns and relationships of "ArchSite" */
export type ArchSiteTravelGuideArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};

/** aggregated selection of "ArchSite" */
export type ArchSite_Aggregate = {
  __typename?: 'ArchSite_aggregate';
  aggregate?: Maybe<ArchSite_Aggregate_Fields>;
  nodes: Array<ArchSite>;
};

/** aggregate fields of "ArchSite" */
export type ArchSite_Aggregate_Fields = {
  __typename?: 'ArchSite_aggregate_fields';
  avg?: Maybe<ArchSite_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSite_Max_Fields>;
  min?: Maybe<ArchSite_Min_Fields>;
  stddev?: Maybe<ArchSite_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSite_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSite_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSite_Sum_Fields>;
  var_pop?: Maybe<ArchSite_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSite_Var_Samp_Fields>;
  variance?: Maybe<ArchSite_Variance_Fields>;
};


/** aggregate fields of "ArchSite" */
export type ArchSite_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSite_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSite" */
export type ArchSite_Aggregate_Order_By = {
  avg?: Maybe<ArchSite_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSite_Max_Order_By>;
  min?: Maybe<ArchSite_Min_Order_By>;
  stddev?: Maybe<ArchSite_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSite_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSite_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSite_Sum_Order_By>;
  var_pop?: Maybe<ArchSite_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSite_Var_Samp_Order_By>;
  variance?: Maybe<ArchSite_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSite" */
export type ArchSite_Arr_Rel_Insert_Input = {
  data: Array<ArchSite_Insert_Input>;
  on_conflict?: Maybe<ArchSite_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSite_Avg_Fields = {
  __typename?: 'ArchSite_avg_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSite" */
export type ArchSite_Avg_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSite". All fields are combined with a logical 'AND'. */
export type ArchSite_Bool_Exp = {
  ArchSiteComments?: Maybe<ArchSiteComment_Bool_Exp>;
  ArchSitePrices?: Maybe<ArchSitePrice_Bool_Exp>;
  ArchSiteTypeArchSites?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
  ArchSiteWorkingSchedules?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
  Company?: Maybe<Company_Bool_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  TravelGuideArchSites?: Maybe<TravelGuideArchSite_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSite_Bool_Exp>>>;
  _not?: Maybe<ArchSite_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSite_Bool_Exp>>>;
  age?: Maybe<Int_Comparison_Exp>;
  altitude?: Maybe<Float_Comparison_Exp>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  averageTime?: Maybe<Int_Comparison_Exp>;
  companyID?: Maybe<Int_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  destruction?: Maybe<String_Comparison_Exp>;
  diameter?: Maybe<Float_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  period?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSite" */
export enum ArchSite_Constraint {
  /** unique or primary key constraint */
  ArchSitePkey = 'ArchSite_pkey'
}

/** input type for incrementing integer columne in table "ArchSite" */
export type ArchSite_Inc_Input = {
  age?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSite" */
export type ArchSite_Insert_Input = {
  ArchSiteComments?: Maybe<ArchSiteComment_Arr_Rel_Insert_Input>;
  ArchSitePrices?: Maybe<ArchSitePrice_Arr_Rel_Insert_Input>;
  ArchSiteTypeArchSites?: Maybe<ArchSiteTypeArchSite_Arr_Rel_Insert_Input>;
  ArchSiteWorkingSchedules?: Maybe<ArchSiteWorkingSchedule_Arr_Rel_Insert_Input>;
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  TravelGuideArchSites?: Maybe<TravelGuideArchSite_Arr_Rel_Insert_Input>;
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  destruction?: Maybe<Scalars['String']>;
  diameter?: Maybe<Scalars['Float']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArchSite_Max_Fields = {
  __typename?: 'ArchSite_max_fields';
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  destruction?: Maybe<Scalars['String']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "ArchSite" */
export type ArchSite_Max_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  destruction?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  period?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSite_Min_Fields = {
  __typename?: 'ArchSite_min_fields';
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  destruction?: Maybe<Scalars['String']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "ArchSite" */
export type ArchSite_Min_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  destruction?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  period?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSite" */
export type ArchSite_Mutation_Response = {
  __typename?: 'ArchSite_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSite>;
};

/** input type for inserting object relation for remote table "ArchSite" */
export type ArchSite_Obj_Rel_Insert_Input = {
  data: ArchSite_Insert_Input;
  on_conflict?: Maybe<ArchSite_On_Conflict>;
};

/** on conflict condition type for table "ArchSite" */
export type ArchSite_On_Conflict = {
  constraint: ArchSite_Constraint;
  update_columns: Array<ArchSite_Update_Column>;
  where?: Maybe<ArchSite_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSite" */
export type ArchSite_Order_By = {
  ArchSiteComments_aggregate?: Maybe<ArchSiteComment_Aggregate_Order_By>;
  ArchSitePrices_aggregate?: Maybe<ArchSitePrice_Aggregate_Order_By>;
  ArchSiteTypeArchSites_aggregate?: Maybe<ArchSiteTypeArchSite_Aggregate_Order_By>;
  ArchSiteWorkingSchedules_aggregate?: Maybe<ArchSiteWorkingSchedule_Aggregate_Order_By>;
  Company?: Maybe<Company_Order_By>;
  Location?: Maybe<Location_Order_By>;
  TravelGuideArchSites_aggregate?: Maybe<TravelGuideArchSite_Aggregate_Order_By>;
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  destruction?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  period?: Maybe<Order_By>;
};

/** select columns of table "ArchSite" */
export enum ArchSite_Select_Column {
  /** column name */
  Age = 'age',
  /** column name */
  Altitude = 'altitude',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  AverageTime = 'averageTime',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  Destruction = 'destruction',
  /** column name */
  Diameter = 'diameter',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  Period = 'period'
}

/** input type for updating data in table "ArchSite" */
export type ArchSite_Set_Input = {
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  destruction?: Maybe<Scalars['String']>;
  diameter?: Maybe<Scalars['Float']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type ArchSite_Stddev_Fields = {
  __typename?: 'ArchSite_stddev_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSite" */
export type ArchSite_Stddev_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSite_Stddev_Pop_Fields = {
  __typename?: 'ArchSite_stddev_pop_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSite" */
export type ArchSite_Stddev_Pop_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSite_Stddev_Samp_Fields = {
  __typename?: 'ArchSite_stddev_samp_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSite" */
export type ArchSite_Stddev_Samp_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSite_Sum_Fields = {
  __typename?: 'ArchSite_sum_fields';
  age?: Maybe<Scalars['Int']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Int']>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSite" */
export type ArchSite_Sum_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** update columns of table "ArchSite" */
export enum ArchSite_Update_Column {
  /** column name */
  Age = 'age',
  /** column name */
  Altitude = 'altitude',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  AverageTime = 'averageTime',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  Destruction = 'destruction',
  /** column name */
  Diameter = 'diameter',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  Period = 'period'
}

/** aggregate var_pop on columns */
export type ArchSite_Var_Pop_Fields = {
  __typename?: 'ArchSite_var_pop_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSite" */
export type ArchSite_Var_Pop_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSite_Var_Samp_Fields = {
  __typename?: 'ArchSite_var_samp_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSite" */
export type ArchSite_Var_Samp_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSite_Variance_Fields = {
  __typename?: 'ArchSite_variance_fields';
  age?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  diameter?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSite" */
export type ArchSite_Variance_Order_By = {
  age?: Maybe<Order_By>;
  altitude?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  diameter?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteComment" */
export type ArchSiteComment = {
  __typename?: 'ArchSiteComment';
  /** An object relationship */
  ArchSite: ArchSite;
  /** An object relationship */
  User: User;
  archSiteCommentID: Scalars['Int'];
  archSiteID: Scalars['Int'];
  content: Scalars['String'];
  date: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  star: Scalars['Float'];
  userID: Scalars['Int'];
};

/** aggregated selection of "ArchSiteComment" */
export type ArchSiteComment_Aggregate = {
  __typename?: 'ArchSiteComment_aggregate';
  aggregate?: Maybe<ArchSiteComment_Aggregate_Fields>;
  nodes: Array<ArchSiteComment>;
};

/** aggregate fields of "ArchSiteComment" */
export type ArchSiteComment_Aggregate_Fields = {
  __typename?: 'ArchSiteComment_aggregate_fields';
  avg?: Maybe<ArchSiteComment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteComment_Max_Fields>;
  min?: Maybe<ArchSiteComment_Min_Fields>;
  stddev?: Maybe<ArchSiteComment_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteComment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteComment_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteComment_Sum_Fields>;
  var_pop?: Maybe<ArchSiteComment_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteComment_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteComment_Variance_Fields>;
};


/** aggregate fields of "ArchSiteComment" */
export type ArchSiteComment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteComment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteComment" */
export type ArchSiteComment_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteComment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteComment_Max_Order_By>;
  min?: Maybe<ArchSiteComment_Min_Order_By>;
  stddev?: Maybe<ArchSiteComment_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteComment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteComment_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteComment_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteComment_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteComment_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteComment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteComment" */
export type ArchSiteComment_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteComment_Insert_Input>;
  on_conflict?: Maybe<ArchSiteComment_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteComment_Avg_Fields = {
  __typename?: 'ArchSiteComment_avg_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Avg_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteComment". All fields are combined with a logical 'AND'. */
export type ArchSiteComment_Bool_Exp = {
  ArchSite?: Maybe<ArchSite_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteComment_Bool_Exp>>>;
  _not?: Maybe<ArchSiteComment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteComment_Bool_Exp>>>;
  archSiteCommentID?: Maybe<Int_Comparison_Exp>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  content?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteComment" */
export enum ArchSiteComment_Constraint {
  /** unique or primary key constraint */
  ArchSiteCommentPkey = 'ArchSiteComment_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteComment" */
export type ArchSiteComment_Inc_Input = {
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteComment" */
export type ArchSiteComment_Insert_Input = {
  ArchSite?: Maybe<ArchSite_Obj_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type ArchSiteComment_Max_Fields = {
  __typename?: 'ArchSiteComment_max_fields';
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Max_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteComment_Min_Fields = {
  __typename?: 'ArchSiteComment_min_fields';
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Min_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteComment" */
export type ArchSiteComment_Mutation_Response = {
  __typename?: 'ArchSiteComment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteComment>;
};

/** input type for inserting object relation for remote table "ArchSiteComment" */
export type ArchSiteComment_Obj_Rel_Insert_Input = {
  data: ArchSiteComment_Insert_Input;
  on_conflict?: Maybe<ArchSiteComment_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteComment" */
export type ArchSiteComment_On_Conflict = {
  constraint: ArchSiteComment_Constraint;
  update_columns: Array<ArchSiteComment_Update_Column>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteComment" */
export type ArchSiteComment_Order_By = {
  ArchSite?: Maybe<ArchSite_Order_By>;
  User?: Maybe<User_Order_By>;
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteComment" */
export enum ArchSiteComment_Select_Column {
  /** column name */
  ArchSiteCommentId = 'archSiteCommentID',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "ArchSiteComment" */
export type ArchSiteComment_Set_Input = {
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type ArchSiteComment_Stddev_Fields = {
  __typename?: 'ArchSiteComment_stddev_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Stddev_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteComment_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteComment_stddev_pop_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Stddev_Pop_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteComment_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteComment_stddev_samp_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Stddev_Samp_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteComment_Sum_Fields = {
  __typename?: 'ArchSiteComment_sum_fields';
  archSiteCommentID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Sum_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteComment" */
export enum ArchSiteComment_Update_Column {
  /** column name */
  ArchSiteCommentId = 'archSiteCommentID',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type ArchSiteComment_Var_Pop_Fields = {
  __typename?: 'ArchSiteComment_var_pop_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Var_Pop_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteComment_Var_Samp_Fields = {
  __typename?: 'ArchSiteComment_var_samp_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Var_Samp_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteComment_Variance_Fields = {
  __typename?: 'ArchSiteComment_variance_fields';
  archSiteCommentID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteComment" */
export type ArchSiteComment_Variance_Order_By = {
  archSiteCommentID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteEntranceType" */
export type ArchSiteEntranceType = {
  __typename?: 'ArchSiteEntranceType';
  /** An array relationship */
  ArchSitePrices: Array<ArchSitePrice>;
  /** An aggregated array relationship */
  ArchSitePrices_aggregate: ArchSitePrice_Aggregate;
  archSiteEntranceTypeID: Scalars['Int'];
  content: Scalars['String'];
  isDeleted: Scalars['Boolean'];
};


/** columns and relationships of "ArchSiteEntranceType" */
export type ArchSiteEntranceTypeArchSitePricesArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** columns and relationships of "ArchSiteEntranceType" */
export type ArchSiteEntranceTypeArchSitePrices_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};

/** aggregated selection of "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Aggregate = {
  __typename?: 'ArchSiteEntranceType_aggregate';
  aggregate?: Maybe<ArchSiteEntranceType_Aggregate_Fields>;
  nodes: Array<ArchSiteEntranceType>;
};

/** aggregate fields of "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Aggregate_Fields = {
  __typename?: 'ArchSiteEntranceType_aggregate_fields';
  avg?: Maybe<ArchSiteEntranceType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteEntranceType_Max_Fields>;
  min?: Maybe<ArchSiteEntranceType_Min_Fields>;
  stddev?: Maybe<ArchSiteEntranceType_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteEntranceType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteEntranceType_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteEntranceType_Sum_Fields>;
  var_pop?: Maybe<ArchSiteEntranceType_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteEntranceType_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteEntranceType_Variance_Fields>;
};


/** aggregate fields of "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteEntranceType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteEntranceType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteEntranceType_Max_Order_By>;
  min?: Maybe<ArchSiteEntranceType_Min_Order_By>;
  stddev?: Maybe<ArchSiteEntranceType_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteEntranceType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteEntranceType_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteEntranceType_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteEntranceType_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteEntranceType_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteEntranceType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteEntranceType_Insert_Input>;
  on_conflict?: Maybe<ArchSiteEntranceType_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteEntranceType_Avg_Fields = {
  __typename?: 'ArchSiteEntranceType_avg_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Avg_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteEntranceType". All fields are combined with a logical 'AND'. */
export type ArchSiteEntranceType_Bool_Exp = {
  ArchSitePrices?: Maybe<ArchSitePrice_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteEntranceType_Bool_Exp>>>;
  _not?: Maybe<ArchSiteEntranceType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteEntranceType_Bool_Exp>>>;
  archSiteEntranceTypeID?: Maybe<Int_Comparison_Exp>;
  content?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteEntranceType" */
export enum ArchSiteEntranceType_Constraint {
  /** unique or primary key constraint */
  ArchSiteEntranceTypePkey = 'ArchSiteEntranceType_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Inc_Input = {
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Insert_Input = {
  ArchSitePrices?: Maybe<ArchSitePrice_Arr_Rel_Insert_Input>;
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type ArchSiteEntranceType_Max_Fields = {
  __typename?: 'ArchSiteEntranceType_max_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Max_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteEntranceType_Min_Fields = {
  __typename?: 'ArchSiteEntranceType_min_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Min_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Mutation_Response = {
  __typename?: 'ArchSiteEntranceType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteEntranceType>;
};

/** input type for inserting object relation for remote table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Obj_Rel_Insert_Input = {
  data: ArchSiteEntranceType_Insert_Input;
  on_conflict?: Maybe<ArchSiteEntranceType_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_On_Conflict = {
  constraint: ArchSiteEntranceType_Constraint;
  update_columns: Array<ArchSiteEntranceType_Update_Column>;
  where?: Maybe<ArchSiteEntranceType_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Order_By = {
  ArchSitePrices_aggregate?: Maybe<ArchSitePrice_Aggregate_Order_By>;
  archSiteEntranceTypeID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteEntranceType" */
export enum ArchSiteEntranceType_Select_Column {
  /** column name */
  ArchSiteEntranceTypeId = 'archSiteEntranceTypeID',
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Set_Input = {
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type ArchSiteEntranceType_Stddev_Fields = {
  __typename?: 'ArchSiteEntranceType_stddev_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Stddev_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteEntranceType_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteEntranceType_stddev_pop_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Stddev_Pop_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteEntranceType_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteEntranceType_stddev_samp_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Stddev_Samp_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteEntranceType_Sum_Fields = {
  __typename?: 'ArchSiteEntranceType_sum_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Sum_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteEntranceType" */
export enum ArchSiteEntranceType_Update_Column {
  /** column name */
  ArchSiteEntranceTypeId = 'archSiteEntranceTypeID',
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type ArchSiteEntranceType_Var_Pop_Fields = {
  __typename?: 'ArchSiteEntranceType_var_pop_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Var_Pop_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteEntranceType_Var_Samp_Fields = {
  __typename?: 'ArchSiteEntranceType_var_samp_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Var_Samp_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteEntranceType_Variance_Fields = {
  __typename?: 'ArchSiteEntranceType_variance_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteEntranceType" */
export type ArchSiteEntranceType_Variance_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSitePrice" */
export type ArchSitePrice = {
  __typename?: 'ArchSitePrice';
  /** An object relationship */
  ArchSite: ArchSite;
  /** An object relationship */
  ArchSiteEntranceType: ArchSiteEntranceType;
  archSiteEntranceTypeID: Scalars['Int'];
  archSiteID: Scalars['Int'];
  archSitePriceID: Scalars['Int'];
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  price: Scalars['Float'];
  startDate: Scalars['timestamptz'];
};

/** aggregated selection of "ArchSitePrice" */
export type ArchSitePrice_Aggregate = {
  __typename?: 'ArchSitePrice_aggregate';
  aggregate?: Maybe<ArchSitePrice_Aggregate_Fields>;
  nodes: Array<ArchSitePrice>;
};

/** aggregate fields of "ArchSitePrice" */
export type ArchSitePrice_Aggregate_Fields = {
  __typename?: 'ArchSitePrice_aggregate_fields';
  avg?: Maybe<ArchSitePrice_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSitePrice_Max_Fields>;
  min?: Maybe<ArchSitePrice_Min_Fields>;
  stddev?: Maybe<ArchSitePrice_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSitePrice_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSitePrice_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSitePrice_Sum_Fields>;
  var_pop?: Maybe<ArchSitePrice_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSitePrice_Var_Samp_Fields>;
  variance?: Maybe<ArchSitePrice_Variance_Fields>;
};


/** aggregate fields of "ArchSitePrice" */
export type ArchSitePrice_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSitePrice_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSitePrice" */
export type ArchSitePrice_Aggregate_Order_By = {
  avg?: Maybe<ArchSitePrice_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSitePrice_Max_Order_By>;
  min?: Maybe<ArchSitePrice_Min_Order_By>;
  stddev?: Maybe<ArchSitePrice_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSitePrice_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSitePrice_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSitePrice_Sum_Order_By>;
  var_pop?: Maybe<ArchSitePrice_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSitePrice_Var_Samp_Order_By>;
  variance?: Maybe<ArchSitePrice_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSitePrice" */
export type ArchSitePrice_Arr_Rel_Insert_Input = {
  data: Array<ArchSitePrice_Insert_Input>;
  on_conflict?: Maybe<ArchSitePrice_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSitePrice_Avg_Fields = {
  __typename?: 'ArchSitePrice_avg_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Avg_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSitePrice". All fields are combined with a logical 'AND'. */
export type ArchSitePrice_Bool_Exp = {
  ArchSite?: Maybe<ArchSite_Bool_Exp>;
  ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSitePrice_Bool_Exp>>>;
  _not?: Maybe<ArchSitePrice_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSitePrice_Bool_Exp>>>;
  archSiteEntranceTypeID?: Maybe<Int_Comparison_Exp>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  archSitePriceID?: Maybe<Int_Comparison_Exp>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSitePrice" */
export enum ArchSitePrice_Constraint {
  /** unique or primary key constraint */
  ArchSitePricePkey = 'ArchSitePrice_pkey'
}

/** input type for incrementing integer columne in table "ArchSitePrice" */
export type ArchSitePrice_Inc_Input = {
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSitePrice" */
export type ArchSitePrice_Insert_Input = {
  ArchSite?: Maybe<ArchSite_Obj_Rel_Insert_Input>;
  ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Obj_Rel_Insert_Input>;
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type ArchSitePrice_Max_Fields = {
  __typename?: 'ArchSitePrice_max_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Max_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSitePrice_Min_Fields = {
  __typename?: 'ArchSitePrice_min_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Min_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSitePrice" */
export type ArchSitePrice_Mutation_Response = {
  __typename?: 'ArchSitePrice_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSitePrice>;
};

/** input type for inserting object relation for remote table "ArchSitePrice" */
export type ArchSitePrice_Obj_Rel_Insert_Input = {
  data: ArchSitePrice_Insert_Input;
  on_conflict?: Maybe<ArchSitePrice_On_Conflict>;
};

/** on conflict condition type for table "ArchSitePrice" */
export type ArchSitePrice_On_Conflict = {
  constraint: ArchSitePrice_Constraint;
  update_columns: Array<ArchSitePrice_Update_Column>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSitePrice" */
export type ArchSitePrice_Order_By = {
  ArchSite?: Maybe<ArchSite_Order_By>;
  ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Order_By>;
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "ArchSitePrice" */
export enum ArchSitePrice_Select_Column {
  /** column name */
  ArchSiteEntranceTypeId = 'archSiteEntranceTypeID',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSitePriceId = 'archSitePriceID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Price = 'price',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "ArchSitePrice" */
export type ArchSitePrice_Set_Input = {
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type ArchSitePrice_Stddev_Fields = {
  __typename?: 'ArchSitePrice_stddev_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Stddev_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSitePrice_Stddev_Pop_Fields = {
  __typename?: 'ArchSitePrice_stddev_pop_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Stddev_Pop_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSitePrice_Stddev_Samp_Fields = {
  __typename?: 'ArchSitePrice_stddev_samp_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Stddev_Samp_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSitePrice_Sum_Fields = {
  __typename?: 'ArchSitePrice_sum_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSitePriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Sum_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** update columns of table "ArchSitePrice" */
export enum ArchSitePrice_Update_Column {
  /** column name */
  ArchSiteEntranceTypeId = 'archSiteEntranceTypeID',
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSitePriceId = 'archSitePriceID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Price = 'price',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type ArchSitePrice_Var_Pop_Fields = {
  __typename?: 'ArchSitePrice_var_pop_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Var_Pop_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSitePrice_Var_Samp_Fields = {
  __typename?: 'ArchSitePrice_var_samp_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Var_Samp_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSitePrice_Variance_Fields = {
  __typename?: 'ArchSitePrice_variance_fields';
  archSiteEntranceTypeID?: Maybe<Scalars['Float']>;
  archSiteID?: Maybe<Scalars['Float']>;
  archSitePriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSitePrice" */
export type ArchSitePrice_Variance_Order_By = {
  archSiteEntranceTypeID?: Maybe<Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSitePriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteType" */
export type ArchSiteType = {
  __typename?: 'ArchSiteType';
  /** An array relationship */
  ArchSiteTypeArchSites: Array<ArchSiteTypeArchSite>;
  /** An aggregated array relationship */
  ArchSiteTypeArchSites_aggregate: ArchSiteTypeArchSite_Aggregate;
  archSiteTypeID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
};


/** columns and relationships of "ArchSiteType" */
export type ArchSiteTypeArchSiteTypeArchSitesArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** columns and relationships of "ArchSiteType" */
export type ArchSiteTypeArchSiteTypeArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};

/** aggregated selection of "ArchSiteType" */
export type ArchSiteType_Aggregate = {
  __typename?: 'ArchSiteType_aggregate';
  aggregate?: Maybe<ArchSiteType_Aggregate_Fields>;
  nodes: Array<ArchSiteType>;
};

/** aggregate fields of "ArchSiteType" */
export type ArchSiteType_Aggregate_Fields = {
  __typename?: 'ArchSiteType_aggregate_fields';
  avg?: Maybe<ArchSiteType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteType_Max_Fields>;
  min?: Maybe<ArchSiteType_Min_Fields>;
  stddev?: Maybe<ArchSiteType_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteType_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteType_Sum_Fields>;
  var_pop?: Maybe<ArchSiteType_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteType_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteType_Variance_Fields>;
};


/** aggregate fields of "ArchSiteType" */
export type ArchSiteType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteType" */
export type ArchSiteType_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteType_Max_Order_By>;
  min?: Maybe<ArchSiteType_Min_Order_By>;
  stddev?: Maybe<ArchSiteType_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteType_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteType_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteType_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteType_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteType" */
export type ArchSiteType_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteType_Insert_Input>;
  on_conflict?: Maybe<ArchSiteType_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteType_Avg_Fields = {
  __typename?: 'ArchSiteType_avg_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteType" */
export type ArchSiteType_Avg_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteType". All fields are combined with a logical 'AND'. */
export type ArchSiteType_Bool_Exp = {
  ArchSiteTypeArchSites?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteType_Bool_Exp>>>;
  _not?: Maybe<ArchSiteType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteType_Bool_Exp>>>;
  archSiteTypeID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteType" */
export enum ArchSiteType_Constraint {
  /** unique or primary key constraint */
  ArchSiteTypePkey = 'ArchSiteType_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteType" */
export type ArchSiteType_Inc_Input = {
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteType" */
export type ArchSiteType_Insert_Input = {
  ArchSiteTypeArchSites?: Maybe<ArchSiteTypeArchSite_Arr_Rel_Insert_Input>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArchSiteType_Max_Fields = {
  __typename?: 'ArchSiteType_max_fields';
  archSiteTypeID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "ArchSiteType" */
export type ArchSiteType_Max_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteType_Min_Fields = {
  __typename?: 'ArchSiteType_min_fields';
  archSiteTypeID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "ArchSiteType" */
export type ArchSiteType_Min_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteType" */
export type ArchSiteType_Mutation_Response = {
  __typename?: 'ArchSiteType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteType>;
};

/** input type for inserting object relation for remote table "ArchSiteType" */
export type ArchSiteType_Obj_Rel_Insert_Input = {
  data: ArchSiteType_Insert_Input;
  on_conflict?: Maybe<ArchSiteType_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteType" */
export type ArchSiteType_On_Conflict = {
  constraint: ArchSiteType_Constraint;
  update_columns: Array<ArchSiteType_Update_Column>;
  where?: Maybe<ArchSiteType_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteType" */
export type ArchSiteType_Order_By = {
  ArchSiteTypeArchSites_aggregate?: Maybe<ArchSiteTypeArchSite_Aggregate_Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteType" */
export enum ArchSiteType_Select_Column {
  /** column name */
  ArchSiteTypeId = 'archSiteTypeID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "ArchSiteType" */
export type ArchSiteType_Set_Input = {
  archSiteTypeID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type ArchSiteType_Stddev_Fields = {
  __typename?: 'ArchSiteType_stddev_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteType" */
export type ArchSiteType_Stddev_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteType_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteType_stddev_pop_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteType" */
export type ArchSiteType_Stddev_Pop_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteType_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteType_stddev_samp_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteType" */
export type ArchSiteType_Stddev_Samp_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteType_Sum_Fields = {
  __typename?: 'ArchSiteType_sum_fields';
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteType" */
export type ArchSiteType_Sum_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteType" */
export enum ArchSiteType_Update_Column {
  /** column name */
  ArchSiteTypeId = 'archSiteTypeID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name'
}

/** aggregate var_pop on columns */
export type ArchSiteType_Var_Pop_Fields = {
  __typename?: 'ArchSiteType_var_pop_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteType" */
export type ArchSiteType_Var_Pop_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteType_Var_Samp_Fields = {
  __typename?: 'ArchSiteType_var_samp_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteType" */
export type ArchSiteType_Var_Samp_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteType_Variance_Fields = {
  __typename?: 'ArchSiteType_variance_fields';
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteType" */
export type ArchSiteType_Variance_Order_By = {
  archSiteTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite = {
  __typename?: 'ArchSiteTypeArchSite';
  /** An object relationship */
  ArchSite: ArchSite;
  /** An object relationship */
  ArchSiteType: ArchSiteType;
  archSiteID: Scalars['Int'];
  archSiteTypeArchSiteID: Scalars['Int'];
  archSiteTypeID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};

/** aggregated selection of "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Aggregate = {
  __typename?: 'ArchSiteTypeArchSite_aggregate';
  aggregate?: Maybe<ArchSiteTypeArchSite_Aggregate_Fields>;
  nodes: Array<ArchSiteTypeArchSite>;
};

/** aggregate fields of "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Aggregate_Fields = {
  __typename?: 'ArchSiteTypeArchSite_aggregate_fields';
  avg?: Maybe<ArchSiteTypeArchSite_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteTypeArchSite_Max_Fields>;
  min?: Maybe<ArchSiteTypeArchSite_Min_Fields>;
  stddev?: Maybe<ArchSiteTypeArchSite_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteTypeArchSite_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteTypeArchSite_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteTypeArchSite_Sum_Fields>;
  var_pop?: Maybe<ArchSiteTypeArchSite_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteTypeArchSite_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteTypeArchSite_Variance_Fields>;
};


/** aggregate fields of "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteTypeArchSite_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteTypeArchSite_Max_Order_By>;
  min?: Maybe<ArchSiteTypeArchSite_Min_Order_By>;
  stddev?: Maybe<ArchSiteTypeArchSite_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteTypeArchSite_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteTypeArchSite_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteTypeArchSite_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteTypeArchSite_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteTypeArchSite_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteTypeArchSite_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteTypeArchSite_Insert_Input>;
  on_conflict?: Maybe<ArchSiteTypeArchSite_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteTypeArchSite_Avg_Fields = {
  __typename?: 'ArchSiteTypeArchSite_avg_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Avg_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteTypeArchSite". All fields are combined with a logical 'AND'. */
export type ArchSiteTypeArchSite_Bool_Exp = {
  ArchSite?: Maybe<ArchSite_Bool_Exp>;
  ArchSiteType?: Maybe<ArchSiteType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteTypeArchSite_Bool_Exp>>>;
  _not?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteTypeArchSite_Bool_Exp>>>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  archSiteTypeArchSiteID?: Maybe<Int_Comparison_Exp>;
  archSiteTypeID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteTypeArchSite" */
export enum ArchSiteTypeArchSite_Constraint {
  /** unique or primary key constraint */
  ArchSiteTypeArchSitePkey = 'ArchSiteTypeArchSite_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Inc_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Insert_Input = {
  ArchSite?: Maybe<ArchSite_Obj_Rel_Insert_Input>;
  ArchSiteType?: Maybe<ArchSiteType_Obj_Rel_Insert_Input>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type ArchSiteTypeArchSite_Max_Fields = {
  __typename?: 'ArchSiteTypeArchSite_max_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Max_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteTypeArchSite_Min_Fields = {
  __typename?: 'ArchSiteTypeArchSite_min_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Min_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Mutation_Response = {
  __typename?: 'ArchSiteTypeArchSite_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteTypeArchSite>;
};

/** input type for inserting object relation for remote table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Obj_Rel_Insert_Input = {
  data: ArchSiteTypeArchSite_Insert_Input;
  on_conflict?: Maybe<ArchSiteTypeArchSite_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_On_Conflict = {
  constraint: ArchSiteTypeArchSite_Constraint;
  update_columns: Array<ArchSiteTypeArchSite_Update_Column>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Order_By = {
  ArchSite?: Maybe<ArchSite_Order_By>;
  ArchSiteType?: Maybe<ArchSiteType_Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteTypeArchSite" */
export enum ArchSiteTypeArchSite_Select_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSiteTypeArchSiteId = 'archSiteTypeArchSiteID',
  /** column name */
  ArchSiteTypeId = 'archSiteTypeID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Set_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type ArchSiteTypeArchSite_Stddev_Fields = {
  __typename?: 'ArchSiteTypeArchSite_stddev_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Stddev_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteTypeArchSite_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteTypeArchSite_stddev_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Stddev_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteTypeArchSite_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteTypeArchSite_stddev_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Stddev_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteTypeArchSite_Sum_Fields = {
  __typename?: 'ArchSiteTypeArchSite_sum_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Int']>;
  archSiteTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Sum_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteTypeArchSite" */
export enum ArchSiteTypeArchSite_Update_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSiteTypeArchSiteId = 'archSiteTypeArchSiteID',
  /** column name */
  ArchSiteTypeId = 'archSiteTypeID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type ArchSiteTypeArchSite_Var_Pop_Fields = {
  __typename?: 'ArchSiteTypeArchSite_var_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Var_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteTypeArchSite_Var_Samp_Fields = {
  __typename?: 'ArchSiteTypeArchSite_var_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Var_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteTypeArchSite_Variance_Fields = {
  __typename?: 'ArchSiteTypeArchSite_variance_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeArchSiteID?: Maybe<Scalars['Float']>;
  archSiteTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteTypeArchSite" */
export type ArchSiteTypeArchSite_Variance_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteTypeArchSiteID?: Maybe<Order_By>;
  archSiteTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay = {
  __typename?: 'ArchSiteWorkingDay';
  /** An array relationship */
  ArchSiteWorkingDaySchedules: Array<ArchSiteWorkingDaySchedule>;
  /** An aggregated array relationship */
  ArchSiteWorkingDaySchedules_aggregate: ArchSiteWorkingDaySchedule_Aggregate;
  /** An object relationship */
  Day: Day;
  archSiteWorkingDayID: Scalars['Int'];
  closeHour: Scalars['timetz'];
  dayID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  openHour: Scalars['timetz'];
};


/** columns and relationships of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDayArchSiteWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDayArchSiteWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Aggregate = {
  __typename?: 'ArchSiteWorkingDay_aggregate';
  aggregate?: Maybe<ArchSiteWorkingDay_Aggregate_Fields>;
  nodes: Array<ArchSiteWorkingDay>;
};

/** aggregate fields of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Aggregate_Fields = {
  __typename?: 'ArchSiteWorkingDay_aggregate_fields';
  avg?: Maybe<ArchSiteWorkingDay_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteWorkingDay_Max_Fields>;
  min?: Maybe<ArchSiteWorkingDay_Min_Fields>;
  stddev?: Maybe<ArchSiteWorkingDay_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteWorkingDay_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteWorkingDay_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteWorkingDay_Sum_Fields>;
  var_pop?: Maybe<ArchSiteWorkingDay_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteWorkingDay_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteWorkingDay_Variance_Fields>;
};


/** aggregate fields of "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteWorkingDay_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteWorkingDay_Max_Order_By>;
  min?: Maybe<ArchSiteWorkingDay_Min_Order_By>;
  stddev?: Maybe<ArchSiteWorkingDay_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteWorkingDay_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteWorkingDay_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteWorkingDay_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteWorkingDay_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteWorkingDay_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteWorkingDay_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteWorkingDay_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingDay_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteWorkingDay_Avg_Fields = {
  __typename?: 'ArchSiteWorkingDay_avg_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Avg_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteWorkingDay". All fields are combined with a logical 'AND'. */
export type ArchSiteWorkingDay_Bool_Exp = {
  ArchSiteWorkingDaySchedules?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
  Day?: Maybe<Day_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteWorkingDay_Bool_Exp>>>;
  _not?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteWorkingDay_Bool_Exp>>>;
  archSiteWorkingDayID?: Maybe<Int_Comparison_Exp>;
  closeHour?: Maybe<Timetz_Comparison_Exp>;
  dayID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  openHour?: Maybe<Timetz_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteWorkingDay" */
export enum ArchSiteWorkingDay_Constraint {
  /** unique or primary key constraint */
  ArchSiteWorkingDayPkey = 'ArchSiteWorkingDay_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Inc_Input = {
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  dayID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Insert_Input = {
  ArchSiteWorkingDaySchedules?: Maybe<ArchSiteWorkingDaySchedule_Arr_Rel_Insert_Input>;
  Day?: Maybe<Day_Obj_Rel_Insert_Input>;
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** aggregate max on columns */
export type ArchSiteWorkingDay_Max_Fields = {
  __typename?: 'ArchSiteWorkingDay_max_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** order by max() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Max_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteWorkingDay_Min_Fields = {
  __typename?: 'ArchSiteWorkingDay_min_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** order by min() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Min_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Mutation_Response = {
  __typename?: 'ArchSiteWorkingDay_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteWorkingDay>;
};

/** input type for inserting object relation for remote table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Obj_Rel_Insert_Input = {
  data: ArchSiteWorkingDay_Insert_Input;
  on_conflict?: Maybe<ArchSiteWorkingDay_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_On_Conflict = {
  constraint: ArchSiteWorkingDay_Constraint;
  update_columns: Array<ArchSiteWorkingDay_Update_Column>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Order_By = {
  ArchSiteWorkingDaySchedules_aggregate?: Maybe<ArchSiteWorkingDaySchedule_Aggregate_Order_By>;
  Day?: Maybe<Day_Order_By>;
  archSiteWorkingDayID?: Maybe<Order_By>;
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteWorkingDay" */
export enum ArchSiteWorkingDay_Select_Column {
  /** column name */
  ArchSiteWorkingDayId = 'archSiteWorkingDayID',
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  OpenHour = 'openHour'
}

/** input type for updating data in table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Set_Input = {
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** aggregate stddev on columns */
export type ArchSiteWorkingDay_Stddev_Fields = {
  __typename?: 'ArchSiteWorkingDay_stddev_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Stddev_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteWorkingDay_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteWorkingDay_stddev_pop_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Stddev_Pop_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteWorkingDay_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteWorkingDay_stddev_samp_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Stddev_Samp_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteWorkingDay_Sum_Fields = {
  __typename?: 'ArchSiteWorkingDay_sum_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  dayID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Sum_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteWorkingDay" */
export enum ArchSiteWorkingDay_Update_Column {
  /** column name */
  ArchSiteWorkingDayId = 'archSiteWorkingDayID',
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  OpenHour = 'openHour'
}

/** aggregate var_pop on columns */
export type ArchSiteWorkingDay_Var_Pop_Fields = {
  __typename?: 'ArchSiteWorkingDay_var_pop_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Var_Pop_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteWorkingDay_Var_Samp_Fields = {
  __typename?: 'ArchSiteWorkingDay_var_samp_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Var_Samp_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteWorkingDay_Variance_Fields = {
  __typename?: 'ArchSiteWorkingDay_variance_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  dayID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteWorkingDay" */
export type ArchSiteWorkingDay_Variance_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule = {
  __typename?: 'ArchSiteWorkingDaySchedule';
  /** An object relationship */
  ArchSiteWorkingDay: ArchSiteWorkingDay;
  /** An object relationship */
  ArchSiteWorkingSchedule: ArchSiteWorkingSchedule;
  archSiteWorkingDayID: Scalars['Int'];
  archSiteWorkingDayScheduleID: Scalars['Int'];
  archSiteWorkingScheduleID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};

/** aggregated selection of "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Aggregate = {
  __typename?: 'ArchSiteWorkingDaySchedule_aggregate';
  aggregate?: Maybe<ArchSiteWorkingDaySchedule_Aggregate_Fields>;
  nodes: Array<ArchSiteWorkingDaySchedule>;
};

/** aggregate fields of "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Aggregate_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_aggregate_fields';
  avg?: Maybe<ArchSiteWorkingDaySchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteWorkingDaySchedule_Max_Fields>;
  min?: Maybe<ArchSiteWorkingDaySchedule_Min_Fields>;
  stddev?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteWorkingDaySchedule_Sum_Fields>;
  var_pop?: Maybe<ArchSiteWorkingDaySchedule_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteWorkingDaySchedule_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteWorkingDaySchedule_Variance_Fields>;
};


/** aggregate fields of "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteWorkingDaySchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteWorkingDaySchedule_Max_Order_By>;
  min?: Maybe<ArchSiteWorkingDaySchedule_Min_Order_By>;
  stddev?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteWorkingDaySchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteWorkingDaySchedule_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteWorkingDaySchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteWorkingDaySchedule_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteWorkingDaySchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingDaySchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteWorkingDaySchedule_Avg_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_avg_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Avg_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteWorkingDaySchedule". All fields are combined with a logical 'AND'. */
export type ArchSiteWorkingDaySchedule_Bool_Exp = {
  ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
  ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>>>;
  _not?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>>>;
  archSiteWorkingDayID?: Maybe<Int_Comparison_Exp>;
  archSiteWorkingDayScheduleID?: Maybe<Int_Comparison_Exp>;
  archSiteWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteWorkingDaySchedule" */
export enum ArchSiteWorkingDaySchedule_Constraint {
  /** unique or primary key constraint */
  ArchSiteWorkingDaySchedulePkey = 'ArchSiteWorkingDaySchedule_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Inc_Input = {
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Insert_Input = {
  ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Obj_Rel_Insert_Input>;
  ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Obj_Rel_Insert_Input>;
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type ArchSiteWorkingDaySchedule_Max_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_max_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Max_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteWorkingDaySchedule_Min_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_min_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Min_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Mutation_Response = {
  __typename?: 'ArchSiteWorkingDaySchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteWorkingDaySchedule>;
};

/** input type for inserting object relation for remote table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Obj_Rel_Insert_Input = {
  data: ArchSiteWorkingDaySchedule_Insert_Input;
  on_conflict?: Maybe<ArchSiteWorkingDaySchedule_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_On_Conflict = {
  constraint: ArchSiteWorkingDaySchedule_Constraint;
  update_columns: Array<ArchSiteWorkingDaySchedule_Update_Column>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Order_By = {
  ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Order_By>;
  ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Order_By>;
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteWorkingDaySchedule" */
export enum ArchSiteWorkingDaySchedule_Select_Column {
  /** column name */
  ArchSiteWorkingDayId = 'archSiteWorkingDayID',
  /** column name */
  ArchSiteWorkingDayScheduleId = 'archSiteWorkingDayScheduleID',
  /** column name */
  ArchSiteWorkingScheduleId = 'archSiteWorkingScheduleID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Set_Input = {
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type ArchSiteWorkingDaySchedule_Stddev_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_stddev_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Stddev_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteWorkingDaySchedule_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_stddev_pop_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Stddev_Pop_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteWorkingDaySchedule_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_stddev_samp_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Stddev_Samp_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteWorkingDaySchedule_Sum_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_sum_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Int']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Sum_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteWorkingDaySchedule" */
export enum ArchSiteWorkingDaySchedule_Update_Column {
  /** column name */
  ArchSiteWorkingDayId = 'archSiteWorkingDayID',
  /** column name */
  ArchSiteWorkingDayScheduleId = 'archSiteWorkingDayScheduleID',
  /** column name */
  ArchSiteWorkingScheduleId = 'archSiteWorkingScheduleID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type ArchSiteWorkingDaySchedule_Var_Pop_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_var_pop_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Var_Pop_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteWorkingDaySchedule_Var_Samp_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_var_samp_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Var_Samp_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteWorkingDaySchedule_Variance_Fields = {
  __typename?: 'ArchSiteWorkingDaySchedule_variance_fields';
  archSiteWorkingDayID?: Maybe<Scalars['Float']>;
  archSiteWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteWorkingDaySchedule" */
export type ArchSiteWorkingDaySchedule_Variance_Order_By = {
  archSiteWorkingDayID?: Maybe<Order_By>;
  archSiteWorkingDayScheduleID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** columns and relationships of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule = {
  __typename?: 'ArchSiteWorkingSchedule';
  /** An object relationship */
  ArchSite: ArchSite;
  /** An array relationship */
  ArchSiteWorkingDaySchedules: Array<ArchSiteWorkingDaySchedule>;
  /** An aggregated array relationship */
  ArchSiteWorkingDaySchedules_aggregate: ArchSiteWorkingDaySchedule_Aggregate;
  archSiteID: Scalars['Int'];
  archSiteWorkingScheduleID: Scalars['Int'];
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  startDate: Scalars['timestamptz'];
};


/** columns and relationships of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingScheduleArchSiteWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingScheduleArchSiteWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Aggregate = {
  __typename?: 'ArchSiteWorkingSchedule_aggregate';
  aggregate?: Maybe<ArchSiteWorkingSchedule_Aggregate_Fields>;
  nodes: Array<ArchSiteWorkingSchedule>;
};

/** aggregate fields of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Aggregate_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_aggregate_fields';
  avg?: Maybe<ArchSiteWorkingSchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArchSiteWorkingSchedule_Max_Fields>;
  min?: Maybe<ArchSiteWorkingSchedule_Min_Fields>;
  stddev?: Maybe<ArchSiteWorkingSchedule_Stddev_Fields>;
  stddev_pop?: Maybe<ArchSiteWorkingSchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArchSiteWorkingSchedule_Stddev_Samp_Fields>;
  sum?: Maybe<ArchSiteWorkingSchedule_Sum_Fields>;
  var_pop?: Maybe<ArchSiteWorkingSchedule_Var_Pop_Fields>;
  var_samp?: Maybe<ArchSiteWorkingSchedule_Var_Samp_Fields>;
  variance?: Maybe<ArchSiteWorkingSchedule_Variance_Fields>;
};


/** aggregate fields of "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Aggregate_Order_By = {
  avg?: Maybe<ArchSiteWorkingSchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArchSiteWorkingSchedule_Max_Order_By>;
  min?: Maybe<ArchSiteWorkingSchedule_Min_Order_By>;
  stddev?: Maybe<ArchSiteWorkingSchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<ArchSiteWorkingSchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArchSiteWorkingSchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<ArchSiteWorkingSchedule_Sum_Order_By>;
  var_pop?: Maybe<ArchSiteWorkingSchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<ArchSiteWorkingSchedule_Var_Samp_Order_By>;
  variance?: Maybe<ArchSiteWorkingSchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Arr_Rel_Insert_Input = {
  data: Array<ArchSiteWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingSchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type ArchSiteWorkingSchedule_Avg_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_avg_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Avg_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArchSiteWorkingSchedule". All fields are combined with a logical 'AND'. */
export type ArchSiteWorkingSchedule_Bool_Exp = {
  ArchSite?: Maybe<ArchSite_Bool_Exp>;
  ArchSiteWorkingDaySchedules?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArchSiteWorkingSchedule_Bool_Exp>>>;
  _not?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArchSiteWorkingSchedule_Bool_Exp>>>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  archSiteWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArchSiteWorkingSchedule" */
export enum ArchSiteWorkingSchedule_Constraint {
  /** unique or primary key constraint */
  ArchSiteWorkingSchedulePkey = 'ArchSiteWorkingSchedule_pkey'
}

/** input type for incrementing integer columne in table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Inc_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Insert_Input = {
  ArchSite?: Maybe<ArchSite_Obj_Rel_Insert_Input>;
  ArchSiteWorkingDaySchedules?: Maybe<ArchSiteWorkingDaySchedule_Arr_Rel_Insert_Input>;
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type ArchSiteWorkingSchedule_Max_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_max_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Max_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArchSiteWorkingSchedule_Min_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_min_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Min_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Mutation_Response = {
  __typename?: 'ArchSiteWorkingSchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArchSiteWorkingSchedule>;
};

/** input type for inserting object relation for remote table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Obj_Rel_Insert_Input = {
  data: ArchSiteWorkingSchedule_Insert_Input;
  on_conflict?: Maybe<ArchSiteWorkingSchedule_On_Conflict>;
};

/** on conflict condition type for table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_On_Conflict = {
  constraint: ArchSiteWorkingSchedule_Constraint;
  update_columns: Array<ArchSiteWorkingSchedule_Update_Column>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};

/** ordering options when selecting data from "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Order_By = {
  ArchSite?: Maybe<ArchSite_Order_By>;
  ArchSiteWorkingDaySchedules_aggregate?: Maybe<ArchSiteWorkingDaySchedule_Aggregate_Order_By>;
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "ArchSiteWorkingSchedule" */
export enum ArchSiteWorkingSchedule_Select_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSiteWorkingScheduleId = 'archSiteWorkingScheduleID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Set_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type ArchSiteWorkingSchedule_Stddev_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_stddev_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Stddev_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArchSiteWorkingSchedule_Stddev_Pop_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_stddev_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Stddev_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArchSiteWorkingSchedule_Stddev_Samp_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_stddev_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Stddev_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArchSiteWorkingSchedule_Sum_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_sum_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Sum_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "ArchSiteWorkingSchedule" */
export enum ArchSiteWorkingSchedule_Update_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  ArchSiteWorkingScheduleId = 'archSiteWorkingScheduleID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type ArchSiteWorkingSchedule_Var_Pop_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_var_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Var_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArchSiteWorkingSchedule_Var_Samp_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_var_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Var_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArchSiteWorkingSchedule_Variance_Fields = {
  __typename?: 'ArchSiteWorkingSchedule_variance_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  archSiteWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArchSiteWorkingSchedule" */
export type ArchSiteWorkingSchedule_Variance_Order_By = {
  archSiteID?: Maybe<Order_By>;
  archSiteWorkingScheduleID?: Maybe<Order_By>;
};

/** columns and relationships of "Article" */
export type Article = {
  __typename?: 'Article';
  /** An array relationship */
  ArticleTags: Array<ArticleTag>;
  /** An aggregated array relationship */
  ArticleTags_aggregate: ArticleTag_Aggregate;
  /** An array relationship */
  ArticleUsers: Array<ArticleUser>;
  /** An aggregated array relationship */
  ArticleUsers_aggregate: ArticleUser_Aggregate;
  articleID: Scalars['Int'];
  content: Scalars['String'];
  editDate: Scalars['timestamptz'];
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted: Scalars['Boolean'];
  publishDate: Scalars['timestamptz'];
  title: Scalars['String'];
};


/** columns and relationships of "Article" */
export type ArticleArticleTagsArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** columns and relationships of "Article" */
export type ArticleArticleTags_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** columns and relationships of "Article" */
export type ArticleArticleUsersArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** columns and relationships of "Article" */
export type ArticleArticleUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};

/** aggregated selection of "Article" */
export type Article_Aggregate = {
  __typename?: 'Article_aggregate';
  aggregate?: Maybe<Article_Aggregate_Fields>;
  nodes: Array<Article>;
};

/** aggregate fields of "Article" */
export type Article_Aggregate_Fields = {
  __typename?: 'Article_aggregate_fields';
  avg?: Maybe<Article_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Article_Max_Fields>;
  min?: Maybe<Article_Min_Fields>;
  stddev?: Maybe<Article_Stddev_Fields>;
  stddev_pop?: Maybe<Article_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Article_Stddev_Samp_Fields>;
  sum?: Maybe<Article_Sum_Fields>;
  var_pop?: Maybe<Article_Var_Pop_Fields>;
  var_samp?: Maybe<Article_Var_Samp_Fields>;
  variance?: Maybe<Article_Variance_Fields>;
};


/** aggregate fields of "Article" */
export type Article_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Article_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Article" */
export type Article_Aggregate_Order_By = {
  avg?: Maybe<Article_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Article_Max_Order_By>;
  min?: Maybe<Article_Min_Order_By>;
  stddev?: Maybe<Article_Stddev_Order_By>;
  stddev_pop?: Maybe<Article_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Article_Stddev_Samp_Order_By>;
  sum?: Maybe<Article_Sum_Order_By>;
  var_pop?: Maybe<Article_Var_Pop_Order_By>;
  var_samp?: Maybe<Article_Var_Samp_Order_By>;
  variance?: Maybe<Article_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Article" */
export type Article_Arr_Rel_Insert_Input = {
  data: Array<Article_Insert_Input>;
  on_conflict?: Maybe<Article_On_Conflict>;
};

/** aggregate avg on columns */
export type Article_Avg_Fields = {
  __typename?: 'Article_avg_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Article" */
export type Article_Avg_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Article". All fields are combined with a logical 'AND'. */
export type Article_Bool_Exp = {
  ArticleTags?: Maybe<ArticleTag_Bool_Exp>;
  ArticleUsers?: Maybe<ArticleUser_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Article_Bool_Exp>>>;
  _not?: Maybe<Article_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Article_Bool_Exp>>>;
  articleID?: Maybe<Int_Comparison_Exp>;
  content?: Maybe<String_Comparison_Exp>;
  editDate?: Maybe<Timestamptz_Comparison_Exp>;
  imageUrl?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  publishDate?: Maybe<Timestamptz_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Article" */
export enum Article_Constraint {
  /** unique or primary key constraint */
  ArticlePkey = 'Article_pkey'
}

/** input type for incrementing integer columne in table "Article" */
export type Article_Inc_Input = {
  articleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Article" */
export type Article_Insert_Input = {
  ArticleTags?: Maybe<ArticleTag_Arr_Rel_Insert_Input>;
  ArticleUsers?: Maybe<ArticleUser_Arr_Rel_Insert_Input>;
  articleID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  editDate?: Maybe<Scalars['timestamptz']>;
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  publishDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Article_Max_Fields = {
  __typename?: 'Article_max_fields';
  articleID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  editDate?: Maybe<Scalars['timestamptz']>;
  imageUrl?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Article" */
export type Article_Max_Order_By = {
  articleID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  editDate?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  publishDate?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Article_Min_Fields = {
  __typename?: 'Article_min_fields';
  articleID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  editDate?: Maybe<Scalars['timestamptz']>;
  imageUrl?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Article" */
export type Article_Min_Order_By = {
  articleID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  editDate?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  publishDate?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
};

/** response of any mutation on the table "Article" */
export type Article_Mutation_Response = {
  __typename?: 'Article_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Article>;
};

/** input type for inserting object relation for remote table "Article" */
export type Article_Obj_Rel_Insert_Input = {
  data: Article_Insert_Input;
  on_conflict?: Maybe<Article_On_Conflict>;
};

/** on conflict condition type for table "Article" */
export type Article_On_Conflict = {
  constraint: Article_Constraint;
  update_columns: Array<Article_Update_Column>;
  where?: Maybe<Article_Bool_Exp>;
};

/** ordering options when selecting data from "Article" */
export type Article_Order_By = {
  ArticleTags_aggregate?: Maybe<ArticleTag_Aggregate_Order_By>;
  ArticleUsers_aggregate?: Maybe<ArticleUser_Aggregate_Order_By>;
  articleID?: Maybe<Order_By>;
  content?: Maybe<Order_By>;
  editDate?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  publishDate?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
};

/** select columns of table "Article" */
export enum Article_Select_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  Content = 'content',
  /** column name */
  EditDate = 'editDate',
  /** column name */
  ImageUrl = 'imageUrl',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  PublishDate = 'publishDate',
  /** column name */
  Title = 'title'
}

/** input type for updating data in table "Article" */
export type Article_Set_Input = {
  articleID?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['String']>;
  editDate?: Maybe<Scalars['timestamptz']>;
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  publishDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Article_Stddev_Fields = {
  __typename?: 'Article_stddev_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Article" */
export type Article_Stddev_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Article_Stddev_Pop_Fields = {
  __typename?: 'Article_stddev_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Article" */
export type Article_Stddev_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Article_Stddev_Samp_Fields = {
  __typename?: 'Article_stddev_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Article" */
export type Article_Stddev_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Article_Sum_Fields = {
  __typename?: 'Article_sum_fields';
  articleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Article" */
export type Article_Sum_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** update columns of table "Article" */
export enum Article_Update_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  Content = 'content',
  /** column name */
  EditDate = 'editDate',
  /** column name */
  ImageUrl = 'imageUrl',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  PublishDate = 'publishDate',
  /** column name */
  Title = 'title'
}

/** aggregate var_pop on columns */
export type Article_Var_Pop_Fields = {
  __typename?: 'Article_var_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Article" */
export type Article_Var_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Article_Var_Samp_Fields = {
  __typename?: 'Article_var_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Article" */
export type Article_Var_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Article_Variance_Fields = {
  __typename?: 'Article_variance_fields';
  articleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Article" */
export type Article_Variance_Order_By = {
  articleID?: Maybe<Order_By>;
};

/** columns and relationships of "ArticleTag" */
export type ArticleTag = {
  __typename?: 'ArticleTag';
  /** An object relationship */
  Article: Article;
  /** An object relationship */
  Tag: Tag;
  articleID: Scalars['Int'];
  articleTagID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  tagID: Scalars['Int'];
};

/** aggregated selection of "ArticleTag" */
export type ArticleTag_Aggregate = {
  __typename?: 'ArticleTag_aggregate';
  aggregate?: Maybe<ArticleTag_Aggregate_Fields>;
  nodes: Array<ArticleTag>;
};

/** aggregate fields of "ArticleTag" */
export type ArticleTag_Aggregate_Fields = {
  __typename?: 'ArticleTag_aggregate_fields';
  avg?: Maybe<ArticleTag_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArticleTag_Max_Fields>;
  min?: Maybe<ArticleTag_Min_Fields>;
  stddev?: Maybe<ArticleTag_Stddev_Fields>;
  stddev_pop?: Maybe<ArticleTag_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArticleTag_Stddev_Samp_Fields>;
  sum?: Maybe<ArticleTag_Sum_Fields>;
  var_pop?: Maybe<ArticleTag_Var_Pop_Fields>;
  var_samp?: Maybe<ArticleTag_Var_Samp_Fields>;
  variance?: Maybe<ArticleTag_Variance_Fields>;
};


/** aggregate fields of "ArticleTag" */
export type ArticleTag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArticleTag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArticleTag" */
export type ArticleTag_Aggregate_Order_By = {
  avg?: Maybe<ArticleTag_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArticleTag_Max_Order_By>;
  min?: Maybe<ArticleTag_Min_Order_By>;
  stddev?: Maybe<ArticleTag_Stddev_Order_By>;
  stddev_pop?: Maybe<ArticleTag_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArticleTag_Stddev_Samp_Order_By>;
  sum?: Maybe<ArticleTag_Sum_Order_By>;
  var_pop?: Maybe<ArticleTag_Var_Pop_Order_By>;
  var_samp?: Maybe<ArticleTag_Var_Samp_Order_By>;
  variance?: Maybe<ArticleTag_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArticleTag" */
export type ArticleTag_Arr_Rel_Insert_Input = {
  data: Array<ArticleTag_Insert_Input>;
  on_conflict?: Maybe<ArticleTag_On_Conflict>;
};

/** aggregate avg on columns */
export type ArticleTag_Avg_Fields = {
  __typename?: 'ArticleTag_avg_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArticleTag" */
export type ArticleTag_Avg_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArticleTag". All fields are combined with a logical 'AND'. */
export type ArticleTag_Bool_Exp = {
  Article?: Maybe<Article_Bool_Exp>;
  Tag?: Maybe<Tag_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArticleTag_Bool_Exp>>>;
  _not?: Maybe<ArticleTag_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArticleTag_Bool_Exp>>>;
  articleID?: Maybe<Int_Comparison_Exp>;
  articleTagID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  tagID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArticleTag" */
export enum ArticleTag_Constraint {
  /** unique or primary key constraint */
  ArticleTagPkey = 'ArticleTag_pkey'
}

/** input type for incrementing integer columne in table "ArticleTag" */
export type ArticleTag_Inc_Input = {
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArticleTag" */
export type ArticleTag_Insert_Input = {
  Article?: Maybe<Article_Obj_Rel_Insert_Input>;
  Tag?: Maybe<Tag_Obj_Rel_Insert_Input>;
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type ArticleTag_Max_Fields = {
  __typename?: 'ArticleTag_max_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "ArticleTag" */
export type ArticleTag_Max_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleTag_Min_Fields = {
  __typename?: 'ArticleTag_min_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "ArticleTag" */
export type ArticleTag_Min_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArticleTag" */
export type ArticleTag_Mutation_Response = {
  __typename?: 'ArticleTag_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArticleTag>;
};

/** input type for inserting object relation for remote table "ArticleTag" */
export type ArticleTag_Obj_Rel_Insert_Input = {
  data: ArticleTag_Insert_Input;
  on_conflict?: Maybe<ArticleTag_On_Conflict>;
};

/** on conflict condition type for table "ArticleTag" */
export type ArticleTag_On_Conflict = {
  constraint: ArticleTag_Constraint;
  update_columns: Array<ArticleTag_Update_Column>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};

/** ordering options when selecting data from "ArticleTag" */
export type ArticleTag_Order_By = {
  Article?: Maybe<Article_Order_By>;
  Tag?: Maybe<Tag_Order_By>;
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** select columns of table "ArticleTag" */
export enum ArticleTag_Select_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  ArticleTagId = 'articleTagID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  TagId = 'tagID'
}

/** input type for updating data in table "ArticleTag" */
export type ArticleTag_Set_Input = {
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type ArticleTag_Stddev_Fields = {
  __typename?: 'ArticleTag_stddev_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArticleTag" */
export type ArticleTag_Stddev_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArticleTag_Stddev_Pop_Fields = {
  __typename?: 'ArticleTag_stddev_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArticleTag" */
export type ArticleTag_Stddev_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArticleTag_Stddev_Samp_Fields = {
  __typename?: 'ArticleTag_stddev_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArticleTag" */
export type ArticleTag_Stddev_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArticleTag_Sum_Fields = {
  __typename?: 'ArticleTag_sum_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleTagID?: Maybe<Scalars['Int']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArticleTag" */
export type ArticleTag_Sum_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** update columns of table "ArticleTag" */
export enum ArticleTag_Update_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  ArticleTagId = 'articleTagID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  TagId = 'tagID'
}

/** aggregate var_pop on columns */
export type ArticleTag_Var_Pop_Fields = {
  __typename?: 'ArticleTag_var_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArticleTag" */
export type ArticleTag_Var_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArticleTag_Var_Samp_Fields = {
  __typename?: 'ArticleTag_var_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArticleTag" */
export type ArticleTag_Var_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArticleTag_Variance_Fields = {
  __typename?: 'ArticleTag_variance_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleTagID?: Maybe<Scalars['Float']>;
  tagID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArticleTag" */
export type ArticleTag_Variance_Order_By = {
  articleID?: Maybe<Order_By>;
  articleTagID?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** columns and relationships of "ArticleUser" */
export type ArticleUser = {
  __typename?: 'ArticleUser';
  /** An object relationship */
  Article: Article;
  /** An object relationship */
  User: User;
  articleID: Scalars['Int'];
  articleUserID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  userID: Scalars['Int'];
};

/** aggregated selection of "ArticleUser" */
export type ArticleUser_Aggregate = {
  __typename?: 'ArticleUser_aggregate';
  aggregate?: Maybe<ArticleUser_Aggregate_Fields>;
  nodes: Array<ArticleUser>;
};

/** aggregate fields of "ArticleUser" */
export type ArticleUser_Aggregate_Fields = {
  __typename?: 'ArticleUser_aggregate_fields';
  avg?: Maybe<ArticleUser_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<ArticleUser_Max_Fields>;
  min?: Maybe<ArticleUser_Min_Fields>;
  stddev?: Maybe<ArticleUser_Stddev_Fields>;
  stddev_pop?: Maybe<ArticleUser_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ArticleUser_Stddev_Samp_Fields>;
  sum?: Maybe<ArticleUser_Sum_Fields>;
  var_pop?: Maybe<ArticleUser_Var_Pop_Fields>;
  var_samp?: Maybe<ArticleUser_Var_Samp_Fields>;
  variance?: Maybe<ArticleUser_Variance_Fields>;
};


/** aggregate fields of "ArticleUser" */
export type ArticleUser_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ArticleUser_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ArticleUser" */
export type ArticleUser_Aggregate_Order_By = {
  avg?: Maybe<ArticleUser_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ArticleUser_Max_Order_By>;
  min?: Maybe<ArticleUser_Min_Order_By>;
  stddev?: Maybe<ArticleUser_Stddev_Order_By>;
  stddev_pop?: Maybe<ArticleUser_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ArticleUser_Stddev_Samp_Order_By>;
  sum?: Maybe<ArticleUser_Sum_Order_By>;
  var_pop?: Maybe<ArticleUser_Var_Pop_Order_By>;
  var_samp?: Maybe<ArticleUser_Var_Samp_Order_By>;
  variance?: Maybe<ArticleUser_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "ArticleUser" */
export type ArticleUser_Arr_Rel_Insert_Input = {
  data: Array<ArticleUser_Insert_Input>;
  on_conflict?: Maybe<ArticleUser_On_Conflict>;
};

/** aggregate avg on columns */
export type ArticleUser_Avg_Fields = {
  __typename?: 'ArticleUser_avg_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "ArticleUser" */
export type ArticleUser_Avg_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "ArticleUser". All fields are combined with a logical 'AND'. */
export type ArticleUser_Bool_Exp = {
  Article?: Maybe<Article_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<ArticleUser_Bool_Exp>>>;
  _not?: Maybe<ArticleUser_Bool_Exp>;
  _or?: Maybe<Array<Maybe<ArticleUser_Bool_Exp>>>;
  articleID?: Maybe<Int_Comparison_Exp>;
  articleUserID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "ArticleUser" */
export enum ArticleUser_Constraint {
  /** unique or primary key constraint */
  ArticleUserPkey = 'ArticleUser_pkey'
}

/** input type for incrementing integer columne in table "ArticleUser" */
export type ArticleUser_Inc_Input = {
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "ArticleUser" */
export type ArticleUser_Insert_Input = {
  Article?: Maybe<Article_Obj_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type ArticleUser_Max_Fields = {
  __typename?: 'ArticleUser_max_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "ArticleUser" */
export type ArticleUser_Max_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleUser_Min_Fields = {
  __typename?: 'ArticleUser_min_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "ArticleUser" */
export type ArticleUser_Min_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "ArticleUser" */
export type ArticleUser_Mutation_Response = {
  __typename?: 'ArticleUser_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<ArticleUser>;
};

/** input type for inserting object relation for remote table "ArticleUser" */
export type ArticleUser_Obj_Rel_Insert_Input = {
  data: ArticleUser_Insert_Input;
  on_conflict?: Maybe<ArticleUser_On_Conflict>;
};

/** on conflict condition type for table "ArticleUser" */
export type ArticleUser_On_Conflict = {
  constraint: ArticleUser_Constraint;
  update_columns: Array<ArticleUser_Update_Column>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};

/** ordering options when selecting data from "ArticleUser" */
export type ArticleUser_Order_By = {
  Article?: Maybe<Article_Order_By>;
  User?: Maybe<User_Order_By>;
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "ArticleUser" */
export enum ArticleUser_Select_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  ArticleUserId = 'articleUserID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "ArticleUser" */
export type ArticleUser_Set_Input = {
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type ArticleUser_Stddev_Fields = {
  __typename?: 'ArticleUser_stddev_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "ArticleUser" */
export type ArticleUser_Stddev_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ArticleUser_Stddev_Pop_Fields = {
  __typename?: 'ArticleUser_stddev_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "ArticleUser" */
export type ArticleUser_Stddev_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ArticleUser_Stddev_Samp_Fields = {
  __typename?: 'ArticleUser_stddev_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "ArticleUser" */
export type ArticleUser_Stddev_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ArticleUser_Sum_Fields = {
  __typename?: 'ArticleUser_sum_fields';
  articleID?: Maybe<Scalars['Int']>;
  articleUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "ArticleUser" */
export type ArticleUser_Sum_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "ArticleUser" */
export enum ArticleUser_Update_Column {
  /** column name */
  ArticleId = 'articleID',
  /** column name */
  ArticleUserId = 'articleUserID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type ArticleUser_Var_Pop_Fields = {
  __typename?: 'ArticleUser_var_pop_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "ArticleUser" */
export type ArticleUser_Var_Pop_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ArticleUser_Var_Samp_Fields = {
  __typename?: 'ArticleUser_var_samp_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "ArticleUser" */
export type ArticleUser_Var_Samp_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ArticleUser_Variance_Fields = {
  __typename?: 'ArticleUser_variance_fields';
  articleID?: Maybe<Scalars['Float']>;
  articleUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "ArticleUser" */
export type ArticleUser_Variance_Order_By = {
  articleID?: Maybe<Order_By>;
  articleUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** columns and relationships of "City" */
export type City = {
  __typename?: 'City';
  /** An array relationship */
  Addresses: Array<Address>;
  /** An aggregated array relationship */
  Addresses_aggregate: Address_Aggregate;
  /** An object relationship */
  Country: Country;
  /** An array relationship */
  Districts: Array<District>;
  /** An aggregated array relationship */
  Districts_aggregate: District_Aggregate;
  /** An object relationship */
  Location?: Maybe<Location>;
  /** An object relationship */
  Region?: Maybe<Region>;
  city: Scalars['String'];
  cityID: Scalars['Int'];
  countryID: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted: Scalars['Boolean'];
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "City" */
export type CityAddressesArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** columns and relationships of "City" */
export type CityAddresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** columns and relationships of "City" */
export type CityDistrictsArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};


/** columns and relationships of "City" */
export type CityDistricts_AggregateArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};

/** aggregated selection of "City" */
export type City_Aggregate = {
  __typename?: 'City_aggregate';
  aggregate?: Maybe<City_Aggregate_Fields>;
  nodes: Array<City>;
};

/** aggregate fields of "City" */
export type City_Aggregate_Fields = {
  __typename?: 'City_aggregate_fields';
  avg?: Maybe<City_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<City_Max_Fields>;
  min?: Maybe<City_Min_Fields>;
  stddev?: Maybe<City_Stddev_Fields>;
  stddev_pop?: Maybe<City_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<City_Stddev_Samp_Fields>;
  sum?: Maybe<City_Sum_Fields>;
  var_pop?: Maybe<City_Var_Pop_Fields>;
  var_samp?: Maybe<City_Var_Samp_Fields>;
  variance?: Maybe<City_Variance_Fields>;
};


/** aggregate fields of "City" */
export type City_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<City_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "City" */
export type City_Aggregate_Order_By = {
  avg?: Maybe<City_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<City_Max_Order_By>;
  min?: Maybe<City_Min_Order_By>;
  stddev?: Maybe<City_Stddev_Order_By>;
  stddev_pop?: Maybe<City_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<City_Stddev_Samp_Order_By>;
  sum?: Maybe<City_Sum_Order_By>;
  var_pop?: Maybe<City_Var_Pop_Order_By>;
  var_samp?: Maybe<City_Var_Samp_Order_By>;
  variance?: Maybe<City_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "City" */
export type City_Arr_Rel_Insert_Input = {
  data: Array<City_Insert_Input>;
  on_conflict?: Maybe<City_On_Conflict>;
};

/** aggregate avg on columns */
export type City_Avg_Fields = {
  __typename?: 'City_avg_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "City" */
export type City_Avg_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "City". All fields are combined with a logical 'AND'. */
export type City_Bool_Exp = {
  Addresses?: Maybe<Address_Bool_Exp>;
  Country?: Maybe<Country_Bool_Exp>;
  Districts?: Maybe<District_Bool_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  Region?: Maybe<Region_Bool_Exp>;
  _and?: Maybe<Array<Maybe<City_Bool_Exp>>>;
  _not?: Maybe<City_Bool_Exp>;
  _or?: Maybe<Array<Maybe<City_Bool_Exp>>>;
  city?: Maybe<String_Comparison_Exp>;
  cityID?: Maybe<Int_Comparison_Exp>;
  countryID?: Maybe<Int_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  imageUrl?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  regionID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "City" */
export enum City_Constraint {
  /** unique or primary key constraint */
  CityPkey = 'City_pkey'
}

/** input type for incrementing integer columne in table "City" */
export type City_Inc_Input = {
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "City" */
export type City_Insert_Input = {
  Addresses?: Maybe<Address_Arr_Rel_Insert_Input>;
  Country?: Maybe<Country_Obj_Rel_Insert_Input>;
  Districts?: Maybe<District_Arr_Rel_Insert_Input>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  Region?: Maybe<Region_Obj_Rel_Insert_Input>;
  city?: Maybe<Scalars['String']>;
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type City_Max_Fields = {
  __typename?: 'City_max_fields';
  city?: Maybe<Scalars['String']>;
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "City" */
export type City_Max_Order_By = {
  city?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type City_Min_Fields = {
  __typename?: 'City_min_fields';
  city?: Maybe<Scalars['String']>;
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "City" */
export type City_Min_Order_By = {
  city?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** response of any mutation on the table "City" */
export type City_Mutation_Response = {
  __typename?: 'City_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<City>;
};

/** input type for inserting object relation for remote table "City" */
export type City_Obj_Rel_Insert_Input = {
  data: City_Insert_Input;
  on_conflict?: Maybe<City_On_Conflict>;
};

/** on conflict condition type for table "City" */
export type City_On_Conflict = {
  constraint: City_Constraint;
  update_columns: Array<City_Update_Column>;
  where?: Maybe<City_Bool_Exp>;
};

/** ordering options when selecting data from "City" */
export type City_Order_By = {
  Addresses_aggregate?: Maybe<Address_Aggregate_Order_By>;
  Country?: Maybe<Country_Order_By>;
  Districts_aggregate?: Maybe<District_Aggregate_Order_By>;
  Location?: Maybe<Location_Order_By>;
  Region?: Maybe<Region_Order_By>;
  city?: Maybe<Order_By>;
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  imageUrl?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** select columns of table "City" */
export enum City_Select_Column {
  /** column name */
  City = 'city',
  /** column name */
  CityId = 'cityID',
  /** column name */
  CountryId = 'countryID',
  /** column name */
  Description = 'description',
  /** column name */
  ImageUrl = 'imageUrl',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  RegionId = 'regionID'
}

/** input type for updating data in table "City" */
export type City_Set_Input = {
  city?: Maybe<Scalars['String']>;
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type City_Stddev_Fields = {
  __typename?: 'City_stddev_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "City" */
export type City_Stddev_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type City_Stddev_Pop_Fields = {
  __typename?: 'City_stddev_pop_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "City" */
export type City_Stddev_Pop_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type City_Stddev_Samp_Fields = {
  __typename?: 'City_stddev_samp_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "City" */
export type City_Stddev_Samp_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type City_Sum_Fields = {
  __typename?: 'City_sum_fields';
  cityID?: Maybe<Scalars['Int']>;
  countryID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "City" */
export type City_Sum_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** update columns of table "City" */
export enum City_Update_Column {
  /** column name */
  City = 'city',
  /** column name */
  CityId = 'cityID',
  /** column name */
  CountryId = 'countryID',
  /** column name */
  Description = 'description',
  /** column name */
  ImageUrl = 'imageUrl',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  RegionId = 'regionID'
}

/** aggregate var_pop on columns */
export type City_Var_Pop_Fields = {
  __typename?: 'City_var_pop_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "City" */
export type City_Var_Pop_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type City_Var_Samp_Fields = {
  __typename?: 'City_var_samp_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "City" */
export type City_Var_Samp_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type City_Variance_Fields = {
  __typename?: 'City_variance_fields';
  cityID?: Maybe<Scalars['Float']>;
  countryID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  regionID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "City" */
export type City_Variance_Order_By = {
  cityID?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** columns and relationships of "Company" */
export type Company = {
  __typename?: 'Company';
  /** An array relationship */
  ArchSites: Array<ArchSite>;
  /** An aggregated array relationship */
  ArchSites_aggregate: ArchSite_Aggregate;
  /** An array relationship */
  CompanyPhones: Array<CompanyPhone>;
  /** An aggregated array relationship */
  CompanyPhones_aggregate: CompanyPhone_Aggregate;
  /** An array relationship */
  CompanyUsers: Array<CompanyUser>;
  /** An aggregated array relationship */
  CompanyUsers_aggregate: CompanyUser_Aggregate;
  /** An array relationship */
  Hotels: Array<Hotel>;
  /** An aggregated array relationship */
  Hotels_aggregate: Hotel_Aggregate;
  /** An object relationship */
  Location: Location;
  /** An array relationship */
  Museums: Array<Museum>;
  /** An aggregated array relationship */
  Museums_aggregate: Museum_Aggregate;
  /** An array relationship */
  Restaurants: Array<Restaurant>;
  /** An aggregated array relationship */
  Restaurants_aggregate: Restaurant_Aggregate;
  companyID: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  logoUrl?: Maybe<Scalars['String']>;
  mail: Scalars['String'];
  name: Scalars['String'];
  registerDate: Scalars['timestamptz'];
  taxNumber: Scalars['String'];
};


/** columns and relationships of "Company" */
export type CompanyArchSitesArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyCompanyPhonesArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyCompanyPhones_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyCompanyUsersArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyCompanyUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyHotelsArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyHotels_AggregateArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyMuseumsArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyRestaurantsArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** columns and relationships of "Company" */
export type CompanyRestaurants_AggregateArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};

/** aggregated selection of "Company" */
export type Company_Aggregate = {
  __typename?: 'Company_aggregate';
  aggregate?: Maybe<Company_Aggregate_Fields>;
  nodes: Array<Company>;
};

/** aggregate fields of "Company" */
export type Company_Aggregate_Fields = {
  __typename?: 'Company_aggregate_fields';
  avg?: Maybe<Company_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Company_Max_Fields>;
  min?: Maybe<Company_Min_Fields>;
  stddev?: Maybe<Company_Stddev_Fields>;
  stddev_pop?: Maybe<Company_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Company_Stddev_Samp_Fields>;
  sum?: Maybe<Company_Sum_Fields>;
  var_pop?: Maybe<Company_Var_Pop_Fields>;
  var_samp?: Maybe<Company_Var_Samp_Fields>;
  variance?: Maybe<Company_Variance_Fields>;
};


/** aggregate fields of "Company" */
export type Company_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Company_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Company" */
export type Company_Aggregate_Order_By = {
  avg?: Maybe<Company_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Company_Max_Order_By>;
  min?: Maybe<Company_Min_Order_By>;
  stddev?: Maybe<Company_Stddev_Order_By>;
  stddev_pop?: Maybe<Company_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Company_Stddev_Samp_Order_By>;
  sum?: Maybe<Company_Sum_Order_By>;
  var_pop?: Maybe<Company_Var_Pop_Order_By>;
  var_samp?: Maybe<Company_Var_Samp_Order_By>;
  variance?: Maybe<Company_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Company" */
export type Company_Arr_Rel_Insert_Input = {
  data: Array<Company_Insert_Input>;
  on_conflict?: Maybe<Company_On_Conflict>;
};

/** aggregate avg on columns */
export type Company_Avg_Fields = {
  __typename?: 'Company_avg_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Company" */
export type Company_Avg_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Company". All fields are combined with a logical 'AND'. */
export type Company_Bool_Exp = {
  ArchSites?: Maybe<ArchSite_Bool_Exp>;
  CompanyPhones?: Maybe<CompanyPhone_Bool_Exp>;
  CompanyUsers?: Maybe<CompanyUser_Bool_Exp>;
  Hotels?: Maybe<Hotel_Bool_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  Museums?: Maybe<Museum_Bool_Exp>;
  Restaurants?: Maybe<Restaurant_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Company_Bool_Exp>>>;
  _not?: Maybe<Company_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Company_Bool_Exp>>>;
  companyID?: Maybe<Int_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  faxNumber?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  logoUrl?: Maybe<String_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  registerDate?: Maybe<Timestamptz_Comparison_Exp>;
  taxNumber?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Company" */
export enum Company_Constraint {
  /** unique or primary key constraint */
  CompanyMailKey = 'Company_mail_key',
  /** unique or primary key constraint */
  CompanyPkey = 'Company_pkey'
}

/** input type for incrementing integer columne in table "Company" */
export type Company_Inc_Input = {
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Company" */
export type Company_Insert_Input = {
  ArchSites?: Maybe<ArchSite_Arr_Rel_Insert_Input>;
  CompanyPhones?: Maybe<CompanyPhone_Arr_Rel_Insert_Input>;
  CompanyUsers?: Maybe<CompanyUser_Arr_Rel_Insert_Input>;
  Hotels?: Maybe<Hotel_Arr_Rel_Insert_Input>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  Museums?: Maybe<Museum_Arr_Rel_Insert_Input>;
  Restaurants?: Maybe<Restaurant_Arr_Rel_Insert_Input>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  logoUrl?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Company_Max_Fields = {
  __typename?: 'Company_max_fields';
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  logoUrl?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Company" */
export type Company_Max_Order_By = {
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  faxNumber?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  logoUrl?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Company_Min_Fields = {
  __typename?: 'Company_min_fields';
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  logoUrl?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Company" */
export type Company_Min_Order_By = {
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  faxNumber?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  logoUrl?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** response of any mutation on the table "Company" */
export type Company_Mutation_Response = {
  __typename?: 'Company_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Company>;
};

/** input type for inserting object relation for remote table "Company" */
export type Company_Obj_Rel_Insert_Input = {
  data: Company_Insert_Input;
  on_conflict?: Maybe<Company_On_Conflict>;
};

/** on conflict condition type for table "Company" */
export type Company_On_Conflict = {
  constraint: Company_Constraint;
  update_columns: Array<Company_Update_Column>;
  where?: Maybe<Company_Bool_Exp>;
};

/** ordering options when selecting data from "Company" */
export type Company_Order_By = {
  ArchSites_aggregate?: Maybe<ArchSite_Aggregate_Order_By>;
  CompanyPhones_aggregate?: Maybe<CompanyPhone_Aggregate_Order_By>;
  CompanyUsers_aggregate?: Maybe<CompanyUser_Aggregate_Order_By>;
  Hotels_aggregate?: Maybe<Hotel_Aggregate_Order_By>;
  Location?: Maybe<Location_Order_By>;
  Museums_aggregate?: Maybe<Museum_Aggregate_Order_By>;
  Restaurants_aggregate?: Maybe<Restaurant_Aggregate_Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  faxNumber?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  logoUrl?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** select columns of table "Company" */
export enum Company_Select_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  FaxNumber = 'faxNumber',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  LogoUrl = 'logoUrl',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  RegisterDate = 'registerDate',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** input type for updating data in table "Company" */
export type Company_Set_Input = {
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  logoUrl?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Company_Stddev_Fields = {
  __typename?: 'Company_stddev_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Company" */
export type Company_Stddev_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Company_Stddev_Pop_Fields = {
  __typename?: 'Company_stddev_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Company" */
export type Company_Stddev_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Company_Stddev_Samp_Fields = {
  __typename?: 'Company_stddev_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Company" */
export type Company_Stddev_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Company_Sum_Fields = {
  __typename?: 'Company_sum_fields';
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Company" */
export type Company_Sum_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** update columns of table "Company" */
export enum Company_Update_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  FaxNumber = 'faxNumber',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  LogoUrl = 'logoUrl',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  RegisterDate = 'registerDate',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** aggregate var_pop on columns */
export type Company_Var_Pop_Fields = {
  __typename?: 'Company_var_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Company" */
export type Company_Var_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Company_Var_Samp_Fields = {
  __typename?: 'Company_var_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Company" */
export type Company_Var_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Company_Variance_Fields = {
  __typename?: 'Company_variance_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Company" */
export type Company_Variance_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
};

/** columns and relationships of "CompanyContact" */
export type CompanyContact = {
  __typename?: 'CompanyContact';
  /** An object relationship */
  CompanyUser: CompanyUser;
  authority: Scalars['String'];
  compantUserID: Scalars['Int'];
  companyContactID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};

/** aggregated selection of "CompanyContact" */
export type CompanyContact_Aggregate = {
  __typename?: 'CompanyContact_aggregate';
  aggregate?: Maybe<CompanyContact_Aggregate_Fields>;
  nodes: Array<CompanyContact>;
};

/** aggregate fields of "CompanyContact" */
export type CompanyContact_Aggregate_Fields = {
  __typename?: 'CompanyContact_aggregate_fields';
  avg?: Maybe<CompanyContact_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<CompanyContact_Max_Fields>;
  min?: Maybe<CompanyContact_Min_Fields>;
  stddev?: Maybe<CompanyContact_Stddev_Fields>;
  stddev_pop?: Maybe<CompanyContact_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CompanyContact_Stddev_Samp_Fields>;
  sum?: Maybe<CompanyContact_Sum_Fields>;
  var_pop?: Maybe<CompanyContact_Var_Pop_Fields>;
  var_samp?: Maybe<CompanyContact_Var_Samp_Fields>;
  variance?: Maybe<CompanyContact_Variance_Fields>;
};


/** aggregate fields of "CompanyContact" */
export type CompanyContact_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<CompanyContact_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "CompanyContact" */
export type CompanyContact_Aggregate_Order_By = {
  avg?: Maybe<CompanyContact_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<CompanyContact_Max_Order_By>;
  min?: Maybe<CompanyContact_Min_Order_By>;
  stddev?: Maybe<CompanyContact_Stddev_Order_By>;
  stddev_pop?: Maybe<CompanyContact_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<CompanyContact_Stddev_Samp_Order_By>;
  sum?: Maybe<CompanyContact_Sum_Order_By>;
  var_pop?: Maybe<CompanyContact_Var_Pop_Order_By>;
  var_samp?: Maybe<CompanyContact_Var_Samp_Order_By>;
  variance?: Maybe<CompanyContact_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CompanyContact" */
export type CompanyContact_Arr_Rel_Insert_Input = {
  data: Array<CompanyContact_Insert_Input>;
  on_conflict?: Maybe<CompanyContact_On_Conflict>;
};

/** aggregate avg on columns */
export type CompanyContact_Avg_Fields = {
  __typename?: 'CompanyContact_avg_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "CompanyContact" */
export type CompanyContact_Avg_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CompanyContact". All fields are combined with a logical 'AND'. */
export type CompanyContact_Bool_Exp = {
  CompanyUser?: Maybe<CompanyUser_Bool_Exp>;
  _and?: Maybe<Array<Maybe<CompanyContact_Bool_Exp>>>;
  _not?: Maybe<CompanyContact_Bool_Exp>;
  _or?: Maybe<Array<Maybe<CompanyContact_Bool_Exp>>>;
  authority?: Maybe<String_Comparison_Exp>;
  compantUserID?: Maybe<Int_Comparison_Exp>;
  companyContactID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "CompanyContact" */
export enum CompanyContact_Constraint {
  /** unique or primary key constraint */
  CompanyContactPkey = 'CompanyContact_pkey'
}

/** input type for incrementing integer columne in table "CompanyContact" */
export type CompanyContact_Inc_Input = {
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "CompanyContact" */
export type CompanyContact_Insert_Input = {
  CompanyUser?: Maybe<CompanyUser_Obj_Rel_Insert_Input>;
  authority?: Maybe<Scalars['String']>;
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type CompanyContact_Max_Fields = {
  __typename?: 'CompanyContact_max_fields';
  authority?: Maybe<Scalars['String']>;
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "CompanyContact" */
export type CompanyContact_Max_Order_By = {
  authority?: Maybe<Order_By>;
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type CompanyContact_Min_Fields = {
  __typename?: 'CompanyContact_min_fields';
  authority?: Maybe<Scalars['String']>;
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "CompanyContact" */
export type CompanyContact_Min_Order_By = {
  authority?: Maybe<Order_By>;
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** response of any mutation on the table "CompanyContact" */
export type CompanyContact_Mutation_Response = {
  __typename?: 'CompanyContact_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<CompanyContact>;
};

/** input type for inserting object relation for remote table "CompanyContact" */
export type CompanyContact_Obj_Rel_Insert_Input = {
  data: CompanyContact_Insert_Input;
  on_conflict?: Maybe<CompanyContact_On_Conflict>;
};

/** on conflict condition type for table "CompanyContact" */
export type CompanyContact_On_Conflict = {
  constraint: CompanyContact_Constraint;
  update_columns: Array<CompanyContact_Update_Column>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};

/** ordering options when selecting data from "CompanyContact" */
export type CompanyContact_Order_By = {
  CompanyUser?: Maybe<CompanyUser_Order_By>;
  authority?: Maybe<Order_By>;
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "CompanyContact" */
export enum CompanyContact_Select_Column {
  /** column name */
  Authority = 'authority',
  /** column name */
  CompantUserId = 'compantUserID',
  /** column name */
  CompanyContactId = 'companyContactID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "CompanyContact" */
export type CompanyContact_Set_Input = {
  authority?: Maybe<Scalars['String']>;
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type CompanyContact_Stddev_Fields = {
  __typename?: 'CompanyContact_stddev_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "CompanyContact" */
export type CompanyContact_Stddev_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CompanyContact_Stddev_Pop_Fields = {
  __typename?: 'CompanyContact_stddev_pop_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "CompanyContact" */
export type CompanyContact_Stddev_Pop_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CompanyContact_Stddev_Samp_Fields = {
  __typename?: 'CompanyContact_stddev_samp_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "CompanyContact" */
export type CompanyContact_Stddev_Samp_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type CompanyContact_Sum_Fields = {
  __typename?: 'CompanyContact_sum_fields';
  compantUserID?: Maybe<Scalars['Int']>;
  companyContactID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "CompanyContact" */
export type CompanyContact_Sum_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** update columns of table "CompanyContact" */
export enum CompanyContact_Update_Column {
  /** column name */
  Authority = 'authority',
  /** column name */
  CompantUserId = 'compantUserID',
  /** column name */
  CompanyContactId = 'companyContactID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type CompanyContact_Var_Pop_Fields = {
  __typename?: 'CompanyContact_var_pop_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "CompanyContact" */
export type CompanyContact_Var_Pop_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CompanyContact_Var_Samp_Fields = {
  __typename?: 'CompanyContact_var_samp_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "CompanyContact" */
export type CompanyContact_Var_Samp_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type CompanyContact_Variance_Fields = {
  __typename?: 'CompanyContact_variance_fields';
  compantUserID?: Maybe<Scalars['Float']>;
  companyContactID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "CompanyContact" */
export type CompanyContact_Variance_Order_By = {
  compantUserID?: Maybe<Order_By>;
  companyContactID?: Maybe<Order_By>;
};

/** columns and relationships of "CompanyPhone" */
export type CompanyPhone = {
  __typename?: 'CompanyPhone';
  /** An object relationship */
  Company: Company;
  /** An object relationship */
  Phone: Phone;
  companyID: Scalars['Int'];
  companyPhoneID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  phoneID: Scalars['Int'];
};

/** aggregated selection of "CompanyPhone" */
export type CompanyPhone_Aggregate = {
  __typename?: 'CompanyPhone_aggregate';
  aggregate?: Maybe<CompanyPhone_Aggregate_Fields>;
  nodes: Array<CompanyPhone>;
};

/** aggregate fields of "CompanyPhone" */
export type CompanyPhone_Aggregate_Fields = {
  __typename?: 'CompanyPhone_aggregate_fields';
  avg?: Maybe<CompanyPhone_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<CompanyPhone_Max_Fields>;
  min?: Maybe<CompanyPhone_Min_Fields>;
  stddev?: Maybe<CompanyPhone_Stddev_Fields>;
  stddev_pop?: Maybe<CompanyPhone_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CompanyPhone_Stddev_Samp_Fields>;
  sum?: Maybe<CompanyPhone_Sum_Fields>;
  var_pop?: Maybe<CompanyPhone_Var_Pop_Fields>;
  var_samp?: Maybe<CompanyPhone_Var_Samp_Fields>;
  variance?: Maybe<CompanyPhone_Variance_Fields>;
};


/** aggregate fields of "CompanyPhone" */
export type CompanyPhone_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<CompanyPhone_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "CompanyPhone" */
export type CompanyPhone_Aggregate_Order_By = {
  avg?: Maybe<CompanyPhone_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<CompanyPhone_Max_Order_By>;
  min?: Maybe<CompanyPhone_Min_Order_By>;
  stddev?: Maybe<CompanyPhone_Stddev_Order_By>;
  stddev_pop?: Maybe<CompanyPhone_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<CompanyPhone_Stddev_Samp_Order_By>;
  sum?: Maybe<CompanyPhone_Sum_Order_By>;
  var_pop?: Maybe<CompanyPhone_Var_Pop_Order_By>;
  var_samp?: Maybe<CompanyPhone_Var_Samp_Order_By>;
  variance?: Maybe<CompanyPhone_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CompanyPhone" */
export type CompanyPhone_Arr_Rel_Insert_Input = {
  data: Array<CompanyPhone_Insert_Input>;
  on_conflict?: Maybe<CompanyPhone_On_Conflict>;
};

/** aggregate avg on columns */
export type CompanyPhone_Avg_Fields = {
  __typename?: 'CompanyPhone_avg_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "CompanyPhone" */
export type CompanyPhone_Avg_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CompanyPhone". All fields are combined with a logical 'AND'. */
export type CompanyPhone_Bool_Exp = {
  Company?: Maybe<Company_Bool_Exp>;
  Phone?: Maybe<Phone_Bool_Exp>;
  _and?: Maybe<Array<Maybe<CompanyPhone_Bool_Exp>>>;
  _not?: Maybe<CompanyPhone_Bool_Exp>;
  _or?: Maybe<Array<Maybe<CompanyPhone_Bool_Exp>>>;
  companyID?: Maybe<Int_Comparison_Exp>;
  companyPhoneID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  phoneID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "CompanyPhone" */
export enum CompanyPhone_Constraint {
  /** unique or primary key constraint */
  CompanyPhonePkey = 'CompanyPhone_pkey'
}

/** input type for incrementing integer columne in table "CompanyPhone" */
export type CompanyPhone_Inc_Input = {
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "CompanyPhone" */
export type CompanyPhone_Insert_Input = {
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  Phone?: Maybe<Phone_Obj_Rel_Insert_Input>;
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type CompanyPhone_Max_Fields = {
  __typename?: 'CompanyPhone_max_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "CompanyPhone" */
export type CompanyPhone_Max_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type CompanyPhone_Min_Fields = {
  __typename?: 'CompanyPhone_min_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "CompanyPhone" */
export type CompanyPhone_Min_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** response of any mutation on the table "CompanyPhone" */
export type CompanyPhone_Mutation_Response = {
  __typename?: 'CompanyPhone_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<CompanyPhone>;
};

/** input type for inserting object relation for remote table "CompanyPhone" */
export type CompanyPhone_Obj_Rel_Insert_Input = {
  data: CompanyPhone_Insert_Input;
  on_conflict?: Maybe<CompanyPhone_On_Conflict>;
};

/** on conflict condition type for table "CompanyPhone" */
export type CompanyPhone_On_Conflict = {
  constraint: CompanyPhone_Constraint;
  update_columns: Array<CompanyPhone_Update_Column>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};

/** ordering options when selecting data from "CompanyPhone" */
export type CompanyPhone_Order_By = {
  Company?: Maybe<Company_Order_By>;
  Phone?: Maybe<Phone_Order_By>;
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** select columns of table "CompanyPhone" */
export enum CompanyPhone_Select_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  CompanyPhoneId = 'companyPhoneID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  PhoneId = 'phoneID'
}

/** input type for updating data in table "CompanyPhone" */
export type CompanyPhone_Set_Input = {
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type CompanyPhone_Stddev_Fields = {
  __typename?: 'CompanyPhone_stddev_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "CompanyPhone" */
export type CompanyPhone_Stddev_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CompanyPhone_Stddev_Pop_Fields = {
  __typename?: 'CompanyPhone_stddev_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "CompanyPhone" */
export type CompanyPhone_Stddev_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CompanyPhone_Stddev_Samp_Fields = {
  __typename?: 'CompanyPhone_stddev_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "CompanyPhone" */
export type CompanyPhone_Stddev_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type CompanyPhone_Sum_Fields = {
  __typename?: 'CompanyPhone_sum_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyPhoneID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "CompanyPhone" */
export type CompanyPhone_Sum_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** update columns of table "CompanyPhone" */
export enum CompanyPhone_Update_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  CompanyPhoneId = 'companyPhoneID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  PhoneId = 'phoneID'
}

/** aggregate var_pop on columns */
export type CompanyPhone_Var_Pop_Fields = {
  __typename?: 'CompanyPhone_var_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "CompanyPhone" */
export type CompanyPhone_Var_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CompanyPhone_Var_Samp_Fields = {
  __typename?: 'CompanyPhone_var_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "CompanyPhone" */
export type CompanyPhone_Var_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type CompanyPhone_Variance_Fields = {
  __typename?: 'CompanyPhone_variance_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyPhoneID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "CompanyPhone" */
export type CompanyPhone_Variance_Order_By = {
  companyID?: Maybe<Order_By>;
  companyPhoneID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** columns and relationships of "CompanyUser" */
export type CompanyUser = {
  __typename?: 'CompanyUser';
  /** An object relationship */
  Company: Company;
  /** An array relationship */
  CompanyContacts: Array<CompanyContact>;
  /** An aggregated array relationship */
  CompanyContacts_aggregate: CompanyContact_Aggregate;
  /** An object relationship */
  User: User;
  companyID: Scalars['Int'];
  companyUserID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  userID: Scalars['Int'];
};


/** columns and relationships of "CompanyUser" */
export type CompanyUserCompanyContactsArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};


/** columns and relationships of "CompanyUser" */
export type CompanyUserCompanyContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};

/** aggregated selection of "CompanyUser" */
export type CompanyUser_Aggregate = {
  __typename?: 'CompanyUser_aggregate';
  aggregate?: Maybe<CompanyUser_Aggregate_Fields>;
  nodes: Array<CompanyUser>;
};

/** aggregate fields of "CompanyUser" */
export type CompanyUser_Aggregate_Fields = {
  __typename?: 'CompanyUser_aggregate_fields';
  avg?: Maybe<CompanyUser_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<CompanyUser_Max_Fields>;
  min?: Maybe<CompanyUser_Min_Fields>;
  stddev?: Maybe<CompanyUser_Stddev_Fields>;
  stddev_pop?: Maybe<CompanyUser_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<CompanyUser_Stddev_Samp_Fields>;
  sum?: Maybe<CompanyUser_Sum_Fields>;
  var_pop?: Maybe<CompanyUser_Var_Pop_Fields>;
  var_samp?: Maybe<CompanyUser_Var_Samp_Fields>;
  variance?: Maybe<CompanyUser_Variance_Fields>;
};


/** aggregate fields of "CompanyUser" */
export type CompanyUser_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<CompanyUser_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "CompanyUser" */
export type CompanyUser_Aggregate_Order_By = {
  avg?: Maybe<CompanyUser_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<CompanyUser_Max_Order_By>;
  min?: Maybe<CompanyUser_Min_Order_By>;
  stddev?: Maybe<CompanyUser_Stddev_Order_By>;
  stddev_pop?: Maybe<CompanyUser_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<CompanyUser_Stddev_Samp_Order_By>;
  sum?: Maybe<CompanyUser_Sum_Order_By>;
  var_pop?: Maybe<CompanyUser_Var_Pop_Order_By>;
  var_samp?: Maybe<CompanyUser_Var_Samp_Order_By>;
  variance?: Maybe<CompanyUser_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "CompanyUser" */
export type CompanyUser_Arr_Rel_Insert_Input = {
  data: Array<CompanyUser_Insert_Input>;
  on_conflict?: Maybe<CompanyUser_On_Conflict>;
};

/** aggregate avg on columns */
export type CompanyUser_Avg_Fields = {
  __typename?: 'CompanyUser_avg_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "CompanyUser" */
export type CompanyUser_Avg_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "CompanyUser". All fields are combined with a logical 'AND'. */
export type CompanyUser_Bool_Exp = {
  Company?: Maybe<Company_Bool_Exp>;
  CompanyContacts?: Maybe<CompanyContact_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<CompanyUser_Bool_Exp>>>;
  _not?: Maybe<CompanyUser_Bool_Exp>;
  _or?: Maybe<Array<Maybe<CompanyUser_Bool_Exp>>>;
  companyID?: Maybe<Int_Comparison_Exp>;
  companyUserID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "CompanyUser" */
export enum CompanyUser_Constraint {
  /** unique or primary key constraint */
  CompanyUserPkey = 'CompanyUser_pkey'
}

/** input type for incrementing integer columne in table "CompanyUser" */
export type CompanyUser_Inc_Input = {
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "CompanyUser" */
export type CompanyUser_Insert_Input = {
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  CompanyContacts?: Maybe<CompanyContact_Arr_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type CompanyUser_Max_Fields = {
  __typename?: 'CompanyUser_max_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "CompanyUser" */
export type CompanyUser_Max_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type CompanyUser_Min_Fields = {
  __typename?: 'CompanyUser_min_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "CompanyUser" */
export type CompanyUser_Min_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "CompanyUser" */
export type CompanyUser_Mutation_Response = {
  __typename?: 'CompanyUser_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<CompanyUser>;
};

/** input type for inserting object relation for remote table "CompanyUser" */
export type CompanyUser_Obj_Rel_Insert_Input = {
  data: CompanyUser_Insert_Input;
  on_conflict?: Maybe<CompanyUser_On_Conflict>;
};

/** on conflict condition type for table "CompanyUser" */
export type CompanyUser_On_Conflict = {
  constraint: CompanyUser_Constraint;
  update_columns: Array<CompanyUser_Update_Column>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};

/** ordering options when selecting data from "CompanyUser" */
export type CompanyUser_Order_By = {
  Company?: Maybe<Company_Order_By>;
  CompanyContacts_aggregate?: Maybe<CompanyContact_Aggregate_Order_By>;
  User?: Maybe<User_Order_By>;
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "CompanyUser" */
export enum CompanyUser_Select_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  CompanyUserId = 'companyUserID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "CompanyUser" */
export type CompanyUser_Set_Input = {
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type CompanyUser_Stddev_Fields = {
  __typename?: 'CompanyUser_stddev_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "CompanyUser" */
export type CompanyUser_Stddev_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type CompanyUser_Stddev_Pop_Fields = {
  __typename?: 'CompanyUser_stddev_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "CompanyUser" */
export type CompanyUser_Stddev_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type CompanyUser_Stddev_Samp_Fields = {
  __typename?: 'CompanyUser_stddev_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "CompanyUser" */
export type CompanyUser_Stddev_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type CompanyUser_Sum_Fields = {
  __typename?: 'CompanyUser_sum_fields';
  companyID?: Maybe<Scalars['Int']>;
  companyUserID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "CompanyUser" */
export type CompanyUser_Sum_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "CompanyUser" */
export enum CompanyUser_Update_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  CompanyUserId = 'companyUserID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type CompanyUser_Var_Pop_Fields = {
  __typename?: 'CompanyUser_var_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "CompanyUser" */
export type CompanyUser_Var_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type CompanyUser_Var_Samp_Fields = {
  __typename?: 'CompanyUser_var_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "CompanyUser" */
export type CompanyUser_Var_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type CompanyUser_Variance_Fields = {
  __typename?: 'CompanyUser_variance_fields';
  companyID?: Maybe<Scalars['Float']>;
  companyUserID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "CompanyUser" */
export type CompanyUser_Variance_Order_By = {
  companyID?: Maybe<Order_By>;
  companyUserID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "Country" */
export type Country = {
  __typename?: 'Country';
  /** An array relationship */
  Cities: Array<City>;
  /** An aggregated array relationship */
  Cities_aggregate: City_Aggregate;
  country: Scalars['String'];
  countryID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};


/** columns and relationships of "Country" */
export type CountryCitiesArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** columns and relationships of "Country" */
export type CountryCities_AggregateArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};

/** aggregated selection of "Country" */
export type Country_Aggregate = {
  __typename?: 'Country_aggregate';
  aggregate?: Maybe<Country_Aggregate_Fields>;
  nodes: Array<Country>;
};

/** aggregate fields of "Country" */
export type Country_Aggregate_Fields = {
  __typename?: 'Country_aggregate_fields';
  avg?: Maybe<Country_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Country_Max_Fields>;
  min?: Maybe<Country_Min_Fields>;
  stddev?: Maybe<Country_Stddev_Fields>;
  stddev_pop?: Maybe<Country_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Country_Stddev_Samp_Fields>;
  sum?: Maybe<Country_Sum_Fields>;
  var_pop?: Maybe<Country_Var_Pop_Fields>;
  var_samp?: Maybe<Country_Var_Samp_Fields>;
  variance?: Maybe<Country_Variance_Fields>;
};


/** aggregate fields of "Country" */
export type Country_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Country_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Country" */
export type Country_Aggregate_Order_By = {
  avg?: Maybe<Country_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Country_Max_Order_By>;
  min?: Maybe<Country_Min_Order_By>;
  stddev?: Maybe<Country_Stddev_Order_By>;
  stddev_pop?: Maybe<Country_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Country_Stddev_Samp_Order_By>;
  sum?: Maybe<Country_Sum_Order_By>;
  var_pop?: Maybe<Country_Var_Pop_Order_By>;
  var_samp?: Maybe<Country_Var_Samp_Order_By>;
  variance?: Maybe<Country_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Country" */
export type Country_Arr_Rel_Insert_Input = {
  data: Array<Country_Insert_Input>;
  on_conflict?: Maybe<Country_On_Conflict>;
};

/** aggregate avg on columns */
export type Country_Avg_Fields = {
  __typename?: 'Country_avg_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Country" */
export type Country_Avg_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Country". All fields are combined with a logical 'AND'. */
export type Country_Bool_Exp = {
  Cities?: Maybe<City_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Country_Bool_Exp>>>;
  _not?: Maybe<Country_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Country_Bool_Exp>>>;
  country?: Maybe<String_Comparison_Exp>;
  countryID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "Country" */
export enum Country_Constraint {
  /** unique or primary key constraint */
  CountryPkey = 'Country_pkey'
}

/** input type for incrementing integer columne in table "Country" */
export type Country_Inc_Input = {
  countryID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Country" */
export type Country_Insert_Input = {
  Cities?: Maybe<City_Arr_Rel_Insert_Input>;
  country?: Maybe<Scalars['String']>;
  countryID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type Country_Max_Fields = {
  __typename?: 'Country_max_fields';
  country?: Maybe<Scalars['String']>;
  countryID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "Country" */
export type Country_Max_Order_By = {
  country?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Country_Min_Fields = {
  __typename?: 'Country_min_fields';
  country?: Maybe<Scalars['String']>;
  countryID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "Country" */
export type Country_Min_Order_By = {
  country?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
};

/** response of any mutation on the table "Country" */
export type Country_Mutation_Response = {
  __typename?: 'Country_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Country>;
};

/** input type for inserting object relation for remote table "Country" */
export type Country_Obj_Rel_Insert_Input = {
  data: Country_Insert_Input;
  on_conflict?: Maybe<Country_On_Conflict>;
};

/** on conflict condition type for table "Country" */
export type Country_On_Conflict = {
  constraint: Country_Constraint;
  update_columns: Array<Country_Update_Column>;
  where?: Maybe<Country_Bool_Exp>;
};

/** ordering options when selecting data from "Country" */
export type Country_Order_By = {
  Cities_aggregate?: Maybe<City_Aggregate_Order_By>;
  country?: Maybe<Order_By>;
  countryID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "Country" */
export enum Country_Select_Column {
  /** column name */
  Country = 'country',
  /** column name */
  CountryId = 'countryID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "Country" */
export type Country_Set_Input = {
  country?: Maybe<Scalars['String']>;
  countryID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type Country_Stddev_Fields = {
  __typename?: 'Country_stddev_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Country" */
export type Country_Stddev_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Country_Stddev_Pop_Fields = {
  __typename?: 'Country_stddev_pop_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Country" */
export type Country_Stddev_Pop_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Country_Stddev_Samp_Fields = {
  __typename?: 'Country_stddev_samp_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Country" */
export type Country_Stddev_Samp_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Country_Sum_Fields = {
  __typename?: 'Country_sum_fields';
  countryID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Country" */
export type Country_Sum_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** update columns of table "Country" */
export enum Country_Update_Column {
  /** column name */
  Country = 'country',
  /** column name */
  CountryId = 'countryID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type Country_Var_Pop_Fields = {
  __typename?: 'Country_var_pop_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Country" */
export type Country_Var_Pop_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Country_Var_Samp_Fields = {
  __typename?: 'Country_var_samp_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Country" */
export type Country_Var_Samp_Order_By = {
  countryID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Country_Variance_Fields = {
  __typename?: 'Country_variance_fields';
  countryID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Country" */
export type Country_Variance_Order_By = {
  countryID?: Maybe<Order_By>;
};


/** expression to compare columns of type date. All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: Maybe<Scalars['date']>;
  _gt?: Maybe<Scalars['date']>;
  _gte?: Maybe<Scalars['date']>;
  _in?: Maybe<Array<Scalars['date']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['date']>;
  _lte?: Maybe<Scalars['date']>;
  _neq?: Maybe<Scalars['date']>;
  _nin?: Maybe<Array<Scalars['date']>>;
};

/** columns and relationships of "Day" */
export type Day = {
  __typename?: 'Day';
  /** An array relationship */
  ArchSiteWorkingDays: Array<ArchSiteWorkingDay>;
  /** An aggregated array relationship */
  ArchSiteWorkingDays_aggregate: ArchSiteWorkingDay_Aggregate;
  /** An array relationship */
  MuseumWorkingDays: Array<MuseumWorkingDay>;
  /** An aggregated array relationship */
  MuseumWorkingDays_aggregate: MuseumWorkingDay_Aggregate;
  /** An array relationship */
  RestaurantWorkingDays: Array<RestaurantWorkingDay>;
  /** An aggregated array relationship */
  RestaurantWorkingDays_aggregate: RestaurantWorkingDay_Aggregate;
  dayID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
};


/** columns and relationships of "Day" */
export type DayArchSiteWorkingDaysArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** columns and relationships of "Day" */
export type DayArchSiteWorkingDays_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** columns and relationships of "Day" */
export type DayMuseumWorkingDaysArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** columns and relationships of "Day" */
export type DayMuseumWorkingDays_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** columns and relationships of "Day" */
export type DayRestaurantWorkingDaysArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};


/** columns and relationships of "Day" */
export type DayRestaurantWorkingDays_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};

/** aggregated selection of "Day" */
export type Day_Aggregate = {
  __typename?: 'Day_aggregate';
  aggregate?: Maybe<Day_Aggregate_Fields>;
  nodes: Array<Day>;
};

/** aggregate fields of "Day" */
export type Day_Aggregate_Fields = {
  __typename?: 'Day_aggregate_fields';
  avg?: Maybe<Day_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Day_Max_Fields>;
  min?: Maybe<Day_Min_Fields>;
  stddev?: Maybe<Day_Stddev_Fields>;
  stddev_pop?: Maybe<Day_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Day_Stddev_Samp_Fields>;
  sum?: Maybe<Day_Sum_Fields>;
  var_pop?: Maybe<Day_Var_Pop_Fields>;
  var_samp?: Maybe<Day_Var_Samp_Fields>;
  variance?: Maybe<Day_Variance_Fields>;
};


/** aggregate fields of "Day" */
export type Day_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Day_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Day" */
export type Day_Aggregate_Order_By = {
  avg?: Maybe<Day_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Day_Max_Order_By>;
  min?: Maybe<Day_Min_Order_By>;
  stddev?: Maybe<Day_Stddev_Order_By>;
  stddev_pop?: Maybe<Day_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Day_Stddev_Samp_Order_By>;
  sum?: Maybe<Day_Sum_Order_By>;
  var_pop?: Maybe<Day_Var_Pop_Order_By>;
  var_samp?: Maybe<Day_Var_Samp_Order_By>;
  variance?: Maybe<Day_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Day" */
export type Day_Arr_Rel_Insert_Input = {
  data: Array<Day_Insert_Input>;
  on_conflict?: Maybe<Day_On_Conflict>;
};

/** aggregate avg on columns */
export type Day_Avg_Fields = {
  __typename?: 'Day_avg_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Day" */
export type Day_Avg_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Day". All fields are combined with a logical 'AND'. */
export type Day_Bool_Exp = {
  ArchSiteWorkingDays?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
  MuseumWorkingDays?: Maybe<MuseumWorkingDay_Bool_Exp>;
  RestaurantWorkingDays?: Maybe<RestaurantWorkingDay_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Day_Bool_Exp>>>;
  _not?: Maybe<Day_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Day_Bool_Exp>>>;
  dayID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Day" */
export enum Day_Constraint {
  /** unique or primary key constraint */
  DayPkey = 'Day_pkey'
}

/** input type for incrementing integer columne in table "Day" */
export type Day_Inc_Input = {
  dayID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Day" */
export type Day_Insert_Input = {
  ArchSiteWorkingDays?: Maybe<ArchSiteWorkingDay_Arr_Rel_Insert_Input>;
  MuseumWorkingDays?: Maybe<MuseumWorkingDay_Arr_Rel_Insert_Input>;
  RestaurantWorkingDays?: Maybe<RestaurantWorkingDay_Arr_Rel_Insert_Input>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Day_Max_Fields = {
  __typename?: 'Day_max_fields';
  dayID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Day" */
export type Day_Max_Order_By = {
  dayID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Day_Min_Fields = {
  __typename?: 'Day_min_fields';
  dayID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Day" */
export type Day_Min_Order_By = {
  dayID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "Day" */
export type Day_Mutation_Response = {
  __typename?: 'Day_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Day>;
};

/** input type for inserting object relation for remote table "Day" */
export type Day_Obj_Rel_Insert_Input = {
  data: Day_Insert_Input;
  on_conflict?: Maybe<Day_On_Conflict>;
};

/** on conflict condition type for table "Day" */
export type Day_On_Conflict = {
  constraint: Day_Constraint;
  update_columns: Array<Day_Update_Column>;
  where?: Maybe<Day_Bool_Exp>;
};

/** ordering options when selecting data from "Day" */
export type Day_Order_By = {
  ArchSiteWorkingDays_aggregate?: Maybe<ArchSiteWorkingDay_Aggregate_Order_By>;
  MuseumWorkingDays_aggregate?: Maybe<MuseumWorkingDay_Aggregate_Order_By>;
  RestaurantWorkingDays_aggregate?: Maybe<RestaurantWorkingDay_Aggregate_Order_By>;
  dayID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** select columns of table "Day" */
export enum Day_Select_Column {
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "Day" */
export type Day_Set_Input = {
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Day_Stddev_Fields = {
  __typename?: 'Day_stddev_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Day" */
export type Day_Stddev_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Day_Stddev_Pop_Fields = {
  __typename?: 'Day_stddev_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Day" */
export type Day_Stddev_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Day_Stddev_Samp_Fields = {
  __typename?: 'Day_stddev_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Day" */
export type Day_Stddev_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Day_Sum_Fields = {
  __typename?: 'Day_sum_fields';
  dayID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Day" */
export type Day_Sum_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** update columns of table "Day" */
export enum Day_Update_Column {
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name'
}

/** aggregate var_pop on columns */
export type Day_Var_Pop_Fields = {
  __typename?: 'Day_var_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Day" */
export type Day_Var_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Day_Var_Samp_Fields = {
  __typename?: 'Day_var_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Day" */
export type Day_Var_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Day_Variance_Fields = {
  __typename?: 'Day_variance_fields';
  dayID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Day" */
export type Day_Variance_Order_By = {
  dayID?: Maybe<Order_By>;
};

/** columns and relationships of "District" */
export type District = {
  __typename?: 'District';
  /** An array relationship */
  Addresses: Array<Address>;
  /** An aggregated array relationship */
  Addresses_aggregate: Address_Aggregate;
  /** An object relationship */
  City: City;
  cityID: Scalars['Int'];
  district: Scalars['String'];
  districtID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};


/** columns and relationships of "District" */
export type DistrictAddressesArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** columns and relationships of "District" */
export type DistrictAddresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};

/** aggregated selection of "District" */
export type District_Aggregate = {
  __typename?: 'District_aggregate';
  aggregate?: Maybe<District_Aggregate_Fields>;
  nodes: Array<District>;
};

/** aggregate fields of "District" */
export type District_Aggregate_Fields = {
  __typename?: 'District_aggregate_fields';
  avg?: Maybe<District_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<District_Max_Fields>;
  min?: Maybe<District_Min_Fields>;
  stddev?: Maybe<District_Stddev_Fields>;
  stddev_pop?: Maybe<District_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<District_Stddev_Samp_Fields>;
  sum?: Maybe<District_Sum_Fields>;
  var_pop?: Maybe<District_Var_Pop_Fields>;
  var_samp?: Maybe<District_Var_Samp_Fields>;
  variance?: Maybe<District_Variance_Fields>;
};


/** aggregate fields of "District" */
export type District_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<District_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "District" */
export type District_Aggregate_Order_By = {
  avg?: Maybe<District_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<District_Max_Order_By>;
  min?: Maybe<District_Min_Order_By>;
  stddev?: Maybe<District_Stddev_Order_By>;
  stddev_pop?: Maybe<District_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<District_Stddev_Samp_Order_By>;
  sum?: Maybe<District_Sum_Order_By>;
  var_pop?: Maybe<District_Var_Pop_Order_By>;
  var_samp?: Maybe<District_Var_Samp_Order_By>;
  variance?: Maybe<District_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "District" */
export type District_Arr_Rel_Insert_Input = {
  data: Array<District_Insert_Input>;
  on_conflict?: Maybe<District_On_Conflict>;
};

/** aggregate avg on columns */
export type District_Avg_Fields = {
  __typename?: 'District_avg_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "District" */
export type District_Avg_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "District". All fields are combined with a logical 'AND'. */
export type District_Bool_Exp = {
  Addresses?: Maybe<Address_Bool_Exp>;
  City?: Maybe<City_Bool_Exp>;
  _and?: Maybe<Array<Maybe<District_Bool_Exp>>>;
  _not?: Maybe<District_Bool_Exp>;
  _or?: Maybe<Array<Maybe<District_Bool_Exp>>>;
  cityID?: Maybe<Int_Comparison_Exp>;
  district?: Maybe<String_Comparison_Exp>;
  districtID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "District" */
export enum District_Constraint {
  /** unique or primary key constraint */
  DistrictPkey = 'District_pkey'
}

/** input type for incrementing integer columne in table "District" */
export type District_Inc_Input = {
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "District" */
export type District_Insert_Input = {
  Addresses?: Maybe<Address_Arr_Rel_Insert_Input>;
  City?: Maybe<City_Obj_Rel_Insert_Input>;
  cityID?: Maybe<Scalars['Int']>;
  district?: Maybe<Scalars['String']>;
  districtID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type District_Max_Fields = {
  __typename?: 'District_max_fields';
  cityID?: Maybe<Scalars['Int']>;
  district?: Maybe<Scalars['String']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "District" */
export type District_Max_Order_By = {
  cityID?: Maybe<Order_By>;
  district?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type District_Min_Fields = {
  __typename?: 'District_min_fields';
  cityID?: Maybe<Scalars['Int']>;
  district?: Maybe<Scalars['String']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "District" */
export type District_Min_Order_By = {
  cityID?: Maybe<Order_By>;
  district?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** response of any mutation on the table "District" */
export type District_Mutation_Response = {
  __typename?: 'District_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<District>;
};

/** input type for inserting object relation for remote table "District" */
export type District_Obj_Rel_Insert_Input = {
  data: District_Insert_Input;
  on_conflict?: Maybe<District_On_Conflict>;
};

/** on conflict condition type for table "District" */
export type District_On_Conflict = {
  constraint: District_Constraint;
  update_columns: Array<District_Update_Column>;
  where?: Maybe<District_Bool_Exp>;
};

/** ordering options when selecting data from "District" */
export type District_Order_By = {
  Addresses_aggregate?: Maybe<Address_Aggregate_Order_By>;
  City?: Maybe<City_Order_By>;
  cityID?: Maybe<Order_By>;
  district?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "District" */
export enum District_Select_Column {
  /** column name */
  CityId = 'cityID',
  /** column name */
  District = 'district',
  /** column name */
  DistrictId = 'districtID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "District" */
export type District_Set_Input = {
  cityID?: Maybe<Scalars['Int']>;
  district?: Maybe<Scalars['String']>;
  districtID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type District_Stddev_Fields = {
  __typename?: 'District_stddev_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "District" */
export type District_Stddev_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type District_Stddev_Pop_Fields = {
  __typename?: 'District_stddev_pop_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "District" */
export type District_Stddev_Pop_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type District_Stddev_Samp_Fields = {
  __typename?: 'District_stddev_samp_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "District" */
export type District_Stddev_Samp_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type District_Sum_Fields = {
  __typename?: 'District_sum_fields';
  cityID?: Maybe<Scalars['Int']>;
  districtID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "District" */
export type District_Sum_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** update columns of table "District" */
export enum District_Update_Column {
  /** column name */
  CityId = 'cityID',
  /** column name */
  District = 'district',
  /** column name */
  DistrictId = 'districtID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type District_Var_Pop_Fields = {
  __typename?: 'District_var_pop_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "District" */
export type District_Var_Pop_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type District_Var_Samp_Fields = {
  __typename?: 'District_var_samp_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "District" */
export type District_Var_Samp_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type District_Variance_Fields = {
  __typename?: 'District_variance_fields';
  cityID?: Maybe<Scalars['Float']>;
  districtID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "District" */
export type District_Variance_Order_By = {
  cityID?: Maybe<Order_By>;
  districtID?: Maybe<Order_By>;
};

/** expression to compare columns of type Float. All fields are combined with logical 'AND'. */
export type Float_Comparison_Exp = {
  _eq?: Maybe<Scalars['Float']>;
  _gt?: Maybe<Scalars['Float']>;
  _gte?: Maybe<Scalars['Float']>;
  _in?: Maybe<Array<Scalars['Float']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Float']>;
  _lte?: Maybe<Scalars['Float']>;
  _neq?: Maybe<Scalars['Float']>;
  _nin?: Maybe<Array<Scalars['Float']>>;
};

/** columns and relationships of "Hotel" */
export type Hotel = {
  __typename?: 'Hotel';
  /** An object relationship */
  Company: Company;
  /** An array relationship */
  HotelComments: Array<HotelComment>;
  /** An aggregated array relationship */
  HotelComments_aggregate: HotelComment_Aggregate;
  /** An array relationship */
  HotelRooms: Array<HotelRoom>;
  /** An aggregated array relationship */
  HotelRooms_aggregate: HotelRoom_Aggregate;
  /** An array relationship */
  HotelServices: Array<HotelService>;
  /** An aggregated array relationship */
  HotelServices_aggregate: HotelService_Aggregate;
  /** An object relationship */
  Location: Location;
  /** An array relationship */
  TravelGuideHotels: Array<TravelGuideHotel>;
  /** An aggregated array relationship */
  TravelGuideHotels_aggregate: TravelGuideHotel_Aggregate;
  companyID: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  hotelID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  name: Scalars['String'];
  star?: Maybe<Scalars['Float']>;
  taxNumber: Scalars['String'];
};


/** columns and relationships of "Hotel" */
export type HotelHotelCommentsArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelHotelComments_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelHotelRoomsArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelHotelRooms_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelHotelServicesArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelHotelServices_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelTravelGuideHotelsArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** columns and relationships of "Hotel" */
export type HotelTravelGuideHotels_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};

/** aggregated selection of "Hotel" */
export type Hotel_Aggregate = {
  __typename?: 'Hotel_aggregate';
  aggregate?: Maybe<Hotel_Aggregate_Fields>;
  nodes: Array<Hotel>;
};

/** aggregate fields of "Hotel" */
export type Hotel_Aggregate_Fields = {
  __typename?: 'Hotel_aggregate_fields';
  avg?: Maybe<Hotel_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Hotel_Max_Fields>;
  min?: Maybe<Hotel_Min_Fields>;
  stddev?: Maybe<Hotel_Stddev_Fields>;
  stddev_pop?: Maybe<Hotel_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Hotel_Stddev_Samp_Fields>;
  sum?: Maybe<Hotel_Sum_Fields>;
  var_pop?: Maybe<Hotel_Var_Pop_Fields>;
  var_samp?: Maybe<Hotel_Var_Samp_Fields>;
  variance?: Maybe<Hotel_Variance_Fields>;
};


/** aggregate fields of "Hotel" */
export type Hotel_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Hotel_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Hotel" */
export type Hotel_Aggregate_Order_By = {
  avg?: Maybe<Hotel_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Hotel_Max_Order_By>;
  min?: Maybe<Hotel_Min_Order_By>;
  stddev?: Maybe<Hotel_Stddev_Order_By>;
  stddev_pop?: Maybe<Hotel_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Hotel_Stddev_Samp_Order_By>;
  sum?: Maybe<Hotel_Sum_Order_By>;
  var_pop?: Maybe<Hotel_Var_Pop_Order_By>;
  var_samp?: Maybe<Hotel_Var_Samp_Order_By>;
  variance?: Maybe<Hotel_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Hotel" */
export type Hotel_Arr_Rel_Insert_Input = {
  data: Array<Hotel_Insert_Input>;
  on_conflict?: Maybe<Hotel_On_Conflict>;
};

/** aggregate avg on columns */
export type Hotel_Avg_Fields = {
  __typename?: 'Hotel_avg_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Hotel" */
export type Hotel_Avg_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Hotel". All fields are combined with a logical 'AND'. */
export type Hotel_Bool_Exp = {
  Company?: Maybe<Company_Bool_Exp>;
  HotelComments?: Maybe<HotelComment_Bool_Exp>;
  HotelRooms?: Maybe<HotelRoom_Bool_Exp>;
  HotelServices?: Maybe<HotelService_Bool_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  TravelGuideHotels?: Maybe<TravelGuideHotel_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Hotel_Bool_Exp>>>;
  _not?: Maybe<Hotel_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Hotel_Bool_Exp>>>;
  companyID?: Maybe<Int_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  hotelID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  taxNumber?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Hotel" */
export enum Hotel_Constraint {
  /** unique or primary key constraint */
  HotelPkey = 'Hotel_pkey'
}

/** input type for incrementing integer columne in table "Hotel" */
export type Hotel_Inc_Input = {
  companyID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Hotel" */
export type Hotel_Insert_Input = {
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  HotelComments?: Maybe<HotelComment_Arr_Rel_Insert_Input>;
  HotelRooms?: Maybe<HotelRoom_Arr_Rel_Insert_Input>;
  HotelServices?: Maybe<HotelService_Arr_Rel_Insert_Input>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  TravelGuideHotels?: Maybe<TravelGuideHotel_Arr_Rel_Insert_Input>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Hotel_Max_Fields = {
  __typename?: 'Hotel_max_fields';
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  hotelID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Hotel" */
export type Hotel_Max_Order_By = {
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Hotel_Min_Fields = {
  __typename?: 'Hotel_min_fields';
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  hotelID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Hotel" */
export type Hotel_Min_Order_By = {
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** response of any mutation on the table "Hotel" */
export type Hotel_Mutation_Response = {
  __typename?: 'Hotel_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Hotel>;
};

/** input type for inserting object relation for remote table "Hotel" */
export type Hotel_Obj_Rel_Insert_Input = {
  data: Hotel_Insert_Input;
  on_conflict?: Maybe<Hotel_On_Conflict>;
};

/** on conflict condition type for table "Hotel" */
export type Hotel_On_Conflict = {
  constraint: Hotel_Constraint;
  update_columns: Array<Hotel_Update_Column>;
  where?: Maybe<Hotel_Bool_Exp>;
};

/** ordering options when selecting data from "Hotel" */
export type Hotel_Order_By = {
  Company?: Maybe<Company_Order_By>;
  HotelComments_aggregate?: Maybe<HotelComment_Aggregate_Order_By>;
  HotelRooms_aggregate?: Maybe<HotelRoom_Aggregate_Order_By>;
  HotelServices_aggregate?: Maybe<HotelService_Aggregate_Order_By>;
  Location?: Maybe<Location_Order_By>;
  TravelGuideHotels_aggregate?: Maybe<TravelGuideHotel_Aggregate_Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** select columns of table "Hotel" */
export enum Hotel_Select_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  Star = 'star',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** input type for updating data in table "Hotel" */
export type Hotel_Set_Input = {
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Hotel_Stddev_Fields = {
  __typename?: 'Hotel_stddev_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Hotel" */
export type Hotel_Stddev_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Hotel_Stddev_Pop_Fields = {
  __typename?: 'Hotel_stddev_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Hotel" */
export type Hotel_Stddev_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Hotel_Stddev_Samp_Fields = {
  __typename?: 'Hotel_stddev_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Hotel" */
export type Hotel_Stddev_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Hotel_Sum_Fields = {
  __typename?: 'Hotel_sum_fields';
  companyID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "Hotel" */
export type Hotel_Sum_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** update columns of table "Hotel" */
export enum Hotel_Update_Column {
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  Star = 'star',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** aggregate var_pop on columns */
export type Hotel_Var_Pop_Fields = {
  __typename?: 'Hotel_var_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Hotel" */
export type Hotel_Var_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Hotel_Var_Samp_Fields = {
  __typename?: 'Hotel_var_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Hotel" */
export type Hotel_Var_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Hotel_Variance_Fields = {
  __typename?: 'Hotel_variance_fields';
  companyID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Hotel" */
export type Hotel_Variance_Order_By = {
  companyID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** columns and relationships of "HotelComment" */
export type HotelComment = {
  __typename?: 'HotelComment';
  /** An object relationship */
  Hotel: Hotel;
  /** An object relationship */
  User: User;
  content: Scalars['String'];
  date: Scalars['timestamptz'];
  hotelCommentID: Scalars['Int'];
  hotelID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  star: Scalars['Float'];
  userID: Scalars['Int'];
};

/** aggregated selection of "HotelComment" */
export type HotelComment_Aggregate = {
  __typename?: 'HotelComment_aggregate';
  aggregate?: Maybe<HotelComment_Aggregate_Fields>;
  nodes: Array<HotelComment>;
};

/** aggregate fields of "HotelComment" */
export type HotelComment_Aggregate_Fields = {
  __typename?: 'HotelComment_aggregate_fields';
  avg?: Maybe<HotelComment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<HotelComment_Max_Fields>;
  min?: Maybe<HotelComment_Min_Fields>;
  stddev?: Maybe<HotelComment_Stddev_Fields>;
  stddev_pop?: Maybe<HotelComment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<HotelComment_Stddev_Samp_Fields>;
  sum?: Maybe<HotelComment_Sum_Fields>;
  var_pop?: Maybe<HotelComment_Var_Pop_Fields>;
  var_samp?: Maybe<HotelComment_Var_Samp_Fields>;
  variance?: Maybe<HotelComment_Variance_Fields>;
};


/** aggregate fields of "HotelComment" */
export type HotelComment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<HotelComment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "HotelComment" */
export type HotelComment_Aggregate_Order_By = {
  avg?: Maybe<HotelComment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<HotelComment_Max_Order_By>;
  min?: Maybe<HotelComment_Min_Order_By>;
  stddev?: Maybe<HotelComment_Stddev_Order_By>;
  stddev_pop?: Maybe<HotelComment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<HotelComment_Stddev_Samp_Order_By>;
  sum?: Maybe<HotelComment_Sum_Order_By>;
  var_pop?: Maybe<HotelComment_Var_Pop_Order_By>;
  var_samp?: Maybe<HotelComment_Var_Samp_Order_By>;
  variance?: Maybe<HotelComment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "HotelComment" */
export type HotelComment_Arr_Rel_Insert_Input = {
  data: Array<HotelComment_Insert_Input>;
  on_conflict?: Maybe<HotelComment_On_Conflict>;
};

/** aggregate avg on columns */
export type HotelComment_Avg_Fields = {
  __typename?: 'HotelComment_avg_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "HotelComment" */
export type HotelComment_Avg_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "HotelComment". All fields are combined with a logical 'AND'. */
export type HotelComment_Bool_Exp = {
  Hotel?: Maybe<Hotel_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<HotelComment_Bool_Exp>>>;
  _not?: Maybe<HotelComment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<HotelComment_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Timestamptz_Comparison_Exp>;
  hotelCommentID?: Maybe<Int_Comparison_Exp>;
  hotelID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "HotelComment" */
export enum HotelComment_Constraint {
  /** unique or primary key constraint */
  HotelCommentPkey = 'HotelComment_pkey'
}

/** input type for incrementing integer columne in table "HotelComment" */
export type HotelComment_Inc_Input = {
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "HotelComment" */
export type HotelComment_Insert_Input = {
  Hotel?: Maybe<Hotel_Obj_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type HotelComment_Max_Fields = {
  __typename?: 'HotelComment_max_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "HotelComment" */
export type HotelComment_Max_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type HotelComment_Min_Fields = {
  __typename?: 'HotelComment_min_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "HotelComment" */
export type HotelComment_Min_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "HotelComment" */
export type HotelComment_Mutation_Response = {
  __typename?: 'HotelComment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<HotelComment>;
};

/** input type for inserting object relation for remote table "HotelComment" */
export type HotelComment_Obj_Rel_Insert_Input = {
  data: HotelComment_Insert_Input;
  on_conflict?: Maybe<HotelComment_On_Conflict>;
};

/** on conflict condition type for table "HotelComment" */
export type HotelComment_On_Conflict = {
  constraint: HotelComment_Constraint;
  update_columns: Array<HotelComment_Update_Column>;
  where?: Maybe<HotelComment_Bool_Exp>;
};

/** ordering options when selecting data from "HotelComment" */
export type HotelComment_Order_By = {
  Hotel?: Maybe<Hotel_Order_By>;
  User?: Maybe<User_Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "HotelComment" */
export enum HotelComment_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  HotelCommentId = 'hotelCommentID',
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "HotelComment" */
export type HotelComment_Set_Input = {
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type HotelComment_Stddev_Fields = {
  __typename?: 'HotelComment_stddev_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "HotelComment" */
export type HotelComment_Stddev_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type HotelComment_Stddev_Pop_Fields = {
  __typename?: 'HotelComment_stddev_pop_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "HotelComment" */
export type HotelComment_Stddev_Pop_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type HotelComment_Stddev_Samp_Fields = {
  __typename?: 'HotelComment_stddev_samp_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "HotelComment" */
export type HotelComment_Stddev_Samp_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type HotelComment_Sum_Fields = {
  __typename?: 'HotelComment_sum_fields';
  hotelCommentID?: Maybe<Scalars['Int']>;
  hotelID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "HotelComment" */
export type HotelComment_Sum_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "HotelComment" */
export enum HotelComment_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  HotelCommentId = 'hotelCommentID',
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type HotelComment_Var_Pop_Fields = {
  __typename?: 'HotelComment_var_pop_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "HotelComment" */
export type HotelComment_Var_Pop_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type HotelComment_Var_Samp_Fields = {
  __typename?: 'HotelComment_var_samp_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "HotelComment" */
export type HotelComment_Var_Samp_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type HotelComment_Variance_Fields = {
  __typename?: 'HotelComment_variance_fields';
  hotelCommentID?: Maybe<Scalars['Float']>;
  hotelID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "HotelComment" */
export type HotelComment_Variance_Order_By = {
  hotelCommentID?: Maybe<Order_By>;
  hotelID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "HotelRoom" */
export type HotelRoom = {
  __typename?: 'HotelRoom';
  /** An object relationship */
  Hotel: Hotel;
  /** An object relationship */
  Room: Room;
  hotelID: Scalars['Int'];
  hotelRoomID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  roomID: Scalars['Int'];
};

/** aggregated selection of "HotelRoom" */
export type HotelRoom_Aggregate = {
  __typename?: 'HotelRoom_aggregate';
  aggregate?: Maybe<HotelRoom_Aggregate_Fields>;
  nodes: Array<HotelRoom>;
};

/** aggregate fields of "HotelRoom" */
export type HotelRoom_Aggregate_Fields = {
  __typename?: 'HotelRoom_aggregate_fields';
  avg?: Maybe<HotelRoom_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<HotelRoom_Max_Fields>;
  min?: Maybe<HotelRoom_Min_Fields>;
  stddev?: Maybe<HotelRoom_Stddev_Fields>;
  stddev_pop?: Maybe<HotelRoom_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<HotelRoom_Stddev_Samp_Fields>;
  sum?: Maybe<HotelRoom_Sum_Fields>;
  var_pop?: Maybe<HotelRoom_Var_Pop_Fields>;
  var_samp?: Maybe<HotelRoom_Var_Samp_Fields>;
  variance?: Maybe<HotelRoom_Variance_Fields>;
};


/** aggregate fields of "HotelRoom" */
export type HotelRoom_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<HotelRoom_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "HotelRoom" */
export type HotelRoom_Aggregate_Order_By = {
  avg?: Maybe<HotelRoom_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<HotelRoom_Max_Order_By>;
  min?: Maybe<HotelRoom_Min_Order_By>;
  stddev?: Maybe<HotelRoom_Stddev_Order_By>;
  stddev_pop?: Maybe<HotelRoom_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<HotelRoom_Stddev_Samp_Order_By>;
  sum?: Maybe<HotelRoom_Sum_Order_By>;
  var_pop?: Maybe<HotelRoom_Var_Pop_Order_By>;
  var_samp?: Maybe<HotelRoom_Var_Samp_Order_By>;
  variance?: Maybe<HotelRoom_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "HotelRoom" */
export type HotelRoom_Arr_Rel_Insert_Input = {
  data: Array<HotelRoom_Insert_Input>;
  on_conflict?: Maybe<HotelRoom_On_Conflict>;
};

/** aggregate avg on columns */
export type HotelRoom_Avg_Fields = {
  __typename?: 'HotelRoom_avg_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "HotelRoom" */
export type HotelRoom_Avg_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "HotelRoom". All fields are combined with a logical 'AND'. */
export type HotelRoom_Bool_Exp = {
  Hotel?: Maybe<Hotel_Bool_Exp>;
  Room?: Maybe<Room_Bool_Exp>;
  _and?: Maybe<Array<Maybe<HotelRoom_Bool_Exp>>>;
  _not?: Maybe<HotelRoom_Bool_Exp>;
  _or?: Maybe<Array<Maybe<HotelRoom_Bool_Exp>>>;
  hotelID?: Maybe<Int_Comparison_Exp>;
  hotelRoomID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  roomID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "HotelRoom" */
export enum HotelRoom_Constraint {
  /** unique or primary key constraint */
  HotelRoomPkey = 'HotelRoom_pkey'
}

/** input type for incrementing integer columne in table "HotelRoom" */
export type HotelRoom_Inc_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "HotelRoom" */
export type HotelRoom_Insert_Input = {
  Hotel?: Maybe<Hotel_Obj_Rel_Insert_Input>;
  Room?: Maybe<Room_Obj_Rel_Insert_Input>;
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type HotelRoom_Max_Fields = {
  __typename?: 'HotelRoom_max_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "HotelRoom" */
export type HotelRoom_Max_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type HotelRoom_Min_Fields = {
  __typename?: 'HotelRoom_min_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "HotelRoom" */
export type HotelRoom_Min_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** response of any mutation on the table "HotelRoom" */
export type HotelRoom_Mutation_Response = {
  __typename?: 'HotelRoom_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<HotelRoom>;
};

/** input type for inserting object relation for remote table "HotelRoom" */
export type HotelRoom_Obj_Rel_Insert_Input = {
  data: HotelRoom_Insert_Input;
  on_conflict?: Maybe<HotelRoom_On_Conflict>;
};

/** on conflict condition type for table "HotelRoom" */
export type HotelRoom_On_Conflict = {
  constraint: HotelRoom_Constraint;
  update_columns: Array<HotelRoom_Update_Column>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};

/** ordering options when selecting data from "HotelRoom" */
export type HotelRoom_Order_By = {
  Hotel?: Maybe<Hotel_Order_By>;
  Room?: Maybe<Room_Order_By>;
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** select columns of table "HotelRoom" */
export enum HotelRoom_Select_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  HotelRoomId = 'hotelRoomID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID'
}

/** input type for updating data in table "HotelRoom" */
export type HotelRoom_Set_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type HotelRoom_Stddev_Fields = {
  __typename?: 'HotelRoom_stddev_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "HotelRoom" */
export type HotelRoom_Stddev_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type HotelRoom_Stddev_Pop_Fields = {
  __typename?: 'HotelRoom_stddev_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "HotelRoom" */
export type HotelRoom_Stddev_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type HotelRoom_Stddev_Samp_Fields = {
  __typename?: 'HotelRoom_stddev_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "HotelRoom" */
export type HotelRoom_Stddev_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type HotelRoom_Sum_Fields = {
  __typename?: 'HotelRoom_sum_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelRoomID?: Maybe<Scalars['Int']>;
  roomID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "HotelRoom" */
export type HotelRoom_Sum_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** update columns of table "HotelRoom" */
export enum HotelRoom_Update_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  HotelRoomId = 'hotelRoomID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID'
}

/** aggregate var_pop on columns */
export type HotelRoom_Var_Pop_Fields = {
  __typename?: 'HotelRoom_var_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "HotelRoom" */
export type HotelRoom_Var_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type HotelRoom_Var_Samp_Fields = {
  __typename?: 'HotelRoom_var_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "HotelRoom" */
export type HotelRoom_Var_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type HotelRoom_Variance_Fields = {
  __typename?: 'HotelRoom_variance_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelRoomID?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "HotelRoom" */
export type HotelRoom_Variance_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelRoomID?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
};

/** columns and relationships of "HotelService" */
export type HotelService = {
  __typename?: 'HotelService';
  /** An object relationship */
  Hotel: Hotel;
  /** An object relationship */
  HotelServiceProperty: HotelServiceProperty;
  hotelID: Scalars['Int'];
  hotelServiceHotelID: Scalars['Int'];
  hotelServicePropertyID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};

/** aggregated selection of "HotelService" */
export type HotelService_Aggregate = {
  __typename?: 'HotelService_aggregate';
  aggregate?: Maybe<HotelService_Aggregate_Fields>;
  nodes: Array<HotelService>;
};

/** aggregate fields of "HotelService" */
export type HotelService_Aggregate_Fields = {
  __typename?: 'HotelService_aggregate_fields';
  avg?: Maybe<HotelService_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<HotelService_Max_Fields>;
  min?: Maybe<HotelService_Min_Fields>;
  stddev?: Maybe<HotelService_Stddev_Fields>;
  stddev_pop?: Maybe<HotelService_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<HotelService_Stddev_Samp_Fields>;
  sum?: Maybe<HotelService_Sum_Fields>;
  var_pop?: Maybe<HotelService_Var_Pop_Fields>;
  var_samp?: Maybe<HotelService_Var_Samp_Fields>;
  variance?: Maybe<HotelService_Variance_Fields>;
};


/** aggregate fields of "HotelService" */
export type HotelService_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<HotelService_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "HotelService" */
export type HotelService_Aggregate_Order_By = {
  avg?: Maybe<HotelService_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<HotelService_Max_Order_By>;
  min?: Maybe<HotelService_Min_Order_By>;
  stddev?: Maybe<HotelService_Stddev_Order_By>;
  stddev_pop?: Maybe<HotelService_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<HotelService_Stddev_Samp_Order_By>;
  sum?: Maybe<HotelService_Sum_Order_By>;
  var_pop?: Maybe<HotelService_Var_Pop_Order_By>;
  var_samp?: Maybe<HotelService_Var_Samp_Order_By>;
  variance?: Maybe<HotelService_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "HotelService" */
export type HotelService_Arr_Rel_Insert_Input = {
  data: Array<HotelService_Insert_Input>;
  on_conflict?: Maybe<HotelService_On_Conflict>;
};

/** aggregate avg on columns */
export type HotelService_Avg_Fields = {
  __typename?: 'HotelService_avg_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "HotelService" */
export type HotelService_Avg_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "HotelService". All fields are combined with a logical 'AND'. */
export type HotelService_Bool_Exp = {
  Hotel?: Maybe<Hotel_Bool_Exp>;
  HotelServiceProperty?: Maybe<HotelServiceProperty_Bool_Exp>;
  _and?: Maybe<Array<Maybe<HotelService_Bool_Exp>>>;
  _not?: Maybe<HotelService_Bool_Exp>;
  _or?: Maybe<Array<Maybe<HotelService_Bool_Exp>>>;
  hotelID?: Maybe<Int_Comparison_Exp>;
  hotelServiceHotelID?: Maybe<Int_Comparison_Exp>;
  hotelServicePropertyID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "HotelService" */
export enum HotelService_Constraint {
  /** unique or primary key constraint */
  HotelServicePkey = 'HotelService_pkey'
}

/** input type for incrementing integer columne in table "HotelService" */
export type HotelService_Inc_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "HotelService" */
export type HotelService_Insert_Input = {
  Hotel?: Maybe<Hotel_Obj_Rel_Insert_Input>;
  HotelServiceProperty?: Maybe<HotelServiceProperty_Obj_Rel_Insert_Input>;
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type HotelService_Max_Fields = {
  __typename?: 'HotelService_max_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "HotelService" */
export type HotelService_Max_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type HotelService_Min_Fields = {
  __typename?: 'HotelService_min_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "HotelService" */
export type HotelService_Min_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** response of any mutation on the table "HotelService" */
export type HotelService_Mutation_Response = {
  __typename?: 'HotelService_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<HotelService>;
};

/** input type for inserting object relation for remote table "HotelService" */
export type HotelService_Obj_Rel_Insert_Input = {
  data: HotelService_Insert_Input;
  on_conflict?: Maybe<HotelService_On_Conflict>;
};

/** on conflict condition type for table "HotelService" */
export type HotelService_On_Conflict = {
  constraint: HotelService_Constraint;
  update_columns: Array<HotelService_Update_Column>;
  where?: Maybe<HotelService_Bool_Exp>;
};

/** ordering options when selecting data from "HotelService" */
export type HotelService_Order_By = {
  Hotel?: Maybe<Hotel_Order_By>;
  HotelServiceProperty?: Maybe<HotelServiceProperty_Order_By>;
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "HotelService" */
export enum HotelService_Select_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  HotelServiceHotelId = 'hotelServiceHotelID',
  /** column name */
  HotelServicePropertyId = 'hotelServicePropertyID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "HotelService" */
export type HotelService_Set_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type HotelService_Stddev_Fields = {
  __typename?: 'HotelService_stddev_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "HotelService" */
export type HotelService_Stddev_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type HotelService_Stddev_Pop_Fields = {
  __typename?: 'HotelService_stddev_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "HotelService" */
export type HotelService_Stddev_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type HotelService_Stddev_Samp_Fields = {
  __typename?: 'HotelService_stddev_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "HotelService" */
export type HotelService_Stddev_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type HotelService_Sum_Fields = {
  __typename?: 'HotelService_sum_fields';
  hotelID?: Maybe<Scalars['Int']>;
  hotelServiceHotelID?: Maybe<Scalars['Int']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "HotelService" */
export type HotelService_Sum_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** update columns of table "HotelService" */
export enum HotelService_Update_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  HotelServiceHotelId = 'hotelServiceHotelID',
  /** column name */
  HotelServicePropertyId = 'hotelServicePropertyID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type HotelService_Var_Pop_Fields = {
  __typename?: 'HotelService_var_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "HotelService" */
export type HotelService_Var_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type HotelService_Var_Samp_Fields = {
  __typename?: 'HotelService_var_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "HotelService" */
export type HotelService_Var_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type HotelService_Variance_Fields = {
  __typename?: 'HotelService_variance_fields';
  hotelID?: Maybe<Scalars['Float']>;
  hotelServiceHotelID?: Maybe<Scalars['Float']>;
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "HotelService" */
export type HotelService_Variance_Order_By = {
  hotelID?: Maybe<Order_By>;
  hotelServiceHotelID?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** columns and relationships of "HotelServiceProperty" */
export type HotelServiceProperty = {
  __typename?: 'HotelServiceProperty';
  /** An array relationship */
  HotelServices: Array<HotelService>;
  /** An aggregated array relationship */
  HotelServices_aggregate: HotelService_Aggregate;
  content: Scalars['String'];
  hotelServicePropertyID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
};


/** columns and relationships of "HotelServiceProperty" */
export type HotelServicePropertyHotelServicesArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** columns and relationships of "HotelServiceProperty" */
export type HotelServicePropertyHotelServices_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};

/** aggregated selection of "HotelServiceProperty" */
export type HotelServiceProperty_Aggregate = {
  __typename?: 'HotelServiceProperty_aggregate';
  aggregate?: Maybe<HotelServiceProperty_Aggregate_Fields>;
  nodes: Array<HotelServiceProperty>;
};

/** aggregate fields of "HotelServiceProperty" */
export type HotelServiceProperty_Aggregate_Fields = {
  __typename?: 'HotelServiceProperty_aggregate_fields';
  avg?: Maybe<HotelServiceProperty_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<HotelServiceProperty_Max_Fields>;
  min?: Maybe<HotelServiceProperty_Min_Fields>;
  stddev?: Maybe<HotelServiceProperty_Stddev_Fields>;
  stddev_pop?: Maybe<HotelServiceProperty_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<HotelServiceProperty_Stddev_Samp_Fields>;
  sum?: Maybe<HotelServiceProperty_Sum_Fields>;
  var_pop?: Maybe<HotelServiceProperty_Var_Pop_Fields>;
  var_samp?: Maybe<HotelServiceProperty_Var_Samp_Fields>;
  variance?: Maybe<HotelServiceProperty_Variance_Fields>;
};


/** aggregate fields of "HotelServiceProperty" */
export type HotelServiceProperty_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<HotelServiceProperty_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "HotelServiceProperty" */
export type HotelServiceProperty_Aggregate_Order_By = {
  avg?: Maybe<HotelServiceProperty_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<HotelServiceProperty_Max_Order_By>;
  min?: Maybe<HotelServiceProperty_Min_Order_By>;
  stddev?: Maybe<HotelServiceProperty_Stddev_Order_By>;
  stddev_pop?: Maybe<HotelServiceProperty_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<HotelServiceProperty_Stddev_Samp_Order_By>;
  sum?: Maybe<HotelServiceProperty_Sum_Order_By>;
  var_pop?: Maybe<HotelServiceProperty_Var_Pop_Order_By>;
  var_samp?: Maybe<HotelServiceProperty_Var_Samp_Order_By>;
  variance?: Maybe<HotelServiceProperty_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "HotelServiceProperty" */
export type HotelServiceProperty_Arr_Rel_Insert_Input = {
  data: Array<HotelServiceProperty_Insert_Input>;
  on_conflict?: Maybe<HotelServiceProperty_On_Conflict>;
};

/** aggregate avg on columns */
export type HotelServiceProperty_Avg_Fields = {
  __typename?: 'HotelServiceProperty_avg_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Avg_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "HotelServiceProperty". All fields are combined with a logical 'AND'. */
export type HotelServiceProperty_Bool_Exp = {
  HotelServices?: Maybe<HotelService_Bool_Exp>;
  _and?: Maybe<Array<Maybe<HotelServiceProperty_Bool_Exp>>>;
  _not?: Maybe<HotelServiceProperty_Bool_Exp>;
  _or?: Maybe<Array<Maybe<HotelServiceProperty_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  hotelServicePropertyID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "HotelServiceProperty" */
export enum HotelServiceProperty_Constraint {
  /** unique or primary key constraint */
  HotelServicePropertyPkey = 'HotelServiceProperty_pkey'
}

/** input type for incrementing integer columne in table "HotelServiceProperty" */
export type HotelServiceProperty_Inc_Input = {
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "HotelServiceProperty" */
export type HotelServiceProperty_Insert_Input = {
  HotelServices?: Maybe<HotelService_Arr_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type HotelServiceProperty_Max_Fields = {
  __typename?: 'HotelServiceProperty_max_fields';
  content?: Maybe<Scalars['String']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Max_Order_By = {
  content?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type HotelServiceProperty_Min_Fields = {
  __typename?: 'HotelServiceProperty_min_fields';
  content?: Maybe<Scalars['String']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Min_Order_By = {
  content?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** response of any mutation on the table "HotelServiceProperty" */
export type HotelServiceProperty_Mutation_Response = {
  __typename?: 'HotelServiceProperty_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<HotelServiceProperty>;
};

/** input type for inserting object relation for remote table "HotelServiceProperty" */
export type HotelServiceProperty_Obj_Rel_Insert_Input = {
  data: HotelServiceProperty_Insert_Input;
  on_conflict?: Maybe<HotelServiceProperty_On_Conflict>;
};

/** on conflict condition type for table "HotelServiceProperty" */
export type HotelServiceProperty_On_Conflict = {
  constraint: HotelServiceProperty_Constraint;
  update_columns: Array<HotelServiceProperty_Update_Column>;
  where?: Maybe<HotelServiceProperty_Bool_Exp>;
};

/** ordering options when selecting data from "HotelServiceProperty" */
export type HotelServiceProperty_Order_By = {
  HotelServices_aggregate?: Maybe<HotelService_Aggregate_Order_By>;
  content?: Maybe<Order_By>;
  hotelServicePropertyID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
};

/** select columns of table "HotelServiceProperty" */
export enum HotelServiceProperty_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  HotelServicePropertyId = 'hotelServicePropertyID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** input type for updating data in table "HotelServiceProperty" */
export type HotelServiceProperty_Set_Input = {
  content?: Maybe<Scalars['String']>;
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type HotelServiceProperty_Stddev_Fields = {
  __typename?: 'HotelServiceProperty_stddev_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Stddev_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type HotelServiceProperty_Stddev_Pop_Fields = {
  __typename?: 'HotelServiceProperty_stddev_pop_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Stddev_Pop_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type HotelServiceProperty_Stddev_Samp_Fields = {
  __typename?: 'HotelServiceProperty_stddev_samp_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Stddev_Samp_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type HotelServiceProperty_Sum_Fields = {
  __typename?: 'HotelServiceProperty_sum_fields';
  hotelServicePropertyID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Sum_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** update columns of table "HotelServiceProperty" */
export enum HotelServiceProperty_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  HotelServicePropertyId = 'hotelServicePropertyID',
  /** column name */
  IsDeleted = 'isDeleted'
}

/** aggregate var_pop on columns */
export type HotelServiceProperty_Var_Pop_Fields = {
  __typename?: 'HotelServiceProperty_var_pop_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Var_Pop_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type HotelServiceProperty_Var_Samp_Fields = {
  __typename?: 'HotelServiceProperty_var_samp_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Var_Samp_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type HotelServiceProperty_Variance_Fields = {
  __typename?: 'HotelServiceProperty_variance_fields';
  hotelServicePropertyID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "HotelServiceProperty" */
export type HotelServiceProperty_Variance_Order_By = {
  hotelServicePropertyID?: Maybe<Order_By>;
};


/** expression to compare columns of type inet. All fields are combined with logical 'AND'. */
export type Inet_Comparison_Exp = {
  _eq?: Maybe<Scalars['inet']>;
  _gt?: Maybe<Scalars['inet']>;
  _gte?: Maybe<Scalars['inet']>;
  _in?: Maybe<Array<Scalars['inet']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['inet']>;
  _lte?: Maybe<Scalars['inet']>;
  _neq?: Maybe<Scalars['inet']>;
  _nin?: Maybe<Array<Scalars['inet']>>;
};

/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

/** columns and relationships of "Location" */
export type Location = {
  __typename?: 'Location';
  /** An object relationship */
  Address?: Maybe<Address>;
  /** An array relationship */
  ArchSites: Array<ArchSite>;
  /** An aggregated array relationship */
  ArchSites_aggregate: ArchSite_Aggregate;
  /** An array relationship */
  Cities: Array<City>;
  /** An aggregated array relationship */
  Cities_aggregate: City_Aggregate;
  /** An array relationship */
  Companies: Array<Company>;
  /** An aggregated array relationship */
  Companies_aggregate: Company_Aggregate;
  /** An array relationship */
  Hotels: Array<Hotel>;
  /** An aggregated array relationship */
  Hotels_aggregate: Hotel_Aggregate;
  /** An array relationship */
  Museums: Array<Museum>;
  /** An aggregated array relationship */
  Museums_aggregate: Museum_Aggregate;
  /** An array relationship */
  Restaurants: Array<Restaurant>;
  /** An aggregated array relationship */
  Restaurants_aggregate: Restaurant_Aggregate;
  /** An array relationship */
  TravelGuideLocations: Array<TravelGuideLocation>;
  /** An aggregated array relationship */
  TravelGuideLocations_aggregate: TravelGuideLocation_Aggregate;
  addressID?: Maybe<Scalars['Int']>;
  isDeleted: Scalars['Boolean'];
  latitude: Scalars['Float'];
  locationID: Scalars['Int'];
  longtitude: Scalars['Float'];
};


/** columns and relationships of "Location" */
export type LocationArchSitesArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationCitiesArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationCities_AggregateArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationCompaniesArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationCompanies_AggregateArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationHotelsArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationHotels_AggregateArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationMuseumsArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationRestaurantsArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationRestaurants_AggregateArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationTravelGuideLocationsArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** columns and relationships of "Location" */
export type LocationTravelGuideLocations_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};

/** aggregated selection of "Location" */
export type Location_Aggregate = {
  __typename?: 'Location_aggregate';
  aggregate?: Maybe<Location_Aggregate_Fields>;
  nodes: Array<Location>;
};

/** aggregate fields of "Location" */
export type Location_Aggregate_Fields = {
  __typename?: 'Location_aggregate_fields';
  avg?: Maybe<Location_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Location_Max_Fields>;
  min?: Maybe<Location_Min_Fields>;
  stddev?: Maybe<Location_Stddev_Fields>;
  stddev_pop?: Maybe<Location_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Location_Stddev_Samp_Fields>;
  sum?: Maybe<Location_Sum_Fields>;
  var_pop?: Maybe<Location_Var_Pop_Fields>;
  var_samp?: Maybe<Location_Var_Samp_Fields>;
  variance?: Maybe<Location_Variance_Fields>;
};


/** aggregate fields of "Location" */
export type Location_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Location_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Location" */
export type Location_Aggregate_Order_By = {
  avg?: Maybe<Location_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Location_Max_Order_By>;
  min?: Maybe<Location_Min_Order_By>;
  stddev?: Maybe<Location_Stddev_Order_By>;
  stddev_pop?: Maybe<Location_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Location_Stddev_Samp_Order_By>;
  sum?: Maybe<Location_Sum_Order_By>;
  var_pop?: Maybe<Location_Var_Pop_Order_By>;
  var_samp?: Maybe<Location_Var_Samp_Order_By>;
  variance?: Maybe<Location_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Location" */
export type Location_Arr_Rel_Insert_Input = {
  data: Array<Location_Insert_Input>;
  on_conflict?: Maybe<Location_On_Conflict>;
};

/** aggregate avg on columns */
export type Location_Avg_Fields = {
  __typename?: 'Location_avg_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Location" */
export type Location_Avg_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Location". All fields are combined with a logical 'AND'. */
export type Location_Bool_Exp = {
  Address?: Maybe<Address_Bool_Exp>;
  ArchSites?: Maybe<ArchSite_Bool_Exp>;
  Cities?: Maybe<City_Bool_Exp>;
  Companies?: Maybe<Company_Bool_Exp>;
  Hotels?: Maybe<Hotel_Bool_Exp>;
  Museums?: Maybe<Museum_Bool_Exp>;
  Restaurants?: Maybe<Restaurant_Bool_Exp>;
  TravelGuideLocations?: Maybe<TravelGuideLocation_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Location_Bool_Exp>>>;
  _not?: Maybe<Location_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Location_Bool_Exp>>>;
  addressID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  latitude?: Maybe<Float_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  longtitude?: Maybe<Float_Comparison_Exp>;
};

/** unique or primary key constraints on table "Location" */
export enum Location_Constraint {
  /** unique or primary key constraint */
  LocationPkey = 'Location_pkey'
}

/** input type for incrementing integer columne in table "Location" */
export type Location_Inc_Input = {
  addressID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Location" */
export type Location_Insert_Input = {
  Address?: Maybe<Address_Obj_Rel_Insert_Input>;
  ArchSites?: Maybe<ArchSite_Arr_Rel_Insert_Input>;
  Cities?: Maybe<City_Arr_Rel_Insert_Input>;
  Companies?: Maybe<Company_Arr_Rel_Insert_Input>;
  Hotels?: Maybe<Hotel_Arr_Rel_Insert_Input>;
  Museums?: Maybe<Museum_Arr_Rel_Insert_Input>;
  Restaurants?: Maybe<Restaurant_Arr_Rel_Insert_Input>;
  TravelGuideLocations?: Maybe<TravelGuideLocation_Arr_Rel_Insert_Input>;
  addressID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** aggregate max on columns */
export type Location_Max_Fields = {
  __typename?: 'Location_max_fields';
  addressID?: Maybe<Scalars['Int']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by max() on columns of table "Location" */
export type Location_Max_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Location_Min_Fields = {
  __typename?: 'Location_min_fields';
  addressID?: Maybe<Scalars['Int']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by min() on columns of table "Location" */
export type Location_Min_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** response of any mutation on the table "Location" */
export type Location_Mutation_Response = {
  __typename?: 'Location_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Location>;
};

/** input type for inserting object relation for remote table "Location" */
export type Location_Obj_Rel_Insert_Input = {
  data: Location_Insert_Input;
  on_conflict?: Maybe<Location_On_Conflict>;
};

/** on conflict condition type for table "Location" */
export type Location_On_Conflict = {
  constraint: Location_Constraint;
  update_columns: Array<Location_Update_Column>;
  where?: Maybe<Location_Bool_Exp>;
};

/** ordering options when selecting data from "Location" */
export type Location_Order_By = {
  Address?: Maybe<Address_Order_By>;
  ArchSites_aggregate?: Maybe<ArchSite_Aggregate_Order_By>;
  Cities_aggregate?: Maybe<City_Aggregate_Order_By>;
  Companies_aggregate?: Maybe<Company_Aggregate_Order_By>;
  Hotels_aggregate?: Maybe<Hotel_Aggregate_Order_By>;
  Museums_aggregate?: Maybe<Museum_Aggregate_Order_By>;
  Restaurants_aggregate?: Maybe<Restaurant_Aggregate_Order_By>;
  TravelGuideLocations_aggregate?: Maybe<TravelGuideLocation_Aggregate_Order_By>;
  addressID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** select columns of table "Location" */
export enum Location_Select_Column {
  /** column name */
  AddressId = 'addressID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Longtitude = 'longtitude'
}

/** input type for updating data in table "Location" */
export type Location_Set_Input = {
  addressID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** aggregate stddev on columns */
export type Location_Stddev_Fields = {
  __typename?: 'Location_stddev_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Location" */
export type Location_Stddev_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Location_Stddev_Pop_Fields = {
  __typename?: 'Location_stddev_pop_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Location" */
export type Location_Stddev_Pop_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Location_Stddev_Samp_Fields = {
  __typename?: 'Location_stddev_samp_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Location" */
export type Location_Stddev_Samp_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Location_Sum_Fields = {
  __typename?: 'Location_sum_fields';
  addressID?: Maybe<Scalars['Int']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Int']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "Location" */
export type Location_Sum_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** update columns of table "Location" */
export enum Location_Update_Column {
  /** column name */
  AddressId = 'addressID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Latitude = 'latitude',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Longtitude = 'longtitude'
}

/** aggregate var_pop on columns */
export type Location_Var_Pop_Fields = {
  __typename?: 'Location_var_pop_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Location" */
export type Location_Var_Pop_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Location_Var_Samp_Fields = {
  __typename?: 'Location_var_samp_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Location" */
export type Location_Var_Samp_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Location_Variance_Fields = {
  __typename?: 'Location_variance_fields';
  addressID?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  longtitude?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Location" */
export type Location_Variance_Order_By = {
  addressID?: Maybe<Order_By>;
  latitude?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  longtitude?: Maybe<Order_By>;
};

/** columns and relationships of "LoginType" */
export type LoginType = {
  __typename?: 'LoginType';
  /** An array relationship */
  Users: Array<User>;
  /** An aggregated array relationship */
  Users_aggregate: User_Aggregate;
  isDeleted: Scalars['Boolean'];
  loginTypeID: Scalars['Int'];
  type: Scalars['String'];
};


/** columns and relationships of "LoginType" */
export type LoginTypeUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "LoginType" */
export type LoginTypeUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** aggregated selection of "LoginType" */
export type LoginType_Aggregate = {
  __typename?: 'LoginType_aggregate';
  aggregate?: Maybe<LoginType_Aggregate_Fields>;
  nodes: Array<LoginType>;
};

/** aggregate fields of "LoginType" */
export type LoginType_Aggregate_Fields = {
  __typename?: 'LoginType_aggregate_fields';
  avg?: Maybe<LoginType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<LoginType_Max_Fields>;
  min?: Maybe<LoginType_Min_Fields>;
  stddev?: Maybe<LoginType_Stddev_Fields>;
  stddev_pop?: Maybe<LoginType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<LoginType_Stddev_Samp_Fields>;
  sum?: Maybe<LoginType_Sum_Fields>;
  var_pop?: Maybe<LoginType_Var_Pop_Fields>;
  var_samp?: Maybe<LoginType_Var_Samp_Fields>;
  variance?: Maybe<LoginType_Variance_Fields>;
};


/** aggregate fields of "LoginType" */
export type LoginType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<LoginType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "LoginType" */
export type LoginType_Aggregate_Order_By = {
  avg?: Maybe<LoginType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<LoginType_Max_Order_By>;
  min?: Maybe<LoginType_Min_Order_By>;
  stddev?: Maybe<LoginType_Stddev_Order_By>;
  stddev_pop?: Maybe<LoginType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<LoginType_Stddev_Samp_Order_By>;
  sum?: Maybe<LoginType_Sum_Order_By>;
  var_pop?: Maybe<LoginType_Var_Pop_Order_By>;
  var_samp?: Maybe<LoginType_Var_Samp_Order_By>;
  variance?: Maybe<LoginType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "LoginType" */
export type LoginType_Arr_Rel_Insert_Input = {
  data: Array<LoginType_Insert_Input>;
  on_conflict?: Maybe<LoginType_On_Conflict>;
};

/** aggregate avg on columns */
export type LoginType_Avg_Fields = {
  __typename?: 'LoginType_avg_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "LoginType" */
export type LoginType_Avg_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "LoginType". All fields are combined with a logical 'AND'. */
export type LoginType_Bool_Exp = {
  Users?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<LoginType_Bool_Exp>>>;
  _not?: Maybe<LoginType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<LoginType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  loginTypeID?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "LoginType" */
export enum LoginType_Constraint {
  /** unique or primary key constraint */
  LoginTypePkey = 'LoginType_pkey'
}

/** input type for incrementing integer columne in table "LoginType" */
export type LoginType_Inc_Input = {
  loginTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "LoginType" */
export type LoginType_Insert_Input = {
  Users?: Maybe<User_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type LoginType_Max_Fields = {
  __typename?: 'LoginType_max_fields';
  loginTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "LoginType" */
export type LoginType_Max_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type LoginType_Min_Fields = {
  __typename?: 'LoginType_min_fields';
  loginTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "LoginType" */
export type LoginType_Min_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "LoginType" */
export type LoginType_Mutation_Response = {
  __typename?: 'LoginType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<LoginType>;
};

/** input type for inserting object relation for remote table "LoginType" */
export type LoginType_Obj_Rel_Insert_Input = {
  data: LoginType_Insert_Input;
  on_conflict?: Maybe<LoginType_On_Conflict>;
};

/** on conflict condition type for table "LoginType" */
export type LoginType_On_Conflict = {
  constraint: LoginType_Constraint;
  update_columns: Array<LoginType_Update_Column>;
  where?: Maybe<LoginType_Bool_Exp>;
};

/** ordering options when selecting data from "LoginType" */
export type LoginType_Order_By = {
  Users_aggregate?: Maybe<User_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  loginTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** select columns of table "LoginType" */
export enum LoginType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LoginTypeId = 'loginTypeID',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "LoginType" */
export type LoginType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type LoginType_Stddev_Fields = {
  __typename?: 'LoginType_stddev_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "LoginType" */
export type LoginType_Stddev_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type LoginType_Stddev_Pop_Fields = {
  __typename?: 'LoginType_stddev_pop_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "LoginType" */
export type LoginType_Stddev_Pop_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type LoginType_Stddev_Samp_Fields = {
  __typename?: 'LoginType_stddev_samp_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "LoginType" */
export type LoginType_Stddev_Samp_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type LoginType_Sum_Fields = {
  __typename?: 'LoginType_sum_fields';
  loginTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "LoginType" */
export type LoginType_Sum_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** update columns of table "LoginType" */
export enum LoginType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LoginTypeId = 'loginTypeID',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type LoginType_Var_Pop_Fields = {
  __typename?: 'LoginType_var_pop_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "LoginType" */
export type LoginType_Var_Pop_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type LoginType_Var_Samp_Fields = {
  __typename?: 'LoginType_var_samp_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "LoginType" */
export type LoginType_Var_Samp_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type LoginType_Variance_Fields = {
  __typename?: 'LoginType_variance_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "LoginType" */
export type LoginType_Variance_Order_By = {
  loginTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "Museum" */
export type Museum = {
  __typename?: 'Museum';
  /** An object relationship */
  Company: Company;
  /** An object relationship */
  Location: Location;
  /** An array relationship */
  MuseumComments: Array<MuseumComment>;
  /** An aggregated array relationship */
  MuseumComments_aggregate: MuseumComment_Aggregate;
  /** An array relationship */
  MuseumPrices: Array<MuseumPrice>;
  /** An aggregated array relationship */
  MuseumPrices_aggregate: MuseumPrice_Aggregate;
  /** An array relationship */
  MuseumTypeMuseums: Array<MuseumTypeMuseum>;
  /** An aggregated array relationship */
  MuseumTypeMuseums_aggregate: MuseumTypeMuseum_Aggregate;
  /** An array relationship */
  MuseumWorkingSchedules: Array<MuseumWorkingSchedule>;
  /** An aggregated array relationship */
  MuseumWorkingSchedules_aggregate: MuseumWorkingSchedule_Aggregate;
  /** An array relationship */
  TravelGuideMuseums: Array<TravelGuideMuseum>;
  /** An aggregated array relationship */
  TravelGuideMuseums_aggregate: TravelGuideMuseum_Aggregate;
  averageTime?: Maybe<Scalars['Int']>;
  companyID: Scalars['Int'];
  description: Scalars['String'];
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  museumID: Scalars['Int'];
  name: Scalars['String'];
};


/** columns and relationships of "Museum" */
export type MuseumMuseumCommentsArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumComments_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumPricesArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumPrices_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumTypeMuseumsArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumTypeMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumWorkingSchedulesArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumMuseumWorkingSchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumTravelGuideMuseumsArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** columns and relationships of "Museum" */
export type MuseumTravelGuideMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};

/** aggregated selection of "Museum" */
export type Museum_Aggregate = {
  __typename?: 'Museum_aggregate';
  aggregate?: Maybe<Museum_Aggregate_Fields>;
  nodes: Array<Museum>;
};

/** aggregate fields of "Museum" */
export type Museum_Aggregate_Fields = {
  __typename?: 'Museum_aggregate_fields';
  avg?: Maybe<Museum_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Museum_Max_Fields>;
  min?: Maybe<Museum_Min_Fields>;
  stddev?: Maybe<Museum_Stddev_Fields>;
  stddev_pop?: Maybe<Museum_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Museum_Stddev_Samp_Fields>;
  sum?: Maybe<Museum_Sum_Fields>;
  var_pop?: Maybe<Museum_Var_Pop_Fields>;
  var_samp?: Maybe<Museum_Var_Samp_Fields>;
  variance?: Maybe<Museum_Variance_Fields>;
};


/** aggregate fields of "Museum" */
export type Museum_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Museum_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Museum" */
export type Museum_Aggregate_Order_By = {
  avg?: Maybe<Museum_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Museum_Max_Order_By>;
  min?: Maybe<Museum_Min_Order_By>;
  stddev?: Maybe<Museum_Stddev_Order_By>;
  stddev_pop?: Maybe<Museum_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Museum_Stddev_Samp_Order_By>;
  sum?: Maybe<Museum_Sum_Order_By>;
  var_pop?: Maybe<Museum_Var_Pop_Order_By>;
  var_samp?: Maybe<Museum_Var_Samp_Order_By>;
  variance?: Maybe<Museum_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Museum" */
export type Museum_Arr_Rel_Insert_Input = {
  data: Array<Museum_Insert_Input>;
  on_conflict?: Maybe<Museum_On_Conflict>;
};

/** aggregate avg on columns */
export type Museum_Avg_Fields = {
  __typename?: 'Museum_avg_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Museum" */
export type Museum_Avg_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Museum". All fields are combined with a logical 'AND'. */
export type Museum_Bool_Exp = {
  Company?: Maybe<Company_Bool_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  MuseumComments?: Maybe<MuseumComment_Bool_Exp>;
  MuseumPrices?: Maybe<MuseumPrice_Bool_Exp>;
  MuseumTypeMuseums?: Maybe<MuseumTypeMuseum_Bool_Exp>;
  MuseumWorkingSchedules?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
  TravelGuideMuseums?: Maybe<TravelGuideMuseum_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Museum_Bool_Exp>>>;
  _not?: Maybe<Museum_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Museum_Bool_Exp>>>;
  averageTime?: Maybe<Int_Comparison_Exp>;
  companyID?: Maybe<Int_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Museum" */
export enum Museum_Constraint {
  /** unique or primary key constraint */
  MuseumPkey = 'Museum_pkey'
}

/** input type for incrementing integer columne in table "Museum" */
export type Museum_Inc_Input = {
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Museum" */
export type Museum_Insert_Input = {
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  MuseumComments?: Maybe<MuseumComment_Arr_Rel_Insert_Input>;
  MuseumPrices?: Maybe<MuseumPrice_Arr_Rel_Insert_Input>;
  MuseumTypeMuseums?: Maybe<MuseumTypeMuseum_Arr_Rel_Insert_Input>;
  MuseumWorkingSchedules?: Maybe<MuseumWorkingSchedule_Arr_Rel_Insert_Input>;
  TravelGuideMuseums?: Maybe<TravelGuideMuseum_Arr_Rel_Insert_Input>;
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Museum_Max_Fields = {
  __typename?: 'Museum_max_fields';
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Museum" */
export type Museum_Max_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Museum_Min_Fields = {
  __typename?: 'Museum_min_fields';
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Museum" */
export type Museum_Min_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** response of any mutation on the table "Museum" */
export type Museum_Mutation_Response = {
  __typename?: 'Museum_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Museum>;
};

/** input type for inserting object relation for remote table "Museum" */
export type Museum_Obj_Rel_Insert_Input = {
  data: Museum_Insert_Input;
  on_conflict?: Maybe<Museum_On_Conflict>;
};

/** on conflict condition type for table "Museum" */
export type Museum_On_Conflict = {
  constraint: Museum_Constraint;
  update_columns: Array<Museum_Update_Column>;
  where?: Maybe<Museum_Bool_Exp>;
};

/** ordering options when selecting data from "Museum" */
export type Museum_Order_By = {
  Company?: Maybe<Company_Order_By>;
  Location?: Maybe<Location_Order_By>;
  MuseumComments_aggregate?: Maybe<MuseumComment_Aggregate_Order_By>;
  MuseumPrices_aggregate?: Maybe<MuseumPrice_Aggregate_Order_By>;
  MuseumTypeMuseums_aggregate?: Maybe<MuseumTypeMuseum_Aggregate_Order_By>;
  MuseumWorkingSchedules_aggregate?: Maybe<MuseumWorkingSchedule_Aggregate_Order_By>;
  TravelGuideMuseums_aggregate?: Maybe<TravelGuideMuseum_Aggregate_Order_By>;
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
};

/** select columns of table "Museum" */
export enum Museum_Select_Column {
  /** column name */
  AverageTime = 'averageTime',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "Museum" */
export type Museum_Set_Input = {
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Museum_Stddev_Fields = {
  __typename?: 'Museum_stddev_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Museum" */
export type Museum_Stddev_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Museum_Stddev_Pop_Fields = {
  __typename?: 'Museum_stddev_pop_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Museum" */
export type Museum_Stddev_Pop_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Museum_Stddev_Samp_Fields = {
  __typename?: 'Museum_stddev_samp_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Museum" */
export type Museum_Stddev_Samp_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Museum_Sum_Fields = {
  __typename?: 'Museum_sum_fields';
  averageTime?: Maybe<Scalars['Int']>;
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Museum" */
export type Museum_Sum_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** update columns of table "Museum" */
export enum Museum_Update_Column {
  /** column name */
  AverageTime = 'averageTime',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  Description = 'description',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Name = 'name'
}

/** aggregate var_pop on columns */
export type Museum_Var_Pop_Fields = {
  __typename?: 'Museum_var_pop_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Museum" */
export type Museum_Var_Pop_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Museum_Var_Samp_Fields = {
  __typename?: 'Museum_var_samp_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Museum" */
export type Museum_Var_Samp_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Museum_Variance_Fields = {
  __typename?: 'Museum_variance_fields';
  averageTime?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Museum" */
export type Museum_Variance_Order_By = {
  averageTime?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumComment" */
export type MuseumComment = {
  __typename?: 'MuseumComment';
  /** An object relationship */
  Museum: Museum;
  /** An object relationship */
  User: User;
  content: Scalars['String'];
  date: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  museumCommentID: Scalars['Int'];
  museumID: Scalars['Int'];
  star: Scalars['Float'];
  userID: Scalars['Int'];
};

/** aggregated selection of "MuseumComment" */
export type MuseumComment_Aggregate = {
  __typename?: 'MuseumComment_aggregate';
  aggregate?: Maybe<MuseumComment_Aggregate_Fields>;
  nodes: Array<MuseumComment>;
};

/** aggregate fields of "MuseumComment" */
export type MuseumComment_Aggregate_Fields = {
  __typename?: 'MuseumComment_aggregate_fields';
  avg?: Maybe<MuseumComment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumComment_Max_Fields>;
  min?: Maybe<MuseumComment_Min_Fields>;
  stddev?: Maybe<MuseumComment_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumComment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumComment_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumComment_Sum_Fields>;
  var_pop?: Maybe<MuseumComment_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumComment_Var_Samp_Fields>;
  variance?: Maybe<MuseumComment_Variance_Fields>;
};


/** aggregate fields of "MuseumComment" */
export type MuseumComment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumComment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumComment" */
export type MuseumComment_Aggregate_Order_By = {
  avg?: Maybe<MuseumComment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumComment_Max_Order_By>;
  min?: Maybe<MuseumComment_Min_Order_By>;
  stddev?: Maybe<MuseumComment_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumComment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumComment_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumComment_Sum_Order_By>;
  var_pop?: Maybe<MuseumComment_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumComment_Var_Samp_Order_By>;
  variance?: Maybe<MuseumComment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumComment" */
export type MuseumComment_Arr_Rel_Insert_Input = {
  data: Array<MuseumComment_Insert_Input>;
  on_conflict?: Maybe<MuseumComment_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumComment_Avg_Fields = {
  __typename?: 'MuseumComment_avg_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumComment" */
export type MuseumComment_Avg_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumComment". All fields are combined with a logical 'AND'. */
export type MuseumComment_Bool_Exp = {
  Museum?: Maybe<Museum_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumComment_Bool_Exp>>>;
  _not?: Maybe<MuseumComment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumComment_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumCommentID?: Maybe<Int_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumComment" */
export enum MuseumComment_Constraint {
  /** unique or primary key constraint */
  MuseumCommentPkey = 'MuseumComment_pkey'
}

/** input type for incrementing integer columne in table "MuseumComment" */
export type MuseumComment_Inc_Input = {
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumComment" */
export type MuseumComment_Insert_Input = {
  Museum?: Maybe<Museum_Obj_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type MuseumComment_Max_Fields = {
  __typename?: 'MuseumComment_max_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "MuseumComment" */
export type MuseumComment_Max_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumComment_Min_Fields = {
  __typename?: 'MuseumComment_min_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "MuseumComment" */
export type MuseumComment_Min_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumComment" */
export type MuseumComment_Mutation_Response = {
  __typename?: 'MuseumComment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumComment>;
};

/** input type for inserting object relation for remote table "MuseumComment" */
export type MuseumComment_Obj_Rel_Insert_Input = {
  data: MuseumComment_Insert_Input;
  on_conflict?: Maybe<MuseumComment_On_Conflict>;
};

/** on conflict condition type for table "MuseumComment" */
export type MuseumComment_On_Conflict = {
  constraint: MuseumComment_Constraint;
  update_columns: Array<MuseumComment_Update_Column>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumComment" */
export type MuseumComment_Order_By = {
  Museum?: Maybe<Museum_Order_By>;
  User?: Maybe<User_Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "MuseumComment" */
export enum MuseumComment_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumCommentId = 'museumCommentID',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "MuseumComment" */
export type MuseumComment_Set_Input = {
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type MuseumComment_Stddev_Fields = {
  __typename?: 'MuseumComment_stddev_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumComment" */
export type MuseumComment_Stddev_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumComment_Stddev_Pop_Fields = {
  __typename?: 'MuseumComment_stddev_pop_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumComment" */
export type MuseumComment_Stddev_Pop_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumComment_Stddev_Samp_Fields = {
  __typename?: 'MuseumComment_stddev_samp_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumComment" */
export type MuseumComment_Stddev_Samp_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumComment_Sum_Fields = {
  __typename?: 'MuseumComment_sum_fields';
  museumCommentID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumComment" */
export type MuseumComment_Sum_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "MuseumComment" */
export enum MuseumComment_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumCommentId = 'museumCommentID',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type MuseumComment_Var_Pop_Fields = {
  __typename?: 'MuseumComment_var_pop_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumComment" */
export type MuseumComment_Var_Pop_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumComment_Var_Samp_Fields = {
  __typename?: 'MuseumComment_var_samp_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumComment" */
export type MuseumComment_Var_Samp_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumComment_Variance_Fields = {
  __typename?: 'MuseumComment_variance_fields';
  museumCommentID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumComment" */
export type MuseumComment_Variance_Order_By = {
  museumCommentID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumEntranceType" */
export type MuseumEntranceType = {
  __typename?: 'MuseumEntranceType';
  /** An array relationship */
  MuseumPrices: Array<MuseumPrice>;
  /** An aggregated array relationship */
  MuseumPrices_aggregate: MuseumPrice_Aggregate;
  content: Scalars['String'];
  isDeleted: Scalars['Boolean'];
  museumEntranceTypeID: Scalars['Int'];
};


/** columns and relationships of "MuseumEntranceType" */
export type MuseumEntranceTypeMuseumPricesArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** columns and relationships of "MuseumEntranceType" */
export type MuseumEntranceTypeMuseumPrices_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};

/** aggregated selection of "MuseumEntranceType" */
export type MuseumEntranceType_Aggregate = {
  __typename?: 'MuseumEntranceType_aggregate';
  aggregate?: Maybe<MuseumEntranceType_Aggregate_Fields>;
  nodes: Array<MuseumEntranceType>;
};

/** aggregate fields of "MuseumEntranceType" */
export type MuseumEntranceType_Aggregate_Fields = {
  __typename?: 'MuseumEntranceType_aggregate_fields';
  avg?: Maybe<MuseumEntranceType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumEntranceType_Max_Fields>;
  min?: Maybe<MuseumEntranceType_Min_Fields>;
  stddev?: Maybe<MuseumEntranceType_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumEntranceType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumEntranceType_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumEntranceType_Sum_Fields>;
  var_pop?: Maybe<MuseumEntranceType_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumEntranceType_Var_Samp_Fields>;
  variance?: Maybe<MuseumEntranceType_Variance_Fields>;
};


/** aggregate fields of "MuseumEntranceType" */
export type MuseumEntranceType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumEntranceType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumEntranceType" */
export type MuseumEntranceType_Aggregate_Order_By = {
  avg?: Maybe<MuseumEntranceType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumEntranceType_Max_Order_By>;
  min?: Maybe<MuseumEntranceType_Min_Order_By>;
  stddev?: Maybe<MuseumEntranceType_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumEntranceType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumEntranceType_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumEntranceType_Sum_Order_By>;
  var_pop?: Maybe<MuseumEntranceType_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumEntranceType_Var_Samp_Order_By>;
  variance?: Maybe<MuseumEntranceType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumEntranceType" */
export type MuseumEntranceType_Arr_Rel_Insert_Input = {
  data: Array<MuseumEntranceType_Insert_Input>;
  on_conflict?: Maybe<MuseumEntranceType_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumEntranceType_Avg_Fields = {
  __typename?: 'MuseumEntranceType_avg_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Avg_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumEntranceType". All fields are combined with a logical 'AND'. */
export type MuseumEntranceType_Bool_Exp = {
  MuseumPrices?: Maybe<MuseumPrice_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumEntranceType_Bool_Exp>>>;
  _not?: Maybe<MuseumEntranceType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumEntranceType_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumEntranceTypeID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumEntranceType" */
export enum MuseumEntranceType_Constraint {
  /** unique or primary key constraint */
  MuseumEntranceTypePkey = 'MuseumEntranceType_pkey'
}

/** input type for incrementing integer columne in table "MuseumEntranceType" */
export type MuseumEntranceType_Inc_Input = {
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumEntranceType" */
export type MuseumEntranceType_Insert_Input = {
  MuseumPrices?: Maybe<MuseumPrice_Arr_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type MuseumEntranceType_Max_Fields = {
  __typename?: 'MuseumEntranceType_max_fields';
  content?: Maybe<Scalars['String']>;
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Max_Order_By = {
  content?: Maybe<Order_By>;
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumEntranceType_Min_Fields = {
  __typename?: 'MuseumEntranceType_min_fields';
  content?: Maybe<Scalars['String']>;
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Min_Order_By = {
  content?: Maybe<Order_By>;
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumEntranceType" */
export type MuseumEntranceType_Mutation_Response = {
  __typename?: 'MuseumEntranceType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumEntranceType>;
};

/** input type for inserting object relation for remote table "MuseumEntranceType" */
export type MuseumEntranceType_Obj_Rel_Insert_Input = {
  data: MuseumEntranceType_Insert_Input;
  on_conflict?: Maybe<MuseumEntranceType_On_Conflict>;
};

/** on conflict condition type for table "MuseumEntranceType" */
export type MuseumEntranceType_On_Conflict = {
  constraint: MuseumEntranceType_Constraint;
  update_columns: Array<MuseumEntranceType_Update_Column>;
  where?: Maybe<MuseumEntranceType_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumEntranceType" */
export type MuseumEntranceType_Order_By = {
  MuseumPrices_aggregate?: Maybe<MuseumPrice_Aggregate_Order_By>;
  content?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** select columns of table "MuseumEntranceType" */
export enum MuseumEntranceType_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumEntranceTypeId = 'museumEntranceTypeID'
}

/** input type for updating data in table "MuseumEntranceType" */
export type MuseumEntranceType_Set_Input = {
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type MuseumEntranceType_Stddev_Fields = {
  __typename?: 'MuseumEntranceType_stddev_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Stddev_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumEntranceType_Stddev_Pop_Fields = {
  __typename?: 'MuseumEntranceType_stddev_pop_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Stddev_Pop_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumEntranceType_Stddev_Samp_Fields = {
  __typename?: 'MuseumEntranceType_stddev_samp_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Stddev_Samp_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumEntranceType_Sum_Fields = {
  __typename?: 'MuseumEntranceType_sum_fields';
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Sum_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** update columns of table "MuseumEntranceType" */
export enum MuseumEntranceType_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumEntranceTypeId = 'museumEntranceTypeID'
}

/** aggregate var_pop on columns */
export type MuseumEntranceType_Var_Pop_Fields = {
  __typename?: 'MuseumEntranceType_var_pop_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Var_Pop_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumEntranceType_Var_Samp_Fields = {
  __typename?: 'MuseumEntranceType_var_samp_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Var_Samp_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumEntranceType_Variance_Fields = {
  __typename?: 'MuseumEntranceType_variance_fields';
  museumEntranceTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumEntranceType" */
export type MuseumEntranceType_Variance_Order_By = {
  museumEntranceTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumPrice" */
export type MuseumPrice = {
  __typename?: 'MuseumPrice';
  /** An object relationship */
  Museum: Museum;
  /** An object relationship */
  MuseumEntranceType: MuseumEntranceType;
  entranceTypeID: Scalars['Int'];
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  museumID: Scalars['Int'];
  museumPriceID: Scalars['Int'];
  price: Scalars['Float'];
  startDate: Scalars['timestamptz'];
};

/** aggregated selection of "MuseumPrice" */
export type MuseumPrice_Aggregate = {
  __typename?: 'MuseumPrice_aggregate';
  aggregate?: Maybe<MuseumPrice_Aggregate_Fields>;
  nodes: Array<MuseumPrice>;
};

/** aggregate fields of "MuseumPrice" */
export type MuseumPrice_Aggregate_Fields = {
  __typename?: 'MuseumPrice_aggregate_fields';
  avg?: Maybe<MuseumPrice_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumPrice_Max_Fields>;
  min?: Maybe<MuseumPrice_Min_Fields>;
  stddev?: Maybe<MuseumPrice_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumPrice_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumPrice_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumPrice_Sum_Fields>;
  var_pop?: Maybe<MuseumPrice_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumPrice_Var_Samp_Fields>;
  variance?: Maybe<MuseumPrice_Variance_Fields>;
};


/** aggregate fields of "MuseumPrice" */
export type MuseumPrice_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumPrice_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumPrice" */
export type MuseumPrice_Aggregate_Order_By = {
  avg?: Maybe<MuseumPrice_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumPrice_Max_Order_By>;
  min?: Maybe<MuseumPrice_Min_Order_By>;
  stddev?: Maybe<MuseumPrice_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumPrice_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumPrice_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumPrice_Sum_Order_By>;
  var_pop?: Maybe<MuseumPrice_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumPrice_Var_Samp_Order_By>;
  variance?: Maybe<MuseumPrice_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumPrice" */
export type MuseumPrice_Arr_Rel_Insert_Input = {
  data: Array<MuseumPrice_Insert_Input>;
  on_conflict?: Maybe<MuseumPrice_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumPrice_Avg_Fields = {
  __typename?: 'MuseumPrice_avg_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumPrice" */
export type MuseumPrice_Avg_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumPrice". All fields are combined with a logical 'AND'. */
export type MuseumPrice_Bool_Exp = {
  Museum?: Maybe<Museum_Bool_Exp>;
  MuseumEntranceType?: Maybe<MuseumEntranceType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumPrice_Bool_Exp>>>;
  _not?: Maybe<MuseumPrice_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumPrice_Bool_Exp>>>;
  entranceTypeID?: Maybe<Int_Comparison_Exp>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  museumPriceID?: Maybe<Int_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumPrice" */
export enum MuseumPrice_Constraint {
  /** unique or primary key constraint */
  MuseumPricePkey = 'MuseumPrice_pkey'
}

/** input type for incrementing integer columne in table "MuseumPrice" */
export type MuseumPrice_Inc_Input = {
  entranceTypeID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumPrice" */
export type MuseumPrice_Insert_Input = {
  Museum?: Maybe<Museum_Obj_Rel_Insert_Input>;
  MuseumEntranceType?: Maybe<MuseumEntranceType_Obj_Rel_Insert_Input>;
  entranceTypeID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type MuseumPrice_Max_Fields = {
  __typename?: 'MuseumPrice_max_fields';
  entranceTypeID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "MuseumPrice" */
export type MuseumPrice_Max_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumPrice_Min_Fields = {
  __typename?: 'MuseumPrice_min_fields';
  entranceTypeID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "MuseumPrice" */
export type MuseumPrice_Min_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumPrice" */
export type MuseumPrice_Mutation_Response = {
  __typename?: 'MuseumPrice_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumPrice>;
};

/** input type for inserting object relation for remote table "MuseumPrice" */
export type MuseumPrice_Obj_Rel_Insert_Input = {
  data: MuseumPrice_Insert_Input;
  on_conflict?: Maybe<MuseumPrice_On_Conflict>;
};

/** on conflict condition type for table "MuseumPrice" */
export type MuseumPrice_On_Conflict = {
  constraint: MuseumPrice_Constraint;
  update_columns: Array<MuseumPrice_Update_Column>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumPrice" */
export type MuseumPrice_Order_By = {
  Museum?: Maybe<Museum_Order_By>;
  MuseumEntranceType?: Maybe<MuseumEntranceType_Order_By>;
  entranceTypeID?: Maybe<Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "MuseumPrice" */
export enum MuseumPrice_Select_Column {
  /** column name */
  EntranceTypeId = 'entranceTypeID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumPriceId = 'museumPriceID',
  /** column name */
  Price = 'price',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "MuseumPrice" */
export type MuseumPrice_Set_Input = {
  entranceTypeID?: Maybe<Scalars['Int']>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type MuseumPrice_Stddev_Fields = {
  __typename?: 'MuseumPrice_stddev_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumPrice" */
export type MuseumPrice_Stddev_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumPrice_Stddev_Pop_Fields = {
  __typename?: 'MuseumPrice_stddev_pop_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumPrice" */
export type MuseumPrice_Stddev_Pop_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumPrice_Stddev_Samp_Fields = {
  __typename?: 'MuseumPrice_stddev_samp_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumPrice" */
export type MuseumPrice_Stddev_Samp_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumPrice_Sum_Fields = {
  __typename?: 'MuseumPrice_sum_fields';
  entranceTypeID?: Maybe<Scalars['Int']>;
  museumID?: Maybe<Scalars['Int']>;
  museumPriceID?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "MuseumPrice" */
export type MuseumPrice_Sum_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** update columns of table "MuseumPrice" */
export enum MuseumPrice_Update_Column {
  /** column name */
  EntranceTypeId = 'entranceTypeID',
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumPriceId = 'museumPriceID',
  /** column name */
  Price = 'price',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type MuseumPrice_Var_Pop_Fields = {
  __typename?: 'MuseumPrice_var_pop_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumPrice" */
export type MuseumPrice_Var_Pop_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumPrice_Var_Samp_Fields = {
  __typename?: 'MuseumPrice_var_samp_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumPrice" */
export type MuseumPrice_Var_Samp_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumPrice_Variance_Fields = {
  __typename?: 'MuseumPrice_variance_fields';
  entranceTypeID?: Maybe<Scalars['Float']>;
  museumID?: Maybe<Scalars['Float']>;
  museumPriceID?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumPrice" */
export type MuseumPrice_Variance_Order_By = {
  entranceTypeID?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumPriceID?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumType" */
export type MuseumType = {
  __typename?: 'MuseumType';
  /** An array relationship */
  MuseumTypeMuseums: Array<MuseumTypeMuseum>;
  /** An aggregated array relationship */
  MuseumTypeMuseums_aggregate: MuseumTypeMuseum_Aggregate;
  isDeleted: Scalars['Boolean'];
  museumTypeID: Scalars['Int'];
  type: Scalars['String'];
};


/** columns and relationships of "MuseumType" */
export type MuseumTypeMuseumTypeMuseumsArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** columns and relationships of "MuseumType" */
export type MuseumTypeMuseumTypeMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};

/** aggregated selection of "MuseumType" */
export type MuseumType_Aggregate = {
  __typename?: 'MuseumType_aggregate';
  aggregate?: Maybe<MuseumType_Aggregate_Fields>;
  nodes: Array<MuseumType>;
};

/** aggregate fields of "MuseumType" */
export type MuseumType_Aggregate_Fields = {
  __typename?: 'MuseumType_aggregate_fields';
  avg?: Maybe<MuseumType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumType_Max_Fields>;
  min?: Maybe<MuseumType_Min_Fields>;
  stddev?: Maybe<MuseumType_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumType_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumType_Sum_Fields>;
  var_pop?: Maybe<MuseumType_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumType_Var_Samp_Fields>;
  variance?: Maybe<MuseumType_Variance_Fields>;
};


/** aggregate fields of "MuseumType" */
export type MuseumType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumType" */
export type MuseumType_Aggregate_Order_By = {
  avg?: Maybe<MuseumType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumType_Max_Order_By>;
  min?: Maybe<MuseumType_Min_Order_By>;
  stddev?: Maybe<MuseumType_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumType_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumType_Sum_Order_By>;
  var_pop?: Maybe<MuseumType_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumType_Var_Samp_Order_By>;
  variance?: Maybe<MuseumType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumType" */
export type MuseumType_Arr_Rel_Insert_Input = {
  data: Array<MuseumType_Insert_Input>;
  on_conflict?: Maybe<MuseumType_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumType_Avg_Fields = {
  __typename?: 'MuseumType_avg_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumType" */
export type MuseumType_Avg_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumType". All fields are combined with a logical 'AND'. */
export type MuseumType_Bool_Exp = {
  MuseumTypeMuseums?: Maybe<MuseumTypeMuseum_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumType_Bool_Exp>>>;
  _not?: Maybe<MuseumType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumTypeID?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumType" */
export enum MuseumType_Constraint {
  /** unique or primary key constraint */
  MuseumTypePkey = 'MuseumType_pkey',
  /** unique or primary key constraint */
  MuseumTypeTypeKey = 'MuseumType_type_key'
}

/** input type for incrementing integer columne in table "MuseumType" */
export type MuseumType_Inc_Input = {
  museumTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumType" */
export type MuseumType_Insert_Input = {
  MuseumTypeMuseums?: Maybe<MuseumTypeMuseum_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type MuseumType_Max_Fields = {
  __typename?: 'MuseumType_max_fields';
  museumTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "MuseumType" */
export type MuseumType_Max_Order_By = {
  museumTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumType_Min_Fields = {
  __typename?: 'MuseumType_min_fields';
  museumTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "MuseumType" */
export type MuseumType_Min_Order_By = {
  museumTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumType" */
export type MuseumType_Mutation_Response = {
  __typename?: 'MuseumType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumType>;
};

/** input type for inserting object relation for remote table "MuseumType" */
export type MuseumType_Obj_Rel_Insert_Input = {
  data: MuseumType_Insert_Input;
  on_conflict?: Maybe<MuseumType_On_Conflict>;
};

/** on conflict condition type for table "MuseumType" */
export type MuseumType_On_Conflict = {
  constraint: MuseumType_Constraint;
  update_columns: Array<MuseumType_Update_Column>;
  where?: Maybe<MuseumType_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumType" */
export type MuseumType_Order_By = {
  MuseumTypeMuseums_aggregate?: Maybe<MuseumTypeMuseum_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** select columns of table "MuseumType" */
export enum MuseumType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumTypeId = 'museumTypeID',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "MuseumType" */
export type MuseumType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type MuseumType_Stddev_Fields = {
  __typename?: 'MuseumType_stddev_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumType" */
export type MuseumType_Stddev_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumType_Stddev_Pop_Fields = {
  __typename?: 'MuseumType_stddev_pop_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumType" */
export type MuseumType_Stddev_Pop_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumType_Stddev_Samp_Fields = {
  __typename?: 'MuseumType_stddev_samp_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumType" */
export type MuseumType_Stddev_Samp_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumType_Sum_Fields = {
  __typename?: 'MuseumType_sum_fields';
  museumTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumType" */
export type MuseumType_Sum_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** update columns of table "MuseumType" */
export enum MuseumType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumTypeId = 'museumTypeID',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type MuseumType_Var_Pop_Fields = {
  __typename?: 'MuseumType_var_pop_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumType" */
export type MuseumType_Var_Pop_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumType_Var_Samp_Fields = {
  __typename?: 'MuseumType_var_samp_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumType" */
export type MuseumType_Var_Samp_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumType_Variance_Fields = {
  __typename?: 'MuseumType_variance_fields';
  museumTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumType" */
export type MuseumType_Variance_Order_By = {
  museumTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumTypeMuseum" */
export type MuseumTypeMuseum = {
  __typename?: 'MuseumTypeMuseum';
  /** An object relationship */
  Museum: Museum;
  /** An object relationship */
  MuseumType: MuseumType;
  isDeleted: Scalars['Boolean'];
  museumID: Scalars['Int'];
  museumTypeID: Scalars['Int'];
  museumTypeMuseumID: Scalars['Int'];
};

/** aggregated selection of "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Aggregate = {
  __typename?: 'MuseumTypeMuseum_aggregate';
  aggregate?: Maybe<MuseumTypeMuseum_Aggregate_Fields>;
  nodes: Array<MuseumTypeMuseum>;
};

/** aggregate fields of "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Aggregate_Fields = {
  __typename?: 'MuseumTypeMuseum_aggregate_fields';
  avg?: Maybe<MuseumTypeMuseum_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumTypeMuseum_Max_Fields>;
  min?: Maybe<MuseumTypeMuseum_Min_Fields>;
  stddev?: Maybe<MuseumTypeMuseum_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumTypeMuseum_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumTypeMuseum_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumTypeMuseum_Sum_Fields>;
  var_pop?: Maybe<MuseumTypeMuseum_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumTypeMuseum_Var_Samp_Fields>;
  variance?: Maybe<MuseumTypeMuseum_Variance_Fields>;
};


/** aggregate fields of "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Aggregate_Order_By = {
  avg?: Maybe<MuseumTypeMuseum_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumTypeMuseum_Max_Order_By>;
  min?: Maybe<MuseumTypeMuseum_Min_Order_By>;
  stddev?: Maybe<MuseumTypeMuseum_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumTypeMuseum_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumTypeMuseum_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumTypeMuseum_Sum_Order_By>;
  var_pop?: Maybe<MuseumTypeMuseum_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumTypeMuseum_Var_Samp_Order_By>;
  variance?: Maybe<MuseumTypeMuseum_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Arr_Rel_Insert_Input = {
  data: Array<MuseumTypeMuseum_Insert_Input>;
  on_conflict?: Maybe<MuseumTypeMuseum_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumTypeMuseum_Avg_Fields = {
  __typename?: 'MuseumTypeMuseum_avg_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Avg_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumTypeMuseum". All fields are combined with a logical 'AND'. */
export type MuseumTypeMuseum_Bool_Exp = {
  Museum?: Maybe<Museum_Bool_Exp>;
  MuseumType?: Maybe<MuseumType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumTypeMuseum_Bool_Exp>>>;
  _not?: Maybe<MuseumTypeMuseum_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumTypeMuseum_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  museumTypeID?: Maybe<Int_Comparison_Exp>;
  museumTypeMuseumID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumTypeMuseum" */
export enum MuseumTypeMuseum_Constraint {
  /** unique or primary key constraint */
  MuseumTypeMuseumPkey = 'MuseumTypeMuseum_pkey'
}

/** input type for incrementing integer columne in table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Inc_Input = {
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Insert_Input = {
  Museum?: Maybe<Museum_Obj_Rel_Insert_Input>;
  MuseumType?: Maybe<MuseumType_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type MuseumTypeMuseum_Max_Fields = {
  __typename?: 'MuseumTypeMuseum_max_fields';
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Max_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumTypeMuseum_Min_Fields = {
  __typename?: 'MuseumTypeMuseum_min_fields';
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Min_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Mutation_Response = {
  __typename?: 'MuseumTypeMuseum_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumTypeMuseum>;
};

/** input type for inserting object relation for remote table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Obj_Rel_Insert_Input = {
  data: MuseumTypeMuseum_Insert_Input;
  on_conflict?: Maybe<MuseumTypeMuseum_On_Conflict>;
};

/** on conflict condition type for table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_On_Conflict = {
  constraint: MuseumTypeMuseum_Constraint;
  update_columns: Array<MuseumTypeMuseum_Update_Column>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Order_By = {
  Museum?: Maybe<Museum_Order_By>;
  MuseumType?: Maybe<MuseumType_Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** select columns of table "MuseumTypeMuseum" */
export enum MuseumTypeMuseum_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumTypeId = 'museumTypeID',
  /** column name */
  MuseumTypeMuseumId = 'museumTypeMuseumID'
}

/** input type for updating data in table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type MuseumTypeMuseum_Stddev_Fields = {
  __typename?: 'MuseumTypeMuseum_stddev_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Stddev_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumTypeMuseum_Stddev_Pop_Fields = {
  __typename?: 'MuseumTypeMuseum_stddev_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Stddev_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumTypeMuseum_Stddev_Samp_Fields = {
  __typename?: 'MuseumTypeMuseum_stddev_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Stddev_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumTypeMuseum_Sum_Fields = {
  __typename?: 'MuseumTypeMuseum_sum_fields';
  museumID?: Maybe<Scalars['Int']>;
  museumTypeID?: Maybe<Scalars['Int']>;
  museumTypeMuseumID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Sum_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** update columns of table "MuseumTypeMuseum" */
export enum MuseumTypeMuseum_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumTypeId = 'museumTypeID',
  /** column name */
  MuseumTypeMuseumId = 'museumTypeMuseumID'
}

/** aggregate var_pop on columns */
export type MuseumTypeMuseum_Var_Pop_Fields = {
  __typename?: 'MuseumTypeMuseum_var_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Var_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumTypeMuseum_Var_Samp_Fields = {
  __typename?: 'MuseumTypeMuseum_var_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Var_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumTypeMuseum_Variance_Fields = {
  __typename?: 'MuseumTypeMuseum_variance_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumTypeID?: Maybe<Scalars['Float']>;
  museumTypeMuseumID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumTypeMuseum" */
export type MuseumTypeMuseum_Variance_Order_By = {
  museumID?: Maybe<Order_By>;
  museumTypeID?: Maybe<Order_By>;
  museumTypeMuseumID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumWorkingDay" */
export type MuseumWorkingDay = {
  __typename?: 'MuseumWorkingDay';
  /** An object relationship */
  Day: Day;
  /** An array relationship */
  MuseumWorkingDaySchedules: Array<MuseumWorkingDaySchedule>;
  /** An aggregated array relationship */
  MuseumWorkingDaySchedules_aggregate: MuseumWorkingDaySchedule_Aggregate;
  closeHour: Scalars['timetz'];
  dayID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  museumWorkingDayID: Scalars['Int'];
  openHour: Scalars['timetz'];
};


/** columns and relationships of "MuseumWorkingDay" */
export type MuseumWorkingDayMuseumWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "MuseumWorkingDay" */
export type MuseumWorkingDayMuseumWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "MuseumWorkingDay" */
export type MuseumWorkingDay_Aggregate = {
  __typename?: 'MuseumWorkingDay_aggregate';
  aggregate?: Maybe<MuseumWorkingDay_Aggregate_Fields>;
  nodes: Array<MuseumWorkingDay>;
};

/** aggregate fields of "MuseumWorkingDay" */
export type MuseumWorkingDay_Aggregate_Fields = {
  __typename?: 'MuseumWorkingDay_aggregate_fields';
  avg?: Maybe<MuseumWorkingDay_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumWorkingDay_Max_Fields>;
  min?: Maybe<MuseumWorkingDay_Min_Fields>;
  stddev?: Maybe<MuseumWorkingDay_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumWorkingDay_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumWorkingDay_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumWorkingDay_Sum_Fields>;
  var_pop?: Maybe<MuseumWorkingDay_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumWorkingDay_Var_Samp_Fields>;
  variance?: Maybe<MuseumWorkingDay_Variance_Fields>;
};


/** aggregate fields of "MuseumWorkingDay" */
export type MuseumWorkingDay_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Aggregate_Order_By = {
  avg?: Maybe<MuseumWorkingDay_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumWorkingDay_Max_Order_By>;
  min?: Maybe<MuseumWorkingDay_Min_Order_By>;
  stddev?: Maybe<MuseumWorkingDay_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumWorkingDay_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumWorkingDay_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumWorkingDay_Sum_Order_By>;
  var_pop?: Maybe<MuseumWorkingDay_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumWorkingDay_Var_Samp_Order_By>;
  variance?: Maybe<MuseumWorkingDay_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumWorkingDay" */
export type MuseumWorkingDay_Arr_Rel_Insert_Input = {
  data: Array<MuseumWorkingDay_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingDay_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumWorkingDay_Avg_Fields = {
  __typename?: 'MuseumWorkingDay_avg_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Avg_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumWorkingDay". All fields are combined with a logical 'AND'. */
export type MuseumWorkingDay_Bool_Exp = {
  Day?: Maybe<Day_Bool_Exp>;
  MuseumWorkingDaySchedules?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumWorkingDay_Bool_Exp>>>;
  _not?: Maybe<MuseumWorkingDay_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumWorkingDay_Bool_Exp>>>;
  closeHour?: Maybe<Timetz_Comparison_Exp>;
  dayID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumWorkingDayID?: Maybe<Int_Comparison_Exp>;
  openHour?: Maybe<Timetz_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumWorkingDay" */
export enum MuseumWorkingDay_Constraint {
  /** unique or primary key constraint */
  MuseumWorkingDayPkey = 'MuseumWorkingDay_pkey'
}

/** input type for incrementing integer columne in table "MuseumWorkingDay" */
export type MuseumWorkingDay_Inc_Input = {
  dayID?: Maybe<Scalars['Int']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumWorkingDay" */
export type MuseumWorkingDay_Insert_Input = {
  Day?: Maybe<Day_Obj_Rel_Insert_Input>;
  MuseumWorkingDaySchedules?: Maybe<MuseumWorkingDaySchedule_Arr_Rel_Insert_Input>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** aggregate max on columns */
export type MuseumWorkingDay_Max_Fields = {
  __typename?: 'MuseumWorkingDay_max_fields';
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** order by max() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Max_Order_By = {
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumWorkingDay_Min_Fields = {
  __typename?: 'MuseumWorkingDay_min_fields';
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** order by min() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Min_Order_By = {
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumWorkingDay" */
export type MuseumWorkingDay_Mutation_Response = {
  __typename?: 'MuseumWorkingDay_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumWorkingDay>;
};

/** input type for inserting object relation for remote table "MuseumWorkingDay" */
export type MuseumWorkingDay_Obj_Rel_Insert_Input = {
  data: MuseumWorkingDay_Insert_Input;
  on_conflict?: Maybe<MuseumWorkingDay_On_Conflict>;
};

/** on conflict condition type for table "MuseumWorkingDay" */
export type MuseumWorkingDay_On_Conflict = {
  constraint: MuseumWorkingDay_Constraint;
  update_columns: Array<MuseumWorkingDay_Update_Column>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumWorkingDay" */
export type MuseumWorkingDay_Order_By = {
  Day?: Maybe<Day_Order_By>;
  MuseumWorkingDaySchedules_aggregate?: Maybe<MuseumWorkingDaySchedule_Aggregate_Order_By>;
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
};

/** select columns of table "MuseumWorkingDay" */
export enum MuseumWorkingDay_Select_Column {
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumWorkingDayId = 'museumWorkingDayID',
  /** column name */
  OpenHour = 'openHour'
}

/** input type for updating data in table "MuseumWorkingDay" */
export type MuseumWorkingDay_Set_Input = {
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
};

/** aggregate stddev on columns */
export type MuseumWorkingDay_Stddev_Fields = {
  __typename?: 'MuseumWorkingDay_stddev_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Stddev_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumWorkingDay_Stddev_Pop_Fields = {
  __typename?: 'MuseumWorkingDay_stddev_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Stddev_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumWorkingDay_Stddev_Samp_Fields = {
  __typename?: 'MuseumWorkingDay_stddev_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Stddev_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumWorkingDay_Sum_Fields = {
  __typename?: 'MuseumWorkingDay_sum_fields';
  dayID?: Maybe<Scalars['Int']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Sum_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** update columns of table "MuseumWorkingDay" */
export enum MuseumWorkingDay_Update_Column {
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumWorkingDayId = 'museumWorkingDayID',
  /** column name */
  OpenHour = 'openHour'
}

/** aggregate var_pop on columns */
export type MuseumWorkingDay_Var_Pop_Fields = {
  __typename?: 'MuseumWorkingDay_var_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Var_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumWorkingDay_Var_Samp_Fields = {
  __typename?: 'MuseumWorkingDay_var_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Var_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumWorkingDay_Variance_Fields = {
  __typename?: 'MuseumWorkingDay_variance_fields';
  dayID?: Maybe<Scalars['Float']>;
  museumWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumWorkingDay" */
export type MuseumWorkingDay_Variance_Order_By = {
  dayID?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule = {
  __typename?: 'MuseumWorkingDaySchedule';
  /** An object relationship */
  MuseumWorkingDay: MuseumWorkingDay;
  /** An object relationship */
  MuseumWorkingSchedule: MuseumWorkingSchedule;
  isDeleted: Scalars['Boolean'];
  museumWorkingDayID: Scalars['Int'];
  museumWorkingDayScheduleID: Scalars['Int'];
  museumWorkingScheduleID: Scalars['Int'];
};

/** aggregated selection of "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Aggregate = {
  __typename?: 'MuseumWorkingDaySchedule_aggregate';
  aggregate?: Maybe<MuseumWorkingDaySchedule_Aggregate_Fields>;
  nodes: Array<MuseumWorkingDaySchedule>;
};

/** aggregate fields of "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Aggregate_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_aggregate_fields';
  avg?: Maybe<MuseumWorkingDaySchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumWorkingDaySchedule_Max_Fields>;
  min?: Maybe<MuseumWorkingDaySchedule_Min_Fields>;
  stddev?: Maybe<MuseumWorkingDaySchedule_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumWorkingDaySchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumWorkingDaySchedule_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumWorkingDaySchedule_Sum_Fields>;
  var_pop?: Maybe<MuseumWorkingDaySchedule_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumWorkingDaySchedule_Var_Samp_Fields>;
  variance?: Maybe<MuseumWorkingDaySchedule_Variance_Fields>;
};


/** aggregate fields of "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Aggregate_Order_By = {
  avg?: Maybe<MuseumWorkingDaySchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumWorkingDaySchedule_Max_Order_By>;
  min?: Maybe<MuseumWorkingDaySchedule_Min_Order_By>;
  stddev?: Maybe<MuseumWorkingDaySchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumWorkingDaySchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumWorkingDaySchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumWorkingDaySchedule_Sum_Order_By>;
  var_pop?: Maybe<MuseumWorkingDaySchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumWorkingDaySchedule_Var_Samp_Order_By>;
  variance?: Maybe<MuseumWorkingDaySchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Arr_Rel_Insert_Input = {
  data: Array<MuseumWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingDaySchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumWorkingDaySchedule_Avg_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_avg_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Avg_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumWorkingDaySchedule". All fields are combined with a logical 'AND'. */
export type MuseumWorkingDaySchedule_Bool_Exp = {
  MuseumWorkingDay?: Maybe<MuseumWorkingDay_Bool_Exp>;
  MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumWorkingDaySchedule_Bool_Exp>>>;
  _not?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumWorkingDaySchedule_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumWorkingDayID?: Maybe<Int_Comparison_Exp>;
  museumWorkingDayScheduleID?: Maybe<Int_Comparison_Exp>;
  museumWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumWorkingDaySchedule" */
export enum MuseumWorkingDaySchedule_Constraint {
  /** unique or primary key constraint */
  MuseumWorkingDaySchedulePkey = 'MuseumWorkingDaySchedule_pkey'
}

/** input type for incrementing integer columne in table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Inc_Input = {
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Insert_Input = {
  MuseumWorkingDay?: Maybe<MuseumWorkingDay_Obj_Rel_Insert_Input>;
  MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type MuseumWorkingDaySchedule_Max_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_max_fields';
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Max_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumWorkingDaySchedule_Min_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_min_fields';
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Min_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Mutation_Response = {
  __typename?: 'MuseumWorkingDaySchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumWorkingDaySchedule>;
};

/** input type for inserting object relation for remote table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Obj_Rel_Insert_Input = {
  data: MuseumWorkingDaySchedule_Insert_Input;
  on_conflict?: Maybe<MuseumWorkingDaySchedule_On_Conflict>;
};

/** on conflict condition type for table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_On_Conflict = {
  constraint: MuseumWorkingDaySchedule_Constraint;
  update_columns: Array<MuseumWorkingDaySchedule_Update_Column>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Order_By = {
  MuseumWorkingDay?: Maybe<MuseumWorkingDay_Order_By>;
  MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** select columns of table "MuseumWorkingDaySchedule" */
export enum MuseumWorkingDaySchedule_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumWorkingDayId = 'museumWorkingDayID',
  /** column name */
  MuseumWorkingDayScheduleId = 'museumWorkingDayScheduleID',
  /** column name */
  MuseumWorkingScheduleId = 'museumWorkingScheduleID'
}

/** input type for updating data in table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type MuseumWorkingDaySchedule_Stddev_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_stddev_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Stddev_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumWorkingDaySchedule_Stddev_Pop_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_stddev_pop_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Stddev_Pop_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumWorkingDaySchedule_Stddev_Samp_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_stddev_samp_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Stddev_Samp_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumWorkingDaySchedule_Sum_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_sum_fields';
  museumWorkingDayID?: Maybe<Scalars['Int']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Sum_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "MuseumWorkingDaySchedule" */
export enum MuseumWorkingDaySchedule_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumWorkingDayId = 'museumWorkingDayID',
  /** column name */
  MuseumWorkingDayScheduleId = 'museumWorkingDayScheduleID',
  /** column name */
  MuseumWorkingScheduleId = 'museumWorkingScheduleID'
}

/** aggregate var_pop on columns */
export type MuseumWorkingDaySchedule_Var_Pop_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_var_pop_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Var_Pop_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumWorkingDaySchedule_Var_Samp_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_var_samp_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Var_Samp_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumWorkingDaySchedule_Variance_Fields = {
  __typename?: 'MuseumWorkingDaySchedule_variance_fields';
  museumWorkingDayID?: Maybe<Scalars['Float']>;
  museumWorkingDayScheduleID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumWorkingDaySchedule" */
export type MuseumWorkingDaySchedule_Variance_Order_By = {
  museumWorkingDayID?: Maybe<Order_By>;
  museumWorkingDayScheduleID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** columns and relationships of "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule = {
  __typename?: 'MuseumWorkingSchedule';
  /** An object relationship */
  Museum: Museum;
  /** An array relationship */
  MuseumWorkingDaySchedules: Array<MuseumWorkingDaySchedule>;
  /** An aggregated array relationship */
  MuseumWorkingDaySchedules_aggregate: MuseumWorkingDaySchedule_Aggregate;
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  museumID: Scalars['Int'];
  museumWorkingScheduleID: Scalars['Int'];
  startDate: Scalars['timestamptz'];
};


/** columns and relationships of "MuseumWorkingSchedule" */
export type MuseumWorkingScheduleMuseumWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "MuseumWorkingSchedule" */
export type MuseumWorkingScheduleMuseumWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Aggregate = {
  __typename?: 'MuseumWorkingSchedule_aggregate';
  aggregate?: Maybe<MuseumWorkingSchedule_Aggregate_Fields>;
  nodes: Array<MuseumWorkingSchedule>;
};

/** aggregate fields of "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Aggregate_Fields = {
  __typename?: 'MuseumWorkingSchedule_aggregate_fields';
  avg?: Maybe<MuseumWorkingSchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<MuseumWorkingSchedule_Max_Fields>;
  min?: Maybe<MuseumWorkingSchedule_Min_Fields>;
  stddev?: Maybe<MuseumWorkingSchedule_Stddev_Fields>;
  stddev_pop?: Maybe<MuseumWorkingSchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MuseumWorkingSchedule_Stddev_Samp_Fields>;
  sum?: Maybe<MuseumWorkingSchedule_Sum_Fields>;
  var_pop?: Maybe<MuseumWorkingSchedule_Var_Pop_Fields>;
  var_samp?: Maybe<MuseumWorkingSchedule_Var_Samp_Fields>;
  variance?: Maybe<MuseumWorkingSchedule_Variance_Fields>;
};


/** aggregate fields of "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Aggregate_Order_By = {
  avg?: Maybe<MuseumWorkingSchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<MuseumWorkingSchedule_Max_Order_By>;
  min?: Maybe<MuseumWorkingSchedule_Min_Order_By>;
  stddev?: Maybe<MuseumWorkingSchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<MuseumWorkingSchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<MuseumWorkingSchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<MuseumWorkingSchedule_Sum_Order_By>;
  var_pop?: Maybe<MuseumWorkingSchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<MuseumWorkingSchedule_Var_Samp_Order_By>;
  variance?: Maybe<MuseumWorkingSchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Arr_Rel_Insert_Input = {
  data: Array<MuseumWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingSchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type MuseumWorkingSchedule_Avg_Fields = {
  __typename?: 'MuseumWorkingSchedule_avg_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Avg_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "MuseumWorkingSchedule". All fields are combined with a logical 'AND'. */
export type MuseumWorkingSchedule_Bool_Exp = {
  Museum?: Maybe<Museum_Bool_Exp>;
  MuseumWorkingDaySchedules?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<MuseumWorkingSchedule_Bool_Exp>>>;
  _not?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<MuseumWorkingSchedule_Bool_Exp>>>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  museumWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "MuseumWorkingSchedule" */
export enum MuseumWorkingSchedule_Constraint {
  /** unique or primary key constraint */
  MuseumWorkingSchedulePkey = 'MuseumWorkingSchedule_pkey'
}

/** input type for incrementing integer columne in table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Inc_Input = {
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Insert_Input = {
  Museum?: Maybe<Museum_Obj_Rel_Insert_Input>;
  MuseumWorkingDaySchedules?: Maybe<MuseumWorkingDaySchedule_Arr_Rel_Insert_Input>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type MuseumWorkingSchedule_Max_Fields = {
  __typename?: 'MuseumWorkingSchedule_max_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Max_Order_By = {
  finishDate?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type MuseumWorkingSchedule_Min_Fields = {
  __typename?: 'MuseumWorkingSchedule_min_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Min_Order_By = {
  finishDate?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Mutation_Response = {
  __typename?: 'MuseumWorkingSchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<MuseumWorkingSchedule>;
};

/** input type for inserting object relation for remote table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Obj_Rel_Insert_Input = {
  data: MuseumWorkingSchedule_Insert_Input;
  on_conflict?: Maybe<MuseumWorkingSchedule_On_Conflict>;
};

/** on conflict condition type for table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_On_Conflict = {
  constraint: MuseumWorkingSchedule_Constraint;
  update_columns: Array<MuseumWorkingSchedule_Update_Column>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};

/** ordering options when selecting data from "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Order_By = {
  Museum?: Maybe<Museum_Order_By>;
  MuseumWorkingDaySchedules_aggregate?: Maybe<MuseumWorkingDaySchedule_Aggregate_Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "MuseumWorkingSchedule" */
export enum MuseumWorkingSchedule_Select_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumWorkingScheduleId = 'museumWorkingScheduleID',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Set_Input = {
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type MuseumWorkingSchedule_Stddev_Fields = {
  __typename?: 'MuseumWorkingSchedule_stddev_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Stddev_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MuseumWorkingSchedule_Stddev_Pop_Fields = {
  __typename?: 'MuseumWorkingSchedule_stddev_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Stddev_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MuseumWorkingSchedule_Stddev_Samp_Fields = {
  __typename?: 'MuseumWorkingSchedule_stddev_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Stddev_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type MuseumWorkingSchedule_Sum_Fields = {
  __typename?: 'MuseumWorkingSchedule_sum_fields';
  museumID?: Maybe<Scalars['Int']>;
  museumWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Sum_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "MuseumWorkingSchedule" */
export enum MuseumWorkingSchedule_Update_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  MuseumWorkingScheduleId = 'museumWorkingScheduleID',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type MuseumWorkingSchedule_Var_Pop_Fields = {
  __typename?: 'MuseumWorkingSchedule_var_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Var_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MuseumWorkingSchedule_Var_Samp_Fields = {
  __typename?: 'MuseumWorkingSchedule_var_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Var_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type MuseumWorkingSchedule_Variance_Fields = {
  __typename?: 'MuseumWorkingSchedule_variance_fields';
  museumID?: Maybe<Scalars['Float']>;
  museumWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "MuseumWorkingSchedule" */
export type MuseumWorkingSchedule_Variance_Order_By = {
  museumID?: Maybe<Order_By>;
  museumWorkingScheduleID?: Maybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** delete data from the table: "Address" */
  delete_Address?: Maybe<Address_Mutation_Response>;
  /** delete data from the table: "ArchSite" */
  delete_ArchSite?: Maybe<ArchSite_Mutation_Response>;
  /** delete data from the table: "ArchSiteComment" */
  delete_ArchSiteComment?: Maybe<ArchSiteComment_Mutation_Response>;
  /** delete data from the table: "ArchSiteEntranceType" */
  delete_ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Mutation_Response>;
  /** delete data from the table: "ArchSitePrice" */
  delete_ArchSitePrice?: Maybe<ArchSitePrice_Mutation_Response>;
  /** delete data from the table: "ArchSiteType" */
  delete_ArchSiteType?: Maybe<ArchSiteType_Mutation_Response>;
  /** delete data from the table: "ArchSiteTypeArchSite" */
  delete_ArchSiteTypeArchSite?: Maybe<ArchSiteTypeArchSite_Mutation_Response>;
  /** delete data from the table: "ArchSiteWorkingDay" */
  delete_ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Mutation_Response>;
  /** delete data from the table: "ArchSiteWorkingDaySchedule" */
  delete_ArchSiteWorkingDaySchedule?: Maybe<ArchSiteWorkingDaySchedule_Mutation_Response>;
  /** delete data from the table: "ArchSiteWorkingSchedule" */
  delete_ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Mutation_Response>;
  /** delete data from the table: "Article" */
  delete_Article?: Maybe<Article_Mutation_Response>;
  /** delete data from the table: "ArticleTag" */
  delete_ArticleTag?: Maybe<ArticleTag_Mutation_Response>;
  /** delete data from the table: "ArticleUser" */
  delete_ArticleUser?: Maybe<ArticleUser_Mutation_Response>;
  /** delete data from the table: "City" */
  delete_City?: Maybe<City_Mutation_Response>;
  /** delete data from the table: "Company" */
  delete_Company?: Maybe<Company_Mutation_Response>;
  /** delete data from the table: "CompanyContact" */
  delete_CompanyContact?: Maybe<CompanyContact_Mutation_Response>;
  /** delete data from the table: "CompanyPhone" */
  delete_CompanyPhone?: Maybe<CompanyPhone_Mutation_Response>;
  /** delete data from the table: "CompanyUser" */
  delete_CompanyUser?: Maybe<CompanyUser_Mutation_Response>;
  /** delete data from the table: "Country" */
  delete_Country?: Maybe<Country_Mutation_Response>;
  /** delete data from the table: "Day" */
  delete_Day?: Maybe<Day_Mutation_Response>;
  /** delete data from the table: "District" */
  delete_District?: Maybe<District_Mutation_Response>;
  /** delete data from the table: "Hotel" */
  delete_Hotel?: Maybe<Hotel_Mutation_Response>;
  /** delete data from the table: "HotelComment" */
  delete_HotelComment?: Maybe<HotelComment_Mutation_Response>;
  /** delete data from the table: "HotelRoom" */
  delete_HotelRoom?: Maybe<HotelRoom_Mutation_Response>;
  /** delete data from the table: "HotelService" */
  delete_HotelService?: Maybe<HotelService_Mutation_Response>;
  /** delete data from the table: "HotelServiceProperty" */
  delete_HotelServiceProperty?: Maybe<HotelServiceProperty_Mutation_Response>;
  /** delete data from the table: "Location" */
  delete_Location?: Maybe<Location_Mutation_Response>;
  /** delete data from the table: "LoginType" */
  delete_LoginType?: Maybe<LoginType_Mutation_Response>;
  /** delete data from the table: "Museum" */
  delete_Museum?: Maybe<Museum_Mutation_Response>;
  /** delete data from the table: "MuseumComment" */
  delete_MuseumComment?: Maybe<MuseumComment_Mutation_Response>;
  /** delete data from the table: "MuseumEntranceType" */
  delete_MuseumEntranceType?: Maybe<MuseumEntranceType_Mutation_Response>;
  /** delete data from the table: "MuseumPrice" */
  delete_MuseumPrice?: Maybe<MuseumPrice_Mutation_Response>;
  /** delete data from the table: "MuseumType" */
  delete_MuseumType?: Maybe<MuseumType_Mutation_Response>;
  /** delete data from the table: "MuseumTypeMuseum" */
  delete_MuseumTypeMuseum?: Maybe<MuseumTypeMuseum_Mutation_Response>;
  /** delete data from the table: "MuseumWorkingDay" */
  delete_MuseumWorkingDay?: Maybe<MuseumWorkingDay_Mutation_Response>;
  /** delete data from the table: "MuseumWorkingDaySchedule" */
  delete_MuseumWorkingDaySchedule?: Maybe<MuseumWorkingDaySchedule_Mutation_Response>;
  /** delete data from the table: "MuseumWorkingSchedule" */
  delete_MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Mutation_Response>;
  /** delete data from the table: "Phone" */
  delete_Phone?: Maybe<Phone_Mutation_Response>;
  /** delete data from the table: "Region" */
  delete_Region?: Maybe<Region_Mutation_Response>;
  /** delete data from the table: "Restaurant" */
  delete_Restaurant?: Maybe<Restaurant_Mutation_Response>;
  /** delete data from the table: "RestaurantAndCuisineType" */
  delete_RestaurantAndCuisineType?: Maybe<RestaurantAndCuisineType_Mutation_Response>;
  /** delete data from the table: "RestaurantComment" */
  delete_RestaurantComment?: Maybe<RestaurantComment_Mutation_Response>;
  /** delete data from the table: "RestaurantCuisineType" */
  delete_RestaurantCuisineType?: Maybe<RestaurantCuisineType_Mutation_Response>;
  /** delete data from the table: "RestaurantFood" */
  delete_RestaurantFood?: Maybe<RestaurantFood_Mutation_Response>;
  /** delete data from the table: "RestaurantFoodType" */
  delete_RestaurantFoodType?: Maybe<RestaurantFoodType_Mutation_Response>;
  /** delete data from the table: "RestaurantMenu" */
  delete_RestaurantMenu?: Maybe<RestaurantMenu_Mutation_Response>;
  /** delete data from the table: "RestaurantMenuFood" */
  delete_RestaurantMenuFood?: Maybe<RestaurantMenuFood_Mutation_Response>;
  /** delete data from the table: "RestaurantType" */
  delete_RestaurantType?: Maybe<RestaurantType_Mutation_Response>;
  /** delete data from the table: "RestaurantWorkingDay" */
  delete_RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Mutation_Response>;
  /** delete data from the table: "RestaurantWorkingDaySchedule" */
  delete_RestaurantWorkingDaySchedule?: Maybe<RestaurantWorkingDaySchedule_Mutation_Response>;
  /** delete data from the table: "RestaurantWorkingSchedule" */
  delete_RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Mutation_Response>;
  /** delete data from the table: "Room" */
  delete_Room?: Maybe<Room_Mutation_Response>;
  /** delete data from the table: "RoomPicture" */
  delete_RoomPicture?: Maybe<RoomPicture_Mutation_Response>;
  /** delete data from the table: "RoomPrice" */
  delete_RoomPrice?: Maybe<RoomPrice_Mutation_Response>;
  /** delete data from the table: "RoomProperty" */
  delete_RoomProperty?: Maybe<RoomProperty_Mutation_Response>;
  /** delete data from the table: "RoomPropertyRoom" */
  delete_RoomPropertyRoom?: Maybe<RoomPropertyRoom_Mutation_Response>;
  /** delete data from the table: "Tag" */
  delete_Tag?: Maybe<Tag_Mutation_Response>;
  /** delete data from the table: "TravelGuide" */
  delete_TravelGuide?: Maybe<TravelGuide_Mutation_Response>;
  /** delete data from the table: "TravelGuideArchSite" */
  delete_TravelGuideArchSite?: Maybe<TravelGuideArchSite_Mutation_Response>;
  /** delete data from the table: "TravelGuideHotel" */
  delete_TravelGuideHotel?: Maybe<TravelGuideHotel_Mutation_Response>;
  /** delete data from the table: "TravelGuideLocation" */
  delete_TravelGuideLocation?: Maybe<TravelGuideLocation_Mutation_Response>;
  /** delete data from the table: "TravelGuideMuseum" */
  delete_TravelGuideMuseum?: Maybe<TravelGuideMuseum_Mutation_Response>;
  /** delete data from the table: "TravelGuideRestaurant" */
  delete_TravelGuideRestaurant?: Maybe<TravelGuideRestaurant_Mutation_Response>;
  /** delete data from the table: "User" */
  delete_User?: Maybe<User_Mutation_Response>;
  /** delete data from the table: "UserType" */
  delete_UserType?: Maybe<UserType_Mutation_Response>;
  /** insert data into the table: "Address" */
  insert_Address?: Maybe<Address_Mutation_Response>;
  /** insert data into the table: "ArchSite" */
  insert_ArchSite?: Maybe<ArchSite_Mutation_Response>;
  /** insert data into the table: "ArchSiteComment" */
  insert_ArchSiteComment?: Maybe<ArchSiteComment_Mutation_Response>;
  /** insert data into the table: "ArchSiteEntranceType" */
  insert_ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Mutation_Response>;
  /** insert data into the table: "ArchSitePrice" */
  insert_ArchSitePrice?: Maybe<ArchSitePrice_Mutation_Response>;
  /** insert data into the table: "ArchSiteType" */
  insert_ArchSiteType?: Maybe<ArchSiteType_Mutation_Response>;
  /** insert data into the table: "ArchSiteTypeArchSite" */
  insert_ArchSiteTypeArchSite?: Maybe<ArchSiteTypeArchSite_Mutation_Response>;
  /** insert data into the table: "ArchSiteWorkingDay" */
  insert_ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Mutation_Response>;
  /** insert data into the table: "ArchSiteWorkingDaySchedule" */
  insert_ArchSiteWorkingDaySchedule?: Maybe<ArchSiteWorkingDaySchedule_Mutation_Response>;
  /** insert data into the table: "ArchSiteWorkingSchedule" */
  insert_ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Mutation_Response>;
  /** insert data into the table: "Article" */
  insert_Article?: Maybe<Article_Mutation_Response>;
  /** insert data into the table: "ArticleTag" */
  insert_ArticleTag?: Maybe<ArticleTag_Mutation_Response>;
  /** insert data into the table: "ArticleUser" */
  insert_ArticleUser?: Maybe<ArticleUser_Mutation_Response>;
  /** insert data into the table: "City" */
  insert_City?: Maybe<City_Mutation_Response>;
  /** insert data into the table: "Company" */
  insert_Company?: Maybe<Company_Mutation_Response>;
  /** insert data into the table: "CompanyContact" */
  insert_CompanyContact?: Maybe<CompanyContact_Mutation_Response>;
  /** insert data into the table: "CompanyPhone" */
  insert_CompanyPhone?: Maybe<CompanyPhone_Mutation_Response>;
  /** insert data into the table: "CompanyUser" */
  insert_CompanyUser?: Maybe<CompanyUser_Mutation_Response>;
  /** insert data into the table: "Country" */
  insert_Country?: Maybe<Country_Mutation_Response>;
  /** insert data into the table: "Day" */
  insert_Day?: Maybe<Day_Mutation_Response>;
  /** insert data into the table: "District" */
  insert_District?: Maybe<District_Mutation_Response>;
  /** insert data into the table: "Hotel" */
  insert_Hotel?: Maybe<Hotel_Mutation_Response>;
  /** insert data into the table: "HotelComment" */
  insert_HotelComment?: Maybe<HotelComment_Mutation_Response>;
  /** insert data into the table: "HotelRoom" */
  insert_HotelRoom?: Maybe<HotelRoom_Mutation_Response>;
  /** insert data into the table: "HotelService" */
  insert_HotelService?: Maybe<HotelService_Mutation_Response>;
  /** insert data into the table: "HotelServiceProperty" */
  insert_HotelServiceProperty?: Maybe<HotelServiceProperty_Mutation_Response>;
  /** insert data into the table: "Location" */
  insert_Location?: Maybe<Location_Mutation_Response>;
  /** insert data into the table: "LoginType" */
  insert_LoginType?: Maybe<LoginType_Mutation_Response>;
  /** insert data into the table: "Museum" */
  insert_Museum?: Maybe<Museum_Mutation_Response>;
  /** insert data into the table: "MuseumComment" */
  insert_MuseumComment?: Maybe<MuseumComment_Mutation_Response>;
  /** insert data into the table: "MuseumEntranceType" */
  insert_MuseumEntranceType?: Maybe<MuseumEntranceType_Mutation_Response>;
  /** insert data into the table: "MuseumPrice" */
  insert_MuseumPrice?: Maybe<MuseumPrice_Mutation_Response>;
  /** insert data into the table: "MuseumType" */
  insert_MuseumType?: Maybe<MuseumType_Mutation_Response>;
  /** insert data into the table: "MuseumTypeMuseum" */
  insert_MuseumTypeMuseum?: Maybe<MuseumTypeMuseum_Mutation_Response>;
  /** insert data into the table: "MuseumWorkingDay" */
  insert_MuseumWorkingDay?: Maybe<MuseumWorkingDay_Mutation_Response>;
  /** insert data into the table: "MuseumWorkingDaySchedule" */
  insert_MuseumWorkingDaySchedule?: Maybe<MuseumWorkingDaySchedule_Mutation_Response>;
  /** insert data into the table: "MuseumWorkingSchedule" */
  insert_MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Mutation_Response>;
  /** insert data into the table: "Phone" */
  insert_Phone?: Maybe<Phone_Mutation_Response>;
  /** insert data into the table: "Region" */
  insert_Region?: Maybe<Region_Mutation_Response>;
  /** insert data into the table: "Restaurant" */
  insert_Restaurant?: Maybe<Restaurant_Mutation_Response>;
  /** insert data into the table: "RestaurantAndCuisineType" */
  insert_RestaurantAndCuisineType?: Maybe<RestaurantAndCuisineType_Mutation_Response>;
  /** insert data into the table: "RestaurantComment" */
  insert_RestaurantComment?: Maybe<RestaurantComment_Mutation_Response>;
  /** insert data into the table: "RestaurantCuisineType" */
  insert_RestaurantCuisineType?: Maybe<RestaurantCuisineType_Mutation_Response>;
  /** insert data into the table: "RestaurantFood" */
  insert_RestaurantFood?: Maybe<RestaurantFood_Mutation_Response>;
  /** insert data into the table: "RestaurantFoodType" */
  insert_RestaurantFoodType?: Maybe<RestaurantFoodType_Mutation_Response>;
  /** insert data into the table: "RestaurantMenu" */
  insert_RestaurantMenu?: Maybe<RestaurantMenu_Mutation_Response>;
  /** insert data into the table: "RestaurantMenuFood" */
  insert_RestaurantMenuFood?: Maybe<RestaurantMenuFood_Mutation_Response>;
  /** insert data into the table: "RestaurantType" */
  insert_RestaurantType?: Maybe<RestaurantType_Mutation_Response>;
  /** insert data into the table: "RestaurantWorkingDay" */
  insert_RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Mutation_Response>;
  /** insert data into the table: "RestaurantWorkingDaySchedule" */
  insert_RestaurantWorkingDaySchedule?: Maybe<RestaurantWorkingDaySchedule_Mutation_Response>;
  /** insert data into the table: "RestaurantWorkingSchedule" */
  insert_RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Mutation_Response>;
  /** insert data into the table: "Room" */
  insert_Room?: Maybe<Room_Mutation_Response>;
  /** insert data into the table: "RoomPicture" */
  insert_RoomPicture?: Maybe<RoomPicture_Mutation_Response>;
  /** insert data into the table: "RoomPrice" */
  insert_RoomPrice?: Maybe<RoomPrice_Mutation_Response>;
  /** insert data into the table: "RoomProperty" */
  insert_RoomProperty?: Maybe<RoomProperty_Mutation_Response>;
  /** insert data into the table: "RoomPropertyRoom" */
  insert_RoomPropertyRoom?: Maybe<RoomPropertyRoom_Mutation_Response>;
  /** insert data into the table: "Tag" */
  insert_Tag?: Maybe<Tag_Mutation_Response>;
  /** insert data into the table: "TravelGuide" */
  insert_TravelGuide?: Maybe<TravelGuide_Mutation_Response>;
  /** insert data into the table: "TravelGuideArchSite" */
  insert_TravelGuideArchSite?: Maybe<TravelGuideArchSite_Mutation_Response>;
  /** insert data into the table: "TravelGuideHotel" */
  insert_TravelGuideHotel?: Maybe<TravelGuideHotel_Mutation_Response>;
  /** insert data into the table: "TravelGuideLocation" */
  insert_TravelGuideLocation?: Maybe<TravelGuideLocation_Mutation_Response>;
  /** insert data into the table: "TravelGuideMuseum" */
  insert_TravelGuideMuseum?: Maybe<TravelGuideMuseum_Mutation_Response>;
  /** insert data into the table: "TravelGuideRestaurant" */
  insert_TravelGuideRestaurant?: Maybe<TravelGuideRestaurant_Mutation_Response>;
  /** insert data into the table: "User" */
  insert_User?: Maybe<User_Mutation_Response>;
  /** insert data into the table: "UserType" */
  insert_UserType?: Maybe<UserType_Mutation_Response>;
  /** update data of the table: "Address" */
  update_Address?: Maybe<Address_Mutation_Response>;
  /** update data of the table: "ArchSite" */
  update_ArchSite?: Maybe<ArchSite_Mutation_Response>;
  /** update data of the table: "ArchSiteComment" */
  update_ArchSiteComment?: Maybe<ArchSiteComment_Mutation_Response>;
  /** update data of the table: "ArchSiteEntranceType" */
  update_ArchSiteEntranceType?: Maybe<ArchSiteEntranceType_Mutation_Response>;
  /** update data of the table: "ArchSitePrice" */
  update_ArchSitePrice?: Maybe<ArchSitePrice_Mutation_Response>;
  /** update data of the table: "ArchSiteType" */
  update_ArchSiteType?: Maybe<ArchSiteType_Mutation_Response>;
  /** update data of the table: "ArchSiteTypeArchSite" */
  update_ArchSiteTypeArchSite?: Maybe<ArchSiteTypeArchSite_Mutation_Response>;
  /** update data of the table: "ArchSiteWorkingDay" */
  update_ArchSiteWorkingDay?: Maybe<ArchSiteWorkingDay_Mutation_Response>;
  /** update data of the table: "ArchSiteWorkingDaySchedule" */
  update_ArchSiteWorkingDaySchedule?: Maybe<ArchSiteWorkingDaySchedule_Mutation_Response>;
  /** update data of the table: "ArchSiteWorkingSchedule" */
  update_ArchSiteWorkingSchedule?: Maybe<ArchSiteWorkingSchedule_Mutation_Response>;
  /** update data of the table: "Article" */
  update_Article?: Maybe<Article_Mutation_Response>;
  /** update data of the table: "ArticleTag" */
  update_ArticleTag?: Maybe<ArticleTag_Mutation_Response>;
  /** update data of the table: "ArticleUser" */
  update_ArticleUser?: Maybe<ArticleUser_Mutation_Response>;
  /** update data of the table: "City" */
  update_City?: Maybe<City_Mutation_Response>;
  /** update data of the table: "Company" */
  update_Company?: Maybe<Company_Mutation_Response>;
  /** update data of the table: "CompanyContact" */
  update_CompanyContact?: Maybe<CompanyContact_Mutation_Response>;
  /** update data of the table: "CompanyPhone" */
  update_CompanyPhone?: Maybe<CompanyPhone_Mutation_Response>;
  /** update data of the table: "CompanyUser" */
  update_CompanyUser?: Maybe<CompanyUser_Mutation_Response>;
  /** update data of the table: "Country" */
  update_Country?: Maybe<Country_Mutation_Response>;
  /** update data of the table: "Day" */
  update_Day?: Maybe<Day_Mutation_Response>;
  /** update data of the table: "District" */
  update_District?: Maybe<District_Mutation_Response>;
  /** update data of the table: "Hotel" */
  update_Hotel?: Maybe<Hotel_Mutation_Response>;
  /** update data of the table: "HotelComment" */
  update_HotelComment?: Maybe<HotelComment_Mutation_Response>;
  /** update data of the table: "HotelRoom" */
  update_HotelRoom?: Maybe<HotelRoom_Mutation_Response>;
  /** update data of the table: "HotelService" */
  update_HotelService?: Maybe<HotelService_Mutation_Response>;
  /** update data of the table: "HotelServiceProperty" */
  update_HotelServiceProperty?: Maybe<HotelServiceProperty_Mutation_Response>;
  /** update data of the table: "Location" */
  update_Location?: Maybe<Location_Mutation_Response>;
  /** update data of the table: "LoginType" */
  update_LoginType?: Maybe<LoginType_Mutation_Response>;
  /** update data of the table: "Museum" */
  update_Museum?: Maybe<Museum_Mutation_Response>;
  /** update data of the table: "MuseumComment" */
  update_MuseumComment?: Maybe<MuseumComment_Mutation_Response>;
  /** update data of the table: "MuseumEntranceType" */
  update_MuseumEntranceType?: Maybe<MuseumEntranceType_Mutation_Response>;
  /** update data of the table: "MuseumPrice" */
  update_MuseumPrice?: Maybe<MuseumPrice_Mutation_Response>;
  /** update data of the table: "MuseumType" */
  update_MuseumType?: Maybe<MuseumType_Mutation_Response>;
  /** update data of the table: "MuseumTypeMuseum" */
  update_MuseumTypeMuseum?: Maybe<MuseumTypeMuseum_Mutation_Response>;
  /** update data of the table: "MuseumWorkingDay" */
  update_MuseumWorkingDay?: Maybe<MuseumWorkingDay_Mutation_Response>;
  /** update data of the table: "MuseumWorkingDaySchedule" */
  update_MuseumWorkingDaySchedule?: Maybe<MuseumWorkingDaySchedule_Mutation_Response>;
  /** update data of the table: "MuseumWorkingSchedule" */
  update_MuseumWorkingSchedule?: Maybe<MuseumWorkingSchedule_Mutation_Response>;
  /** update data of the table: "Phone" */
  update_Phone?: Maybe<Phone_Mutation_Response>;
  /** update data of the table: "Region" */
  update_Region?: Maybe<Region_Mutation_Response>;
  /** update data of the table: "Restaurant" */
  update_Restaurant?: Maybe<Restaurant_Mutation_Response>;
  /** update data of the table: "RestaurantAndCuisineType" */
  update_RestaurantAndCuisineType?: Maybe<RestaurantAndCuisineType_Mutation_Response>;
  /** update data of the table: "RestaurantComment" */
  update_RestaurantComment?: Maybe<RestaurantComment_Mutation_Response>;
  /** update data of the table: "RestaurantCuisineType" */
  update_RestaurantCuisineType?: Maybe<RestaurantCuisineType_Mutation_Response>;
  /** update data of the table: "RestaurantFood" */
  update_RestaurantFood?: Maybe<RestaurantFood_Mutation_Response>;
  /** update data of the table: "RestaurantFoodType" */
  update_RestaurantFoodType?: Maybe<RestaurantFoodType_Mutation_Response>;
  /** update data of the table: "RestaurantMenu" */
  update_RestaurantMenu?: Maybe<RestaurantMenu_Mutation_Response>;
  /** update data of the table: "RestaurantMenuFood" */
  update_RestaurantMenuFood?: Maybe<RestaurantMenuFood_Mutation_Response>;
  /** update data of the table: "RestaurantType" */
  update_RestaurantType?: Maybe<RestaurantType_Mutation_Response>;
  /** update data of the table: "RestaurantWorkingDay" */
  update_RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Mutation_Response>;
  /** update data of the table: "RestaurantWorkingDaySchedule" */
  update_RestaurantWorkingDaySchedule?: Maybe<RestaurantWorkingDaySchedule_Mutation_Response>;
  /** update data of the table: "RestaurantWorkingSchedule" */
  update_RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Mutation_Response>;
  /** update data of the table: "Room" */
  update_Room?: Maybe<Room_Mutation_Response>;
  /** update data of the table: "RoomPicture" */
  update_RoomPicture?: Maybe<RoomPicture_Mutation_Response>;
  /** update data of the table: "RoomPrice" */
  update_RoomPrice?: Maybe<RoomPrice_Mutation_Response>;
  /** update data of the table: "RoomProperty" */
  update_RoomProperty?: Maybe<RoomProperty_Mutation_Response>;
  /** update data of the table: "RoomPropertyRoom" */
  update_RoomPropertyRoom?: Maybe<RoomPropertyRoom_Mutation_Response>;
  /** update data of the table: "Tag" */
  update_Tag?: Maybe<Tag_Mutation_Response>;
  /** update data of the table: "TravelGuide" */
  update_TravelGuide?: Maybe<TravelGuide_Mutation_Response>;
  /** update data of the table: "TravelGuideArchSite" */
  update_TravelGuideArchSite?: Maybe<TravelGuideArchSite_Mutation_Response>;
  /** update data of the table: "TravelGuideHotel" */
  update_TravelGuideHotel?: Maybe<TravelGuideHotel_Mutation_Response>;
  /** update data of the table: "TravelGuideLocation" */
  update_TravelGuideLocation?: Maybe<TravelGuideLocation_Mutation_Response>;
  /** update data of the table: "TravelGuideMuseum" */
  update_TravelGuideMuseum?: Maybe<TravelGuideMuseum_Mutation_Response>;
  /** update data of the table: "TravelGuideRestaurant" */
  update_TravelGuideRestaurant?: Maybe<TravelGuideRestaurant_Mutation_Response>;
  /** update data of the table: "User" */
  update_User?: Maybe<User_Mutation_Response>;
  /** update data of the table: "UserType" */
  update_UserType?: Maybe<UserType_Mutation_Response>;
};


/** mutation root */
export type Mutation_RootDelete_AddressArgs = {
  where: Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteArgs = {
  where: ArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteCommentArgs = {
  where: ArchSiteComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteEntranceTypeArgs = {
  where: ArchSiteEntranceType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSitePriceArgs = {
  where: ArchSitePrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteTypeArgs = {
  where: ArchSiteType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteTypeArchSiteArgs = {
  where: ArchSiteTypeArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteWorkingDayArgs = {
  where: ArchSiteWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteWorkingDayScheduleArgs = {
  where: ArchSiteWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArchSiteWorkingScheduleArgs = {
  where: ArchSiteWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleArgs = {
  where: Article_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleTagArgs = {
  where: ArticleTag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleUserArgs = {
  where: ArticleUser_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CityArgs = {
  where: City_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CompanyArgs = {
  where: Company_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CompanyContactArgs = {
  where: CompanyContact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CompanyPhoneArgs = {
  where: CompanyPhone_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CompanyUserArgs = {
  where: CompanyUser_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CountryArgs = {
  where: Country_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DayArgs = {
  where: Day_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DistrictArgs = {
  where: District_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_HotelArgs = {
  where: Hotel_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_HotelCommentArgs = {
  where: HotelComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_HotelRoomArgs = {
  where: HotelRoom_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_HotelServiceArgs = {
  where: HotelService_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_HotelServicePropertyArgs = {
  where: HotelServiceProperty_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_LocationArgs = {
  where: Location_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_LoginTypeArgs = {
  where: LoginType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumArgs = {
  where: Museum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumCommentArgs = {
  where: MuseumComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumEntranceTypeArgs = {
  where: MuseumEntranceType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumPriceArgs = {
  where: MuseumPrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumTypeArgs = {
  where: MuseumType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumTypeMuseumArgs = {
  where: MuseumTypeMuseum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumWorkingDayArgs = {
  where: MuseumWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumWorkingDayScheduleArgs = {
  where: MuseumWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MuseumWorkingScheduleArgs = {
  where: MuseumWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_PhoneArgs = {
  where: Phone_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RegionArgs = {
  where: Region_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantArgs = {
  where: Restaurant_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantAndCuisineTypeArgs = {
  where: RestaurantAndCuisineType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantCommentArgs = {
  where: RestaurantComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantCuisineTypeArgs = {
  where: RestaurantCuisineType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantFoodArgs = {
  where: RestaurantFood_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantFoodTypeArgs = {
  where: RestaurantFoodType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantMenuArgs = {
  where: RestaurantMenu_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantMenuFoodArgs = {
  where: RestaurantMenuFood_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantTypeArgs = {
  where: RestaurantType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantWorkingDayArgs = {
  where: RestaurantWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantWorkingDayScheduleArgs = {
  where: RestaurantWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RestaurantWorkingScheduleArgs = {
  where: RestaurantWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RoomArgs = {
  where: Room_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RoomPictureArgs = {
  where: RoomPicture_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RoomPriceArgs = {
  where: RoomPrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RoomPropertyArgs = {
  where: RoomProperty_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_RoomPropertyRoomArgs = {
  where: RoomPropertyRoom_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TagArgs = {
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideArgs = {
  where: TravelGuide_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideArchSiteArgs = {
  where: TravelGuideArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideHotelArgs = {
  where: TravelGuideHotel_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideLocationArgs = {
  where: TravelGuideLocation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideMuseumArgs = {
  where: TravelGuideMuseum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_TravelGuideRestaurantArgs = {
  where: TravelGuideRestaurant_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_UserArgs = {
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_UserTypeArgs = {
  where: UserType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootInsert_AddressArgs = {
  objects: Array<Address_Insert_Input>;
  on_conflict?: Maybe<Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteArgs = {
  objects: Array<ArchSite_Insert_Input>;
  on_conflict?: Maybe<ArchSite_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteCommentArgs = {
  objects: Array<ArchSiteComment_Insert_Input>;
  on_conflict?: Maybe<ArchSiteComment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteEntranceTypeArgs = {
  objects: Array<ArchSiteEntranceType_Insert_Input>;
  on_conflict?: Maybe<ArchSiteEntranceType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSitePriceArgs = {
  objects: Array<ArchSitePrice_Insert_Input>;
  on_conflict?: Maybe<ArchSitePrice_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteTypeArgs = {
  objects: Array<ArchSiteType_Insert_Input>;
  on_conflict?: Maybe<ArchSiteType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteTypeArchSiteArgs = {
  objects: Array<ArchSiteTypeArchSite_Insert_Input>;
  on_conflict?: Maybe<ArchSiteTypeArchSite_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteWorkingDayArgs = {
  objects: Array<ArchSiteWorkingDay_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingDay_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteWorkingDayScheduleArgs = {
  objects: Array<ArchSiteWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingDaySchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArchSiteWorkingScheduleArgs = {
  objects: Array<ArchSiteWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<ArchSiteWorkingSchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleArgs = {
  objects: Array<Article_Insert_Input>;
  on_conflict?: Maybe<Article_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleTagArgs = {
  objects: Array<ArticleTag_Insert_Input>;
  on_conflict?: Maybe<ArticleTag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleUserArgs = {
  objects: Array<ArticleUser_Insert_Input>;
  on_conflict?: Maybe<ArticleUser_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CityArgs = {
  objects: Array<City_Insert_Input>;
  on_conflict?: Maybe<City_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CompanyArgs = {
  objects: Array<Company_Insert_Input>;
  on_conflict?: Maybe<Company_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CompanyContactArgs = {
  objects: Array<CompanyContact_Insert_Input>;
  on_conflict?: Maybe<CompanyContact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CompanyPhoneArgs = {
  objects: Array<CompanyPhone_Insert_Input>;
  on_conflict?: Maybe<CompanyPhone_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CompanyUserArgs = {
  objects: Array<CompanyUser_Insert_Input>;
  on_conflict?: Maybe<CompanyUser_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CountryArgs = {
  objects: Array<Country_Insert_Input>;
  on_conflict?: Maybe<Country_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DayArgs = {
  objects: Array<Day_Insert_Input>;
  on_conflict?: Maybe<Day_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DistrictArgs = {
  objects: Array<District_Insert_Input>;
  on_conflict?: Maybe<District_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_HotelArgs = {
  objects: Array<Hotel_Insert_Input>;
  on_conflict?: Maybe<Hotel_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_HotelCommentArgs = {
  objects: Array<HotelComment_Insert_Input>;
  on_conflict?: Maybe<HotelComment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_HotelRoomArgs = {
  objects: Array<HotelRoom_Insert_Input>;
  on_conflict?: Maybe<HotelRoom_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_HotelServiceArgs = {
  objects: Array<HotelService_Insert_Input>;
  on_conflict?: Maybe<HotelService_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_HotelServicePropertyArgs = {
  objects: Array<HotelServiceProperty_Insert_Input>;
  on_conflict?: Maybe<HotelServiceProperty_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LocationArgs = {
  objects: Array<Location_Insert_Input>;
  on_conflict?: Maybe<Location_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LoginTypeArgs = {
  objects: Array<LoginType_Insert_Input>;
  on_conflict?: Maybe<LoginType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumArgs = {
  objects: Array<Museum_Insert_Input>;
  on_conflict?: Maybe<Museum_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumCommentArgs = {
  objects: Array<MuseumComment_Insert_Input>;
  on_conflict?: Maybe<MuseumComment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumEntranceTypeArgs = {
  objects: Array<MuseumEntranceType_Insert_Input>;
  on_conflict?: Maybe<MuseumEntranceType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumPriceArgs = {
  objects: Array<MuseumPrice_Insert_Input>;
  on_conflict?: Maybe<MuseumPrice_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumTypeArgs = {
  objects: Array<MuseumType_Insert_Input>;
  on_conflict?: Maybe<MuseumType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumTypeMuseumArgs = {
  objects: Array<MuseumTypeMuseum_Insert_Input>;
  on_conflict?: Maybe<MuseumTypeMuseum_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumWorkingDayArgs = {
  objects: Array<MuseumWorkingDay_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingDay_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumWorkingDayScheduleArgs = {
  objects: Array<MuseumWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingDaySchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MuseumWorkingScheduleArgs = {
  objects: Array<MuseumWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<MuseumWorkingSchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PhoneArgs = {
  objects: Array<Phone_Insert_Input>;
  on_conflict?: Maybe<Phone_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RegionArgs = {
  objects: Array<Region_Insert_Input>;
  on_conflict?: Maybe<Region_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantArgs = {
  objects: Array<Restaurant_Insert_Input>;
  on_conflict?: Maybe<Restaurant_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantAndCuisineTypeArgs = {
  objects: Array<RestaurantAndCuisineType_Insert_Input>;
  on_conflict?: Maybe<RestaurantAndCuisineType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantCommentArgs = {
  objects: Array<RestaurantComment_Insert_Input>;
  on_conflict?: Maybe<RestaurantComment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantCuisineTypeArgs = {
  objects: Array<RestaurantCuisineType_Insert_Input>;
  on_conflict?: Maybe<RestaurantCuisineType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantFoodArgs = {
  objects: Array<RestaurantFood_Insert_Input>;
  on_conflict?: Maybe<RestaurantFood_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantFoodTypeArgs = {
  objects: Array<RestaurantFoodType_Insert_Input>;
  on_conflict?: Maybe<RestaurantFoodType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantMenuArgs = {
  objects: Array<RestaurantMenu_Insert_Input>;
  on_conflict?: Maybe<RestaurantMenu_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantMenuFoodArgs = {
  objects: Array<RestaurantMenuFood_Insert_Input>;
  on_conflict?: Maybe<RestaurantMenuFood_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantTypeArgs = {
  objects: Array<RestaurantType_Insert_Input>;
  on_conflict?: Maybe<RestaurantType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantWorkingDayArgs = {
  objects: Array<RestaurantWorkingDay_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingDay_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantWorkingDayScheduleArgs = {
  objects: Array<RestaurantWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingDaySchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RestaurantWorkingScheduleArgs = {
  objects: Array<RestaurantWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingSchedule_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RoomArgs = {
  objects: Array<Room_Insert_Input>;
  on_conflict?: Maybe<Room_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RoomPictureArgs = {
  objects: Array<RoomPicture_Insert_Input>;
  on_conflict?: Maybe<RoomPicture_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RoomPriceArgs = {
  objects: Array<RoomPrice_Insert_Input>;
  on_conflict?: Maybe<RoomPrice_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RoomPropertyArgs = {
  objects: Array<RoomProperty_Insert_Input>;
  on_conflict?: Maybe<RoomProperty_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_RoomPropertyRoomArgs = {
  objects: Array<RoomPropertyRoom_Insert_Input>;
  on_conflict?: Maybe<RoomPropertyRoom_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TagArgs = {
  objects: Array<Tag_Insert_Input>;
  on_conflict?: Maybe<Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideArgs = {
  objects: Array<TravelGuide_Insert_Input>;
  on_conflict?: Maybe<TravelGuide_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideArchSiteArgs = {
  objects: Array<TravelGuideArchSite_Insert_Input>;
  on_conflict?: Maybe<TravelGuideArchSite_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideHotelArgs = {
  objects: Array<TravelGuideHotel_Insert_Input>;
  on_conflict?: Maybe<TravelGuideHotel_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideLocationArgs = {
  objects: Array<TravelGuideLocation_Insert_Input>;
  on_conflict?: Maybe<TravelGuideLocation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideMuseumArgs = {
  objects: Array<TravelGuideMuseum_Insert_Input>;
  on_conflict?: Maybe<TravelGuideMuseum_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_TravelGuideRestaurantArgs = {
  objects: Array<TravelGuideRestaurant_Insert_Input>;
  on_conflict?: Maybe<TravelGuideRestaurant_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserArgs = {
  objects: Array<User_Insert_Input>;
  on_conflict?: Maybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UserTypeArgs = {
  objects: Array<UserType_Insert_Input>;
  on_conflict?: Maybe<UserType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUpdate_AddressArgs = {
  _inc?: Maybe<Address_Inc_Input>;
  _set?: Maybe<Address_Set_Input>;
  where: Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteArgs = {
  _inc?: Maybe<ArchSite_Inc_Input>;
  _set?: Maybe<ArchSite_Set_Input>;
  where: ArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteCommentArgs = {
  _inc?: Maybe<ArchSiteComment_Inc_Input>;
  _set?: Maybe<ArchSiteComment_Set_Input>;
  where: ArchSiteComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteEntranceTypeArgs = {
  _inc?: Maybe<ArchSiteEntranceType_Inc_Input>;
  _set?: Maybe<ArchSiteEntranceType_Set_Input>;
  where: ArchSiteEntranceType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSitePriceArgs = {
  _inc?: Maybe<ArchSitePrice_Inc_Input>;
  _set?: Maybe<ArchSitePrice_Set_Input>;
  where: ArchSitePrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteTypeArgs = {
  _inc?: Maybe<ArchSiteType_Inc_Input>;
  _set?: Maybe<ArchSiteType_Set_Input>;
  where: ArchSiteType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteTypeArchSiteArgs = {
  _inc?: Maybe<ArchSiteTypeArchSite_Inc_Input>;
  _set?: Maybe<ArchSiteTypeArchSite_Set_Input>;
  where: ArchSiteTypeArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteWorkingDayArgs = {
  _inc?: Maybe<ArchSiteWorkingDay_Inc_Input>;
  _set?: Maybe<ArchSiteWorkingDay_Set_Input>;
  where: ArchSiteWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteWorkingDayScheduleArgs = {
  _inc?: Maybe<ArchSiteWorkingDaySchedule_Inc_Input>;
  _set?: Maybe<ArchSiteWorkingDaySchedule_Set_Input>;
  where: ArchSiteWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArchSiteWorkingScheduleArgs = {
  _inc?: Maybe<ArchSiteWorkingSchedule_Inc_Input>;
  _set?: Maybe<ArchSiteWorkingSchedule_Set_Input>;
  where: ArchSiteWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleArgs = {
  _inc?: Maybe<Article_Inc_Input>;
  _set?: Maybe<Article_Set_Input>;
  where: Article_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleTagArgs = {
  _inc?: Maybe<ArticleTag_Inc_Input>;
  _set?: Maybe<ArticleTag_Set_Input>;
  where: ArticleTag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleUserArgs = {
  _inc?: Maybe<ArticleUser_Inc_Input>;
  _set?: Maybe<ArticleUser_Set_Input>;
  where: ArticleUser_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CityArgs = {
  _inc?: Maybe<City_Inc_Input>;
  _set?: Maybe<City_Set_Input>;
  where: City_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CompanyArgs = {
  _inc?: Maybe<Company_Inc_Input>;
  _set?: Maybe<Company_Set_Input>;
  where: Company_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CompanyContactArgs = {
  _inc?: Maybe<CompanyContact_Inc_Input>;
  _set?: Maybe<CompanyContact_Set_Input>;
  where: CompanyContact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CompanyPhoneArgs = {
  _inc?: Maybe<CompanyPhone_Inc_Input>;
  _set?: Maybe<CompanyPhone_Set_Input>;
  where: CompanyPhone_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CompanyUserArgs = {
  _inc?: Maybe<CompanyUser_Inc_Input>;
  _set?: Maybe<CompanyUser_Set_Input>;
  where: CompanyUser_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CountryArgs = {
  _inc?: Maybe<Country_Inc_Input>;
  _set?: Maybe<Country_Set_Input>;
  where: Country_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DayArgs = {
  _inc?: Maybe<Day_Inc_Input>;
  _set?: Maybe<Day_Set_Input>;
  where: Day_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DistrictArgs = {
  _inc?: Maybe<District_Inc_Input>;
  _set?: Maybe<District_Set_Input>;
  where: District_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_HotelArgs = {
  _inc?: Maybe<Hotel_Inc_Input>;
  _set?: Maybe<Hotel_Set_Input>;
  where: Hotel_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_HotelCommentArgs = {
  _inc?: Maybe<HotelComment_Inc_Input>;
  _set?: Maybe<HotelComment_Set_Input>;
  where: HotelComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_HotelRoomArgs = {
  _inc?: Maybe<HotelRoom_Inc_Input>;
  _set?: Maybe<HotelRoom_Set_Input>;
  where: HotelRoom_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_HotelServiceArgs = {
  _inc?: Maybe<HotelService_Inc_Input>;
  _set?: Maybe<HotelService_Set_Input>;
  where: HotelService_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_HotelServicePropertyArgs = {
  _inc?: Maybe<HotelServiceProperty_Inc_Input>;
  _set?: Maybe<HotelServiceProperty_Set_Input>;
  where: HotelServiceProperty_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_LocationArgs = {
  _inc?: Maybe<Location_Inc_Input>;
  _set?: Maybe<Location_Set_Input>;
  where: Location_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_LoginTypeArgs = {
  _inc?: Maybe<LoginType_Inc_Input>;
  _set?: Maybe<LoginType_Set_Input>;
  where: LoginType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumArgs = {
  _inc?: Maybe<Museum_Inc_Input>;
  _set?: Maybe<Museum_Set_Input>;
  where: Museum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumCommentArgs = {
  _inc?: Maybe<MuseumComment_Inc_Input>;
  _set?: Maybe<MuseumComment_Set_Input>;
  where: MuseumComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumEntranceTypeArgs = {
  _inc?: Maybe<MuseumEntranceType_Inc_Input>;
  _set?: Maybe<MuseumEntranceType_Set_Input>;
  where: MuseumEntranceType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumPriceArgs = {
  _inc?: Maybe<MuseumPrice_Inc_Input>;
  _set?: Maybe<MuseumPrice_Set_Input>;
  where: MuseumPrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumTypeArgs = {
  _inc?: Maybe<MuseumType_Inc_Input>;
  _set?: Maybe<MuseumType_Set_Input>;
  where: MuseumType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumTypeMuseumArgs = {
  _inc?: Maybe<MuseumTypeMuseum_Inc_Input>;
  _set?: Maybe<MuseumTypeMuseum_Set_Input>;
  where: MuseumTypeMuseum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumWorkingDayArgs = {
  _inc?: Maybe<MuseumWorkingDay_Inc_Input>;
  _set?: Maybe<MuseumWorkingDay_Set_Input>;
  where: MuseumWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumWorkingDayScheduleArgs = {
  _inc?: Maybe<MuseumWorkingDaySchedule_Inc_Input>;
  _set?: Maybe<MuseumWorkingDaySchedule_Set_Input>;
  where: MuseumWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MuseumWorkingScheduleArgs = {
  _inc?: Maybe<MuseumWorkingSchedule_Inc_Input>;
  _set?: Maybe<MuseumWorkingSchedule_Set_Input>;
  where: MuseumWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_PhoneArgs = {
  _inc?: Maybe<Phone_Inc_Input>;
  _set?: Maybe<Phone_Set_Input>;
  where: Phone_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RegionArgs = {
  _inc?: Maybe<Region_Inc_Input>;
  _set?: Maybe<Region_Set_Input>;
  where: Region_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantArgs = {
  _inc?: Maybe<Restaurant_Inc_Input>;
  _set?: Maybe<Restaurant_Set_Input>;
  where: Restaurant_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantAndCuisineTypeArgs = {
  _inc?: Maybe<RestaurantAndCuisineType_Inc_Input>;
  _set?: Maybe<RestaurantAndCuisineType_Set_Input>;
  where: RestaurantAndCuisineType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantCommentArgs = {
  _inc?: Maybe<RestaurantComment_Inc_Input>;
  _set?: Maybe<RestaurantComment_Set_Input>;
  where: RestaurantComment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantCuisineTypeArgs = {
  _inc?: Maybe<RestaurantCuisineType_Inc_Input>;
  _set?: Maybe<RestaurantCuisineType_Set_Input>;
  where: RestaurantCuisineType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantFoodArgs = {
  _inc?: Maybe<RestaurantFood_Inc_Input>;
  _set?: Maybe<RestaurantFood_Set_Input>;
  where: RestaurantFood_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantFoodTypeArgs = {
  _inc?: Maybe<RestaurantFoodType_Inc_Input>;
  _set?: Maybe<RestaurantFoodType_Set_Input>;
  where: RestaurantFoodType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantMenuArgs = {
  _inc?: Maybe<RestaurantMenu_Inc_Input>;
  _set?: Maybe<RestaurantMenu_Set_Input>;
  where: RestaurantMenu_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantMenuFoodArgs = {
  _inc?: Maybe<RestaurantMenuFood_Inc_Input>;
  _set?: Maybe<RestaurantMenuFood_Set_Input>;
  where: RestaurantMenuFood_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantTypeArgs = {
  _inc?: Maybe<RestaurantType_Inc_Input>;
  _set?: Maybe<RestaurantType_Set_Input>;
  where: RestaurantType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantWorkingDayArgs = {
  _inc?: Maybe<RestaurantWorkingDay_Inc_Input>;
  _set?: Maybe<RestaurantWorkingDay_Set_Input>;
  where: RestaurantWorkingDay_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantWorkingDayScheduleArgs = {
  _inc?: Maybe<RestaurantWorkingDaySchedule_Inc_Input>;
  _set?: Maybe<RestaurantWorkingDaySchedule_Set_Input>;
  where: RestaurantWorkingDaySchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RestaurantWorkingScheduleArgs = {
  _inc?: Maybe<RestaurantWorkingSchedule_Inc_Input>;
  _set?: Maybe<RestaurantWorkingSchedule_Set_Input>;
  where: RestaurantWorkingSchedule_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RoomArgs = {
  _inc?: Maybe<Room_Inc_Input>;
  _set?: Maybe<Room_Set_Input>;
  where: Room_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RoomPictureArgs = {
  _inc?: Maybe<RoomPicture_Inc_Input>;
  _set?: Maybe<RoomPicture_Set_Input>;
  where: RoomPicture_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RoomPriceArgs = {
  _inc?: Maybe<RoomPrice_Inc_Input>;
  _set?: Maybe<RoomPrice_Set_Input>;
  where: RoomPrice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RoomPropertyArgs = {
  _inc?: Maybe<RoomProperty_Inc_Input>;
  _set?: Maybe<RoomProperty_Set_Input>;
  where: RoomProperty_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_RoomPropertyRoomArgs = {
  _inc?: Maybe<RoomPropertyRoom_Inc_Input>;
  _set?: Maybe<RoomPropertyRoom_Set_Input>;
  where: RoomPropertyRoom_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TagArgs = {
  _inc?: Maybe<Tag_Inc_Input>;
  _set?: Maybe<Tag_Set_Input>;
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideArgs = {
  _inc?: Maybe<TravelGuide_Inc_Input>;
  _set?: Maybe<TravelGuide_Set_Input>;
  where: TravelGuide_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideArchSiteArgs = {
  _inc?: Maybe<TravelGuideArchSite_Inc_Input>;
  _set?: Maybe<TravelGuideArchSite_Set_Input>;
  where: TravelGuideArchSite_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideHotelArgs = {
  _inc?: Maybe<TravelGuideHotel_Inc_Input>;
  _set?: Maybe<TravelGuideHotel_Set_Input>;
  where: TravelGuideHotel_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideLocationArgs = {
  _inc?: Maybe<TravelGuideLocation_Inc_Input>;
  _set?: Maybe<TravelGuideLocation_Set_Input>;
  where: TravelGuideLocation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideMuseumArgs = {
  _inc?: Maybe<TravelGuideMuseum_Inc_Input>;
  _set?: Maybe<TravelGuideMuseum_Set_Input>;
  where: TravelGuideMuseum_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_TravelGuideRestaurantArgs = {
  _inc?: Maybe<TravelGuideRestaurant_Inc_Input>;
  _set?: Maybe<TravelGuideRestaurant_Set_Input>;
  where: TravelGuideRestaurant_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_UserArgs = {
  _inc?: Maybe<User_Inc_Input>;
  _set?: Maybe<User_Set_Input>;
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_UserTypeArgs = {
  _inc?: Maybe<UserType_Inc_Input>;
  _set?: Maybe<UserType_Set_Input>;
  where: UserType_Bool_Exp;
};

/** column ordering options */
export enum Order_By {
  /** in the ascending order, nulls last */
  Asc = 'asc',
  /** in the ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in the ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in the descending order, nulls first */
  Desc = 'desc',
  /** in the descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in the descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "Phone" */
export type Phone = {
  __typename?: 'Phone';
  /** An array relationship */
  CompanyPhones: Array<CompanyPhone>;
  /** An aggregated array relationship */
  CompanyPhones_aggregate: CompanyPhone_Aggregate;
  /** An array relationship */
  Users: Array<User>;
  /** An aggregated array relationship */
  Users_aggregate: User_Aggregate;
  isDeleted: Scalars['Boolean'];
  phone: Scalars['String'];
  phoneID: Scalars['Int'];
};


/** columns and relationships of "Phone" */
export type PhoneCompanyPhonesArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** columns and relationships of "Phone" */
export type PhoneCompanyPhones_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** columns and relationships of "Phone" */
export type PhoneUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "Phone" */
export type PhoneUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** aggregated selection of "Phone" */
export type Phone_Aggregate = {
  __typename?: 'Phone_aggregate';
  aggregate?: Maybe<Phone_Aggregate_Fields>;
  nodes: Array<Phone>;
};

/** aggregate fields of "Phone" */
export type Phone_Aggregate_Fields = {
  __typename?: 'Phone_aggregate_fields';
  avg?: Maybe<Phone_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Phone_Max_Fields>;
  min?: Maybe<Phone_Min_Fields>;
  stddev?: Maybe<Phone_Stddev_Fields>;
  stddev_pop?: Maybe<Phone_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Phone_Stddev_Samp_Fields>;
  sum?: Maybe<Phone_Sum_Fields>;
  var_pop?: Maybe<Phone_Var_Pop_Fields>;
  var_samp?: Maybe<Phone_Var_Samp_Fields>;
  variance?: Maybe<Phone_Variance_Fields>;
};


/** aggregate fields of "Phone" */
export type Phone_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Phone_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Phone" */
export type Phone_Aggregate_Order_By = {
  avg?: Maybe<Phone_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Phone_Max_Order_By>;
  min?: Maybe<Phone_Min_Order_By>;
  stddev?: Maybe<Phone_Stddev_Order_By>;
  stddev_pop?: Maybe<Phone_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Phone_Stddev_Samp_Order_By>;
  sum?: Maybe<Phone_Sum_Order_By>;
  var_pop?: Maybe<Phone_Var_Pop_Order_By>;
  var_samp?: Maybe<Phone_Var_Samp_Order_By>;
  variance?: Maybe<Phone_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Phone" */
export type Phone_Arr_Rel_Insert_Input = {
  data: Array<Phone_Insert_Input>;
  on_conflict?: Maybe<Phone_On_Conflict>;
};

/** aggregate avg on columns */
export type Phone_Avg_Fields = {
  __typename?: 'Phone_avg_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Phone" */
export type Phone_Avg_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Phone". All fields are combined with a logical 'AND'. */
export type Phone_Bool_Exp = {
  CompanyPhones?: Maybe<CompanyPhone_Bool_Exp>;
  Users?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Phone_Bool_Exp>>>;
  _not?: Maybe<Phone_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Phone_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  phoneID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "Phone" */
export enum Phone_Constraint {
  /** unique or primary key constraint */
  PhonePkey = 'Phone_pkey'
}

/** input type for incrementing integer columne in table "Phone" */
export type Phone_Inc_Input = {
  phoneID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Phone" */
export type Phone_Insert_Input = {
  CompanyPhones?: Maybe<CompanyPhone_Arr_Rel_Insert_Input>;
  Users?: Maybe<User_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Phone_Max_Fields = {
  __typename?: 'Phone_max_fields';
  phone?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "Phone" */
export type Phone_Max_Order_By = {
  phone?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Phone_Min_Fields = {
  __typename?: 'Phone_min_fields';
  phone?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "Phone" */
export type Phone_Min_Order_By = {
  phone?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** response of any mutation on the table "Phone" */
export type Phone_Mutation_Response = {
  __typename?: 'Phone_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Phone>;
};

/** input type for inserting object relation for remote table "Phone" */
export type Phone_Obj_Rel_Insert_Input = {
  data: Phone_Insert_Input;
  on_conflict?: Maybe<Phone_On_Conflict>;
};

/** on conflict condition type for table "Phone" */
export type Phone_On_Conflict = {
  constraint: Phone_Constraint;
  update_columns: Array<Phone_Update_Column>;
  where?: Maybe<Phone_Bool_Exp>;
};

/** ordering options when selecting data from "Phone" */
export type Phone_Order_By = {
  CompanyPhones_aggregate?: Maybe<CompanyPhone_Aggregate_Order_By>;
  Users_aggregate?: Maybe<User_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
};

/** select columns of table "Phone" */
export enum Phone_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Phone = 'phone',
  /** column name */
  PhoneId = 'phoneID'
}

/** input type for updating data in table "Phone" */
export type Phone_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Phone_Stddev_Fields = {
  __typename?: 'Phone_stddev_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Phone" */
export type Phone_Stddev_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Phone_Stddev_Pop_Fields = {
  __typename?: 'Phone_stddev_pop_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Phone" */
export type Phone_Stddev_Pop_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Phone_Stddev_Samp_Fields = {
  __typename?: 'Phone_stddev_samp_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Phone" */
export type Phone_Stddev_Samp_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Phone_Sum_Fields = {
  __typename?: 'Phone_sum_fields';
  phoneID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Phone" */
export type Phone_Sum_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** update columns of table "Phone" */
export enum Phone_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Phone = 'phone',
  /** column name */
  PhoneId = 'phoneID'
}

/** aggregate var_pop on columns */
export type Phone_Var_Pop_Fields = {
  __typename?: 'Phone_var_pop_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Phone" */
export type Phone_Var_Pop_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Phone_Var_Samp_Fields = {
  __typename?: 'Phone_var_samp_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Phone" */
export type Phone_Var_Samp_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Phone_Variance_Fields = {
  __typename?: 'Phone_variance_fields';
  phoneID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Phone" */
export type Phone_Variance_Order_By = {
  phoneID?: Maybe<Order_By>;
};

/** query root */
export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "Address" */
  Address: Array<Address>;
  /** fetch aggregated fields from the table: "Address" */
  Address_aggregate: Address_Aggregate;
  /** fetch data from the table: "Address" using primary key columns */
  Address_by_pk?: Maybe<Address>;
  /** fetch data from the table: "ArchSite" */
  ArchSite: Array<ArchSite>;
  /** fetch data from the table: "ArchSiteComment" */
  ArchSiteComment: Array<ArchSiteComment>;
  /** fetch aggregated fields from the table: "ArchSiteComment" */
  ArchSiteComment_aggregate: ArchSiteComment_Aggregate;
  /** fetch data from the table: "ArchSiteComment" using primary key columns */
  ArchSiteComment_by_pk?: Maybe<ArchSiteComment>;
  /** fetch data from the table: "ArchSiteEntranceType" */
  ArchSiteEntranceType: Array<ArchSiteEntranceType>;
  /** fetch aggregated fields from the table: "ArchSiteEntranceType" */
  ArchSiteEntranceType_aggregate: ArchSiteEntranceType_Aggregate;
  /** fetch data from the table: "ArchSiteEntranceType" using primary key columns */
  ArchSiteEntranceType_by_pk?: Maybe<ArchSiteEntranceType>;
  /** fetch data from the table: "ArchSitePrice" */
  ArchSitePrice: Array<ArchSitePrice>;
  /** fetch aggregated fields from the table: "ArchSitePrice" */
  ArchSitePrice_aggregate: ArchSitePrice_Aggregate;
  /** fetch data from the table: "ArchSitePrice" using primary key columns */
  ArchSitePrice_by_pk?: Maybe<ArchSitePrice>;
  /** fetch data from the table: "ArchSiteType" */
  ArchSiteType: Array<ArchSiteType>;
  /** fetch data from the table: "ArchSiteTypeArchSite" */
  ArchSiteTypeArchSite: Array<ArchSiteTypeArchSite>;
  /** fetch aggregated fields from the table: "ArchSiteTypeArchSite" */
  ArchSiteTypeArchSite_aggregate: ArchSiteTypeArchSite_Aggregate;
  /** fetch data from the table: "ArchSiteTypeArchSite" using primary key columns */
  ArchSiteTypeArchSite_by_pk?: Maybe<ArchSiteTypeArchSite>;
  /** fetch aggregated fields from the table: "ArchSiteType" */
  ArchSiteType_aggregate: ArchSiteType_Aggregate;
  /** fetch data from the table: "ArchSiteType" using primary key columns */
  ArchSiteType_by_pk?: Maybe<ArchSiteType>;
  /** fetch data from the table: "ArchSiteWorkingDay" */
  ArchSiteWorkingDay: Array<ArchSiteWorkingDay>;
  /** fetch data from the table: "ArchSiteWorkingDaySchedule" */
  ArchSiteWorkingDaySchedule: Array<ArchSiteWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingDaySchedule" */
  ArchSiteWorkingDaySchedule_aggregate: ArchSiteWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingDaySchedule" using primary key columns */
  ArchSiteWorkingDaySchedule_by_pk?: Maybe<ArchSiteWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingDay" */
  ArchSiteWorkingDay_aggregate: ArchSiteWorkingDay_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingDay" using primary key columns */
  ArchSiteWorkingDay_by_pk?: Maybe<ArchSiteWorkingDay>;
  /** fetch data from the table: "ArchSiteWorkingSchedule" */
  ArchSiteWorkingSchedule: Array<ArchSiteWorkingSchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingSchedule" */
  ArchSiteWorkingSchedule_aggregate: ArchSiteWorkingSchedule_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingSchedule" using primary key columns */
  ArchSiteWorkingSchedule_by_pk?: Maybe<ArchSiteWorkingSchedule>;
  /** fetch aggregated fields from the table: "ArchSite" */
  ArchSite_aggregate: ArchSite_Aggregate;
  /** fetch data from the table: "ArchSite" using primary key columns */
  ArchSite_by_pk?: Maybe<ArchSite>;
  /** fetch data from the table: "Article" */
  Article: Array<Article>;
  /** fetch data from the table: "ArticleTag" */
  ArticleTag: Array<ArticleTag>;
  /** fetch aggregated fields from the table: "ArticleTag" */
  ArticleTag_aggregate: ArticleTag_Aggregate;
  /** fetch data from the table: "ArticleTag" using primary key columns */
  ArticleTag_by_pk?: Maybe<ArticleTag>;
  /** fetch data from the table: "ArticleUser" */
  ArticleUser: Array<ArticleUser>;
  /** fetch aggregated fields from the table: "ArticleUser" */
  ArticleUser_aggregate: ArticleUser_Aggregate;
  /** fetch data from the table: "ArticleUser" using primary key columns */
  ArticleUser_by_pk?: Maybe<ArticleUser>;
  /** fetch aggregated fields from the table: "Article" */
  Article_aggregate: Article_Aggregate;
  /** fetch data from the table: "Article" using primary key columns */
  Article_by_pk?: Maybe<Article>;
  /** fetch data from the table: "City" */
  City: Array<City>;
  /** fetch aggregated fields from the table: "City" */
  City_aggregate: City_Aggregate;
  /** fetch data from the table: "City" using primary key columns */
  City_by_pk?: Maybe<City>;
  /** fetch data from the table: "Company" */
  Company: Array<Company>;
  /** fetch data from the table: "CompanyContact" */
  CompanyContact: Array<CompanyContact>;
  /** fetch aggregated fields from the table: "CompanyContact" */
  CompanyContact_aggregate: CompanyContact_Aggregate;
  /** fetch data from the table: "CompanyContact" using primary key columns */
  CompanyContact_by_pk?: Maybe<CompanyContact>;
  /** fetch data from the table: "CompanyPhone" */
  CompanyPhone: Array<CompanyPhone>;
  /** fetch aggregated fields from the table: "CompanyPhone" */
  CompanyPhone_aggregate: CompanyPhone_Aggregate;
  /** fetch data from the table: "CompanyPhone" using primary key columns */
  CompanyPhone_by_pk?: Maybe<CompanyPhone>;
  /** fetch data from the table: "CompanyUser" */
  CompanyUser: Array<CompanyUser>;
  /** fetch aggregated fields from the table: "CompanyUser" */
  CompanyUser_aggregate: CompanyUser_Aggregate;
  /** fetch data from the table: "CompanyUser" using primary key columns */
  CompanyUser_by_pk?: Maybe<CompanyUser>;
  /** fetch aggregated fields from the table: "Company" */
  Company_aggregate: Company_Aggregate;
  /** fetch data from the table: "Company" using primary key columns */
  Company_by_pk?: Maybe<Company>;
  /** fetch data from the table: "Country" */
  Country: Array<Country>;
  /** fetch aggregated fields from the table: "Country" */
  Country_aggregate: Country_Aggregate;
  /** fetch data from the table: "Country" using primary key columns */
  Country_by_pk?: Maybe<Country>;
  /** fetch data from the table: "Day" */
  Day: Array<Day>;
  /** fetch aggregated fields from the table: "Day" */
  Day_aggregate: Day_Aggregate;
  /** fetch data from the table: "Day" using primary key columns */
  Day_by_pk?: Maybe<Day>;
  /** fetch data from the table: "District" */
  District: Array<District>;
  /** fetch aggregated fields from the table: "District" */
  District_aggregate: District_Aggregate;
  /** fetch data from the table: "District" using primary key columns */
  District_by_pk?: Maybe<District>;
  /** fetch data from the table: "Hotel" */
  Hotel: Array<Hotel>;
  /** fetch data from the table: "HotelComment" */
  HotelComment: Array<HotelComment>;
  /** fetch aggregated fields from the table: "HotelComment" */
  HotelComment_aggregate: HotelComment_Aggregate;
  /** fetch data from the table: "HotelComment" using primary key columns */
  HotelComment_by_pk?: Maybe<HotelComment>;
  /** fetch data from the table: "HotelRoom" */
  HotelRoom: Array<HotelRoom>;
  /** fetch aggregated fields from the table: "HotelRoom" */
  HotelRoom_aggregate: HotelRoom_Aggregate;
  /** fetch data from the table: "HotelRoom" using primary key columns */
  HotelRoom_by_pk?: Maybe<HotelRoom>;
  /** fetch data from the table: "HotelService" */
  HotelService: Array<HotelService>;
  /** fetch data from the table: "HotelServiceProperty" */
  HotelServiceProperty: Array<HotelServiceProperty>;
  /** fetch aggregated fields from the table: "HotelServiceProperty" */
  HotelServiceProperty_aggregate: HotelServiceProperty_Aggregate;
  /** fetch data from the table: "HotelServiceProperty" using primary key columns */
  HotelServiceProperty_by_pk?: Maybe<HotelServiceProperty>;
  /** fetch aggregated fields from the table: "HotelService" */
  HotelService_aggregate: HotelService_Aggregate;
  /** fetch data from the table: "HotelService" using primary key columns */
  HotelService_by_pk?: Maybe<HotelService>;
  /** fetch aggregated fields from the table: "Hotel" */
  Hotel_aggregate: Hotel_Aggregate;
  /** fetch data from the table: "Hotel" using primary key columns */
  Hotel_by_pk?: Maybe<Hotel>;
  /** fetch data from the table: "Location" */
  Location: Array<Location>;
  /** fetch aggregated fields from the table: "Location" */
  Location_aggregate: Location_Aggregate;
  /** fetch data from the table: "Location" using primary key columns */
  Location_by_pk?: Maybe<Location>;
  /** fetch data from the table: "LoginType" */
  LoginType: Array<LoginType>;
  /** fetch aggregated fields from the table: "LoginType" */
  LoginType_aggregate: LoginType_Aggregate;
  /** fetch data from the table: "LoginType" using primary key columns */
  LoginType_by_pk?: Maybe<LoginType>;
  /** fetch data from the table: "Museum" */
  Museum: Array<Museum>;
  /** fetch data from the table: "MuseumComment" */
  MuseumComment: Array<MuseumComment>;
  /** fetch aggregated fields from the table: "MuseumComment" */
  MuseumComment_aggregate: MuseumComment_Aggregate;
  /** fetch data from the table: "MuseumComment" using primary key columns */
  MuseumComment_by_pk?: Maybe<MuseumComment>;
  /** fetch data from the table: "MuseumEntranceType" */
  MuseumEntranceType: Array<MuseumEntranceType>;
  /** fetch aggregated fields from the table: "MuseumEntranceType" */
  MuseumEntranceType_aggregate: MuseumEntranceType_Aggregate;
  /** fetch data from the table: "MuseumEntranceType" using primary key columns */
  MuseumEntranceType_by_pk?: Maybe<MuseumEntranceType>;
  /** fetch data from the table: "MuseumPrice" */
  MuseumPrice: Array<MuseumPrice>;
  /** fetch aggregated fields from the table: "MuseumPrice" */
  MuseumPrice_aggregate: MuseumPrice_Aggregate;
  /** fetch data from the table: "MuseumPrice" using primary key columns */
  MuseumPrice_by_pk?: Maybe<MuseumPrice>;
  /** fetch data from the table: "MuseumType" */
  MuseumType: Array<MuseumType>;
  /** fetch data from the table: "MuseumTypeMuseum" */
  MuseumTypeMuseum: Array<MuseumTypeMuseum>;
  /** fetch aggregated fields from the table: "MuseumTypeMuseum" */
  MuseumTypeMuseum_aggregate: MuseumTypeMuseum_Aggregate;
  /** fetch data from the table: "MuseumTypeMuseum" using primary key columns */
  MuseumTypeMuseum_by_pk?: Maybe<MuseumTypeMuseum>;
  /** fetch aggregated fields from the table: "MuseumType" */
  MuseumType_aggregate: MuseumType_Aggregate;
  /** fetch data from the table: "MuseumType" using primary key columns */
  MuseumType_by_pk?: Maybe<MuseumType>;
  /** fetch data from the table: "MuseumWorkingDay" */
  MuseumWorkingDay: Array<MuseumWorkingDay>;
  /** fetch data from the table: "MuseumWorkingDaySchedule" */
  MuseumWorkingDaySchedule: Array<MuseumWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingDaySchedule" */
  MuseumWorkingDaySchedule_aggregate: MuseumWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "MuseumWorkingDaySchedule" using primary key columns */
  MuseumWorkingDaySchedule_by_pk?: Maybe<MuseumWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingDay" */
  MuseumWorkingDay_aggregate: MuseumWorkingDay_Aggregate;
  /** fetch data from the table: "MuseumWorkingDay" using primary key columns */
  MuseumWorkingDay_by_pk?: Maybe<MuseumWorkingDay>;
  /** fetch data from the table: "MuseumWorkingSchedule" */
  MuseumWorkingSchedule: Array<MuseumWorkingSchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingSchedule" */
  MuseumWorkingSchedule_aggregate: MuseumWorkingSchedule_Aggregate;
  /** fetch data from the table: "MuseumWorkingSchedule" using primary key columns */
  MuseumWorkingSchedule_by_pk?: Maybe<MuseumWorkingSchedule>;
  /** fetch aggregated fields from the table: "Museum" */
  Museum_aggregate: Museum_Aggregate;
  /** fetch data from the table: "Museum" using primary key columns */
  Museum_by_pk?: Maybe<Museum>;
  /** fetch data from the table: "Phone" */
  Phone: Array<Phone>;
  /** fetch aggregated fields from the table: "Phone" */
  Phone_aggregate: Phone_Aggregate;
  /** fetch data from the table: "Phone" using primary key columns */
  Phone_by_pk?: Maybe<Phone>;
  /** fetch data from the table: "Region" */
  Region: Array<Region>;
  /** fetch aggregated fields from the table: "Region" */
  Region_aggregate: Region_Aggregate;
  /** fetch data from the table: "Region" using primary key columns */
  Region_by_pk?: Maybe<Region>;
  /** fetch data from the table: "Restaurant" */
  Restaurant: Array<Restaurant>;
  /** fetch data from the table: "RestaurantAndCuisineType" */
  RestaurantAndCuisineType: Array<RestaurantAndCuisineType>;
  /** fetch aggregated fields from the table: "RestaurantAndCuisineType" */
  RestaurantAndCuisineType_aggregate: RestaurantAndCuisineType_Aggregate;
  /** fetch data from the table: "RestaurantAndCuisineType" using primary key columns */
  RestaurantAndCuisineType_by_pk?: Maybe<RestaurantAndCuisineType>;
  /** fetch data from the table: "RestaurantComment" */
  RestaurantComment: Array<RestaurantComment>;
  /** fetch aggregated fields from the table: "RestaurantComment" */
  RestaurantComment_aggregate: RestaurantComment_Aggregate;
  /** fetch data from the table: "RestaurantComment" using primary key columns */
  RestaurantComment_by_pk?: Maybe<RestaurantComment>;
  /** fetch data from the table: "RestaurantCuisineType" */
  RestaurantCuisineType: Array<RestaurantCuisineType>;
  /** fetch aggregated fields from the table: "RestaurantCuisineType" */
  RestaurantCuisineType_aggregate: RestaurantCuisineType_Aggregate;
  /** fetch data from the table: "RestaurantCuisineType" using primary key columns */
  RestaurantCuisineType_by_pk?: Maybe<RestaurantCuisineType>;
  /** fetch data from the table: "RestaurantFood" */
  RestaurantFood: Array<RestaurantFood>;
  /** fetch data from the table: "RestaurantFoodType" */
  RestaurantFoodType: Array<RestaurantFoodType>;
  /** fetch aggregated fields from the table: "RestaurantFoodType" */
  RestaurantFoodType_aggregate: RestaurantFoodType_Aggregate;
  /** fetch data from the table: "RestaurantFoodType" using primary key columns */
  RestaurantFoodType_by_pk?: Maybe<RestaurantFoodType>;
  /** fetch aggregated fields from the table: "RestaurantFood" */
  RestaurantFood_aggregate: RestaurantFood_Aggregate;
  /** fetch data from the table: "RestaurantFood" using primary key columns */
  RestaurantFood_by_pk?: Maybe<RestaurantFood>;
  /** fetch data from the table: "RestaurantMenu" */
  RestaurantMenu: Array<RestaurantMenu>;
  /** fetch data from the table: "RestaurantMenuFood" */
  RestaurantMenuFood: Array<RestaurantMenuFood>;
  /** fetch aggregated fields from the table: "RestaurantMenuFood" */
  RestaurantMenuFood_aggregate: RestaurantMenuFood_Aggregate;
  /** fetch data from the table: "RestaurantMenuFood" using primary key columns */
  RestaurantMenuFood_by_pk?: Maybe<RestaurantMenuFood>;
  /** fetch aggregated fields from the table: "RestaurantMenu" */
  RestaurantMenu_aggregate: RestaurantMenu_Aggregate;
  /** fetch data from the table: "RestaurantMenu" using primary key columns */
  RestaurantMenu_by_pk?: Maybe<RestaurantMenu>;
  /** fetch data from the table: "RestaurantType" */
  RestaurantType: Array<RestaurantType>;
  /** fetch aggregated fields from the table: "RestaurantType" */
  RestaurantType_aggregate: RestaurantType_Aggregate;
  /** fetch data from the table: "RestaurantType" using primary key columns */
  RestaurantType_by_pk?: Maybe<RestaurantType>;
  /** fetch data from the table: "RestaurantWorkingDay" */
  RestaurantWorkingDay: Array<RestaurantWorkingDay>;
  /** fetch data from the table: "RestaurantWorkingDaySchedule" */
  RestaurantWorkingDaySchedule: Array<RestaurantWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingDaySchedule" */
  RestaurantWorkingDaySchedule_aggregate: RestaurantWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "RestaurantWorkingDaySchedule" using primary key columns */
  RestaurantWorkingDaySchedule_by_pk?: Maybe<RestaurantWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingDay" */
  RestaurantWorkingDay_aggregate: RestaurantWorkingDay_Aggregate;
  /** fetch data from the table: "RestaurantWorkingDay" using primary key columns */
  RestaurantWorkingDay_by_pk?: Maybe<RestaurantWorkingDay>;
  /** fetch data from the table: "RestaurantWorkingSchedule" */
  RestaurantWorkingSchedule: Array<RestaurantWorkingSchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingSchedule" */
  RestaurantWorkingSchedule_aggregate: RestaurantWorkingSchedule_Aggregate;
  /** fetch data from the table: "RestaurantWorkingSchedule" using primary key columns */
  RestaurantWorkingSchedule_by_pk?: Maybe<RestaurantWorkingSchedule>;
  /** fetch aggregated fields from the table: "Restaurant" */
  Restaurant_aggregate: Restaurant_Aggregate;
  /** fetch data from the table: "Restaurant" using primary key columns */
  Restaurant_by_pk?: Maybe<Restaurant>;
  /** fetch data from the table: "Room" */
  Room: Array<Room>;
  /** fetch data from the table: "RoomPicture" */
  RoomPicture: Array<RoomPicture>;
  /** fetch aggregated fields from the table: "RoomPicture" */
  RoomPicture_aggregate: RoomPicture_Aggregate;
  /** fetch data from the table: "RoomPicture" using primary key columns */
  RoomPicture_by_pk?: Maybe<RoomPicture>;
  /** fetch data from the table: "RoomPrice" */
  RoomPrice: Array<RoomPrice>;
  /** fetch aggregated fields from the table: "RoomPrice" */
  RoomPrice_aggregate: RoomPrice_Aggregate;
  /** fetch data from the table: "RoomPrice" using primary key columns */
  RoomPrice_by_pk?: Maybe<RoomPrice>;
  /** fetch data from the table: "RoomProperty" */
  RoomProperty: Array<RoomProperty>;
  /** fetch data from the table: "RoomPropertyRoom" */
  RoomPropertyRoom: Array<RoomPropertyRoom>;
  /** fetch aggregated fields from the table: "RoomPropertyRoom" */
  RoomPropertyRoom_aggregate: RoomPropertyRoom_Aggregate;
  /** fetch data from the table: "RoomPropertyRoom" using primary key columns */
  RoomPropertyRoom_by_pk?: Maybe<RoomPropertyRoom>;
  /** fetch aggregated fields from the table: "RoomProperty" */
  RoomProperty_aggregate: RoomProperty_Aggregate;
  /** fetch data from the table: "RoomProperty" using primary key columns */
  RoomProperty_by_pk?: Maybe<RoomProperty>;
  /** fetch aggregated fields from the table: "Room" */
  Room_aggregate: Room_Aggregate;
  /** fetch data from the table: "Room" using primary key columns */
  Room_by_pk?: Maybe<Room>;
  /** fetch data from the table: "Tag" */
  Tag: Array<Tag>;
  /** fetch aggregated fields from the table: "Tag" */
  Tag_aggregate: Tag_Aggregate;
  /** fetch data from the table: "Tag" using primary key columns */
  Tag_by_pk?: Maybe<Tag>;
  /** fetch data from the table: "TravelGuide" */
  TravelGuide: Array<TravelGuide>;
  /** fetch data from the table: "TravelGuideArchSite" */
  TravelGuideArchSite: Array<TravelGuideArchSite>;
  /** fetch aggregated fields from the table: "TravelGuideArchSite" */
  TravelGuideArchSite_aggregate: TravelGuideArchSite_Aggregate;
  /** fetch data from the table: "TravelGuideArchSite" using primary key columns */
  TravelGuideArchSite_by_pk?: Maybe<TravelGuideArchSite>;
  /** fetch data from the table: "TravelGuideHotel" */
  TravelGuideHotel: Array<TravelGuideHotel>;
  /** fetch aggregated fields from the table: "TravelGuideHotel" */
  TravelGuideHotel_aggregate: TravelGuideHotel_Aggregate;
  /** fetch data from the table: "TravelGuideHotel" using primary key columns */
  TravelGuideHotel_by_pk?: Maybe<TravelGuideHotel>;
  /** fetch data from the table: "TravelGuideLocation" */
  TravelGuideLocation: Array<TravelGuideLocation>;
  /** fetch aggregated fields from the table: "TravelGuideLocation" */
  TravelGuideLocation_aggregate: TravelGuideLocation_Aggregate;
  /** fetch data from the table: "TravelGuideLocation" using primary key columns */
  TravelGuideLocation_by_pk?: Maybe<TravelGuideLocation>;
  /** fetch data from the table: "TravelGuideMuseum" */
  TravelGuideMuseum: Array<TravelGuideMuseum>;
  /** fetch aggregated fields from the table: "TravelGuideMuseum" */
  TravelGuideMuseum_aggregate: TravelGuideMuseum_Aggregate;
  /** fetch data from the table: "TravelGuideMuseum" using primary key columns */
  TravelGuideMuseum_by_pk?: Maybe<TravelGuideMuseum>;
  /** fetch data from the table: "TravelGuideRestaurant" */
  TravelGuideRestaurant: Array<TravelGuideRestaurant>;
  /** fetch aggregated fields from the table: "TravelGuideRestaurant" */
  TravelGuideRestaurant_aggregate: TravelGuideRestaurant_Aggregate;
  /** fetch data from the table: "TravelGuideRestaurant" using primary key columns */
  TravelGuideRestaurant_by_pk?: Maybe<TravelGuideRestaurant>;
  /** fetch aggregated fields from the table: "TravelGuide" */
  TravelGuide_aggregate: TravelGuide_Aggregate;
  /** fetch data from the table: "TravelGuide" using primary key columns */
  TravelGuide_by_pk?: Maybe<TravelGuide>;
  /** fetch data from the table: "User" */
  User: Array<User>;
  /** fetch data from the table: "UserType" */
  UserType: Array<UserType>;
  /** fetch aggregated fields from the table: "UserType" */
  UserType_aggregate: UserType_Aggregate;
  /** fetch data from the table: "UserType" using primary key columns */
  UserType_by_pk?: Maybe<UserType>;
  /** fetch aggregated fields from the table: "User" */
  User_aggregate: User_Aggregate;
  /** fetch data from the table: "User" using primary key columns */
  User_by_pk?: Maybe<User>;
};


/** query root */
export type Query_RootAddressArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** query root */
export type Query_RootAddress_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** query root */
export type Query_RootAddress_By_PkArgs = {
  addressID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteCommentArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteComment_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteComment_By_PkArgs = {
  archSiteCommentID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteEntranceTypeArgs = {
  distinct_on?: Maybe<Array<ArchSiteEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteEntranceType_Order_By>>;
  where?: Maybe<ArchSiteEntranceType_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteEntranceType_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteEntranceType_Order_By>>;
  where?: Maybe<ArchSiteEntranceType_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteEntranceType_By_PkArgs = {
  archSiteEntranceTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSitePriceArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** query root */
export type Query_RootArchSitePrice_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** query root */
export type Query_RootArchSitePrice_By_PkArgs = {
  archSitePriceID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteTypeArgs = {
  distinct_on?: Maybe<Array<ArchSiteType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteType_Order_By>>;
  where?: Maybe<ArchSiteType_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteTypeArchSiteArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteTypeArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteTypeArchSite_By_PkArgs = {
  archSiteTypeArchSiteID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteType_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteType_Order_By>>;
  where?: Maybe<ArchSiteType_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteType_By_PkArgs = {
  archSiteTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteWorkingDayArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingDaySchedule_By_PkArgs = {
  archSiteWorkingDayScheduleID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingDay_By_PkArgs = {
  archSiteWorkingDayID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSiteWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootArchSiteWorkingSchedule_By_PkArgs = {
  archSiteWorkingScheduleID: Scalars['Int'];
};


/** query root */
export type Query_RootArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootArchSite_By_PkArgs = {
  archSiteID: Scalars['Int'];
};


/** query root */
export type Query_RootArticleArgs = {
  distinct_on?: Maybe<Array<Article_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Article_Order_By>>;
  where?: Maybe<Article_Bool_Exp>;
};


/** query root */
export type Query_RootArticleTagArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** query root */
export type Query_RootArticleTag_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** query root */
export type Query_RootArticleTag_By_PkArgs = {
  articleTagID: Scalars['Int'];
};


/** query root */
export type Query_RootArticleUserArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** query root */
export type Query_RootArticleUser_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** query root */
export type Query_RootArticleUser_By_PkArgs = {
  articleUserID: Scalars['Int'];
};


/** query root */
export type Query_RootArticle_AggregateArgs = {
  distinct_on?: Maybe<Array<Article_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Article_Order_By>>;
  where?: Maybe<Article_Bool_Exp>;
};


/** query root */
export type Query_RootArticle_By_PkArgs = {
  articleID: Scalars['Int'];
};


/** query root */
export type Query_RootCityArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** query root */
export type Query_RootCity_AggregateArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** query root */
export type Query_RootCity_By_PkArgs = {
  cityID: Scalars['Int'];
};


/** query root */
export type Query_RootCompanyArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyContactArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyContact_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyContact_By_PkArgs = {
  companyContactID: Scalars['Int'];
};


/** query root */
export type Query_RootCompanyPhoneArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyPhone_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyPhone_By_PkArgs = {
  companyPhoneID: Scalars['Int'];
};


/** query root */
export type Query_RootCompanyUserArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyUser_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** query root */
export type Query_RootCompanyUser_By_PkArgs = {
  companyUserID: Scalars['Int'];
};


/** query root */
export type Query_RootCompany_AggregateArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** query root */
export type Query_RootCompany_By_PkArgs = {
  companyID: Scalars['Int'];
};


/** query root */
export type Query_RootCountryArgs = {
  distinct_on?: Maybe<Array<Country_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Country_Order_By>>;
  where?: Maybe<Country_Bool_Exp>;
};


/** query root */
export type Query_RootCountry_AggregateArgs = {
  distinct_on?: Maybe<Array<Country_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Country_Order_By>>;
  where?: Maybe<Country_Bool_Exp>;
};


/** query root */
export type Query_RootCountry_By_PkArgs = {
  countryID: Scalars['Int'];
};


/** query root */
export type Query_RootDayArgs = {
  distinct_on?: Maybe<Array<Day_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Day_Order_By>>;
  where?: Maybe<Day_Bool_Exp>;
};


/** query root */
export type Query_RootDay_AggregateArgs = {
  distinct_on?: Maybe<Array<Day_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Day_Order_By>>;
  where?: Maybe<Day_Bool_Exp>;
};


/** query root */
export type Query_RootDay_By_PkArgs = {
  dayID: Scalars['Int'];
};


/** query root */
export type Query_RootDistrictArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};


/** query root */
export type Query_RootDistrict_AggregateArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};


/** query root */
export type Query_RootDistrict_By_PkArgs = {
  districtID: Scalars['Int'];
};


/** query root */
export type Query_RootHotelArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** query root */
export type Query_RootHotelCommentArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** query root */
export type Query_RootHotelComment_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** query root */
export type Query_RootHotelComment_By_PkArgs = {
  hotelCommentID: Scalars['Int'];
};


/** query root */
export type Query_RootHotelRoomArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** query root */
export type Query_RootHotelRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** query root */
export type Query_RootHotelRoom_By_PkArgs = {
  hotelRoomID: Scalars['Int'];
};


/** query root */
export type Query_RootHotelServiceArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** query root */
export type Query_RootHotelServicePropertyArgs = {
  distinct_on?: Maybe<Array<HotelServiceProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelServiceProperty_Order_By>>;
  where?: Maybe<HotelServiceProperty_Bool_Exp>;
};


/** query root */
export type Query_RootHotelServiceProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelServiceProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelServiceProperty_Order_By>>;
  where?: Maybe<HotelServiceProperty_Bool_Exp>;
};


/** query root */
export type Query_RootHotelServiceProperty_By_PkArgs = {
  hotelServicePropertyID: Scalars['Int'];
};


/** query root */
export type Query_RootHotelService_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** query root */
export type Query_RootHotelService_By_PkArgs = {
  hotelServiceHotelID: Scalars['Int'];
};


/** query root */
export type Query_RootHotel_AggregateArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** query root */
export type Query_RootHotel_By_PkArgs = {
  hotelID: Scalars['Int'];
};


/** query root */
export type Query_RootLocationArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};


/** query root */
export type Query_RootLocation_AggregateArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};


/** query root */
export type Query_RootLocation_By_PkArgs = {
  locationID: Scalars['Int'];
};


/** query root */
export type Query_RootLoginTypeArgs = {
  distinct_on?: Maybe<Array<LoginType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<LoginType_Order_By>>;
  where?: Maybe<LoginType_Bool_Exp>;
};


/** query root */
export type Query_RootLoginType_AggregateArgs = {
  distinct_on?: Maybe<Array<LoginType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<LoginType_Order_By>>;
  where?: Maybe<LoginType_Bool_Exp>;
};


/** query root */
export type Query_RootLoginType_By_PkArgs = {
  loginTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumCommentArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumComment_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumComment_By_PkArgs = {
  museumCommentID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumEntranceTypeArgs = {
  distinct_on?: Maybe<Array<MuseumEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumEntranceType_Order_By>>;
  where?: Maybe<MuseumEntranceType_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumEntranceType_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumEntranceType_Order_By>>;
  where?: Maybe<MuseumEntranceType_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumEntranceType_By_PkArgs = {
  museumEntranceTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumPriceArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumPrice_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumPrice_By_PkArgs = {
  museumPriceID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumTypeArgs = {
  distinct_on?: Maybe<Array<MuseumType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumType_Order_By>>;
  where?: Maybe<MuseumType_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumTypeMuseumArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumTypeMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumTypeMuseum_By_PkArgs = {
  museumTypeMuseumID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumType_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumType_Order_By>>;
  where?: Maybe<MuseumType_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumType_By_PkArgs = {
  museumTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumWorkingDayArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingDaySchedule_By_PkArgs = {
  museumWorkingDayScheduleID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingDay_By_PkArgs = {
  museumWorkingDayID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseumWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootMuseumWorkingSchedule_By_PkArgs = {
  museumWorkingScheduleID: Scalars['Int'];
};


/** query root */
export type Query_RootMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** query root */
export type Query_RootMuseum_By_PkArgs = {
  museumID: Scalars['Int'];
};


/** query root */
export type Query_RootPhoneArgs = {
  distinct_on?: Maybe<Array<Phone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Phone_Order_By>>;
  where?: Maybe<Phone_Bool_Exp>;
};


/** query root */
export type Query_RootPhone_AggregateArgs = {
  distinct_on?: Maybe<Array<Phone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Phone_Order_By>>;
  where?: Maybe<Phone_Bool_Exp>;
};


/** query root */
export type Query_RootPhone_By_PkArgs = {
  phoneID: Scalars['Int'];
};


/** query root */
export type Query_RootRegionArgs = {
  distinct_on?: Maybe<Array<Region_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Region_Order_By>>;
  where?: Maybe<Region_Bool_Exp>;
};


/** query root */
export type Query_RootRegion_AggregateArgs = {
  distinct_on?: Maybe<Array<Region_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Region_Order_By>>;
  where?: Maybe<Region_Bool_Exp>;
};


/** query root */
export type Query_RootRegion_By_PkArgs = {
  regionID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantAndCuisineTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantAndCuisineType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantAndCuisineType_By_PkArgs = {
  restaurantAndCuisineTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantCommentArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantComment_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantComment_By_PkArgs = {
  restaurantCommentID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantCuisineTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantCuisineType_Order_By>>;
  where?: Maybe<RestaurantCuisineType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantCuisineType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantCuisineType_Order_By>>;
  where?: Maybe<RestaurantCuisineType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantCuisineType_By_PkArgs = {
  restaurantCuisineTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantFoodArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantFoodTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantFoodType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFoodType_Order_By>>;
  where?: Maybe<RestaurantFoodType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantFoodType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantFoodType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFoodType_Order_By>>;
  where?: Maybe<RestaurantFoodType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantFoodType_By_PkArgs = {
  restaurantFoodTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantFood_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantFood_By_PkArgs = {
  restaurantFoodID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantMenuArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantMenuFoodArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantMenuFood_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantMenuFood_By_PkArgs = {
  restaurantMenuFoodID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantMenu_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantMenu_By_PkArgs = {
  restaurantMenuID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantType_Order_By>>;
  where?: Maybe<RestaurantType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantType_Order_By>>;
  where?: Maybe<RestaurantType_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantType_By_PkArgs = {
  restaurantTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantWorkingDayArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingDaySchedule_By_PkArgs = {
  restaurantWorkingDaySchedule: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingDay_By_PkArgs = {
  restaurantWorkingDayID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurantWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurantWorkingSchedule_By_PkArgs = {
  restaurantWorkingScheduleID: Scalars['Int'];
};


/** query root */
export type Query_RootRestaurant_AggregateArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** query root */
export type Query_RootRestaurant_By_PkArgs = {
  restaurantID: Scalars['Int'];
};


/** query root */
export type Query_RootRoomArgs = {
  distinct_on?: Maybe<Array<Room_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Room_Order_By>>;
  where?: Maybe<Room_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPictureArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPicture_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPicture_By_PkArgs = {
  roomPictureID: Scalars['Int'];
};


/** query root */
export type Query_RootRoomPriceArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPrice_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPrice_By_PkArgs = {
  roomPriceID: Scalars['Int'];
};


/** query root */
export type Query_RootRoomPropertyArgs = {
  distinct_on?: Maybe<Array<RoomProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomProperty_Order_By>>;
  where?: Maybe<RoomProperty_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPropertyRoomArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPropertyRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** query root */
export type Query_RootRoomPropertyRoom_By_PkArgs = {
  roomPropertyRoomID: Scalars['Int'];
};


/** query root */
export type Query_RootRoomProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomProperty_Order_By>>;
  where?: Maybe<RoomProperty_Bool_Exp>;
};


/** query root */
export type Query_RootRoomProperty_By_PkArgs = {
  roomPropertyID: Scalars['Int'];
};


/** query root */
export type Query_RootRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<Room_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Room_Order_By>>;
  where?: Maybe<Room_Bool_Exp>;
};


/** query root */
export type Query_RootRoom_By_PkArgs = {
  roomID: Scalars['Int'];
};


/** query root */
export type Query_RootTagArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** query root */
export type Query_RootTag_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** query root */
export type Query_RootTag_By_PkArgs = {
  tagID: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuideArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideArchSiteArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideArchSite_By_PkArgs = {
  travelGuideArchSiteID: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuideHotelArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideHotel_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideHotel_By_PkArgs = {
  travelGuideHotel: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuideLocationArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideLocation_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideLocation_By_PkArgs = {
  travelGuideLocationID: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuideMuseumArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideMuseum_By_PkArgs = {
  travelGuideMuseumID: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuideRestaurantArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideRestaurant_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuideRestaurant_By_PkArgs = {
  travelGuideRestaurantID: Scalars['Int'];
};


/** query root */
export type Query_RootTravelGuide_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};


/** query root */
export type Query_RootTravelGuide_By_PkArgs = {
  travelGuideID: Scalars['Int'];
};


/** query root */
export type Query_RootUserArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** query root */
export type Query_RootUserTypeArgs = {
  distinct_on?: Maybe<Array<UserType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<UserType_Order_By>>;
  where?: Maybe<UserType_Bool_Exp>;
};


/** query root */
export type Query_RootUserType_AggregateArgs = {
  distinct_on?: Maybe<Array<UserType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<UserType_Order_By>>;
  where?: Maybe<UserType_Bool_Exp>;
};


/** query root */
export type Query_RootUserType_By_PkArgs = {
  userTypeID: Scalars['Int'];
};


/** query root */
export type Query_RootUser_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** query root */
export type Query_RootUser_By_PkArgs = {
  userID: Scalars['Int'];
};

/** columns and relationships of "Region" */
export type Region = {
  __typename?: 'Region';
  /** An array relationship */
  Cities: Array<City>;
  /** An aggregated array relationship */
  Cities_aggregate: City_Aggregate;
  region: Scalars['String'];
  regionID: Scalars['Int'];
};


/** columns and relationships of "Region" */
export type RegionCitiesArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** columns and relationships of "Region" */
export type RegionCities_AggregateArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};

/** aggregated selection of "Region" */
export type Region_Aggregate = {
  __typename?: 'Region_aggregate';
  aggregate?: Maybe<Region_Aggregate_Fields>;
  nodes: Array<Region>;
};

/** aggregate fields of "Region" */
export type Region_Aggregate_Fields = {
  __typename?: 'Region_aggregate_fields';
  avg?: Maybe<Region_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Region_Max_Fields>;
  min?: Maybe<Region_Min_Fields>;
  stddev?: Maybe<Region_Stddev_Fields>;
  stddev_pop?: Maybe<Region_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Region_Stddev_Samp_Fields>;
  sum?: Maybe<Region_Sum_Fields>;
  var_pop?: Maybe<Region_Var_Pop_Fields>;
  var_samp?: Maybe<Region_Var_Samp_Fields>;
  variance?: Maybe<Region_Variance_Fields>;
};


/** aggregate fields of "Region" */
export type Region_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Region_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Region" */
export type Region_Aggregate_Order_By = {
  avg?: Maybe<Region_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Region_Max_Order_By>;
  min?: Maybe<Region_Min_Order_By>;
  stddev?: Maybe<Region_Stddev_Order_By>;
  stddev_pop?: Maybe<Region_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Region_Stddev_Samp_Order_By>;
  sum?: Maybe<Region_Sum_Order_By>;
  var_pop?: Maybe<Region_Var_Pop_Order_By>;
  var_samp?: Maybe<Region_Var_Samp_Order_By>;
  variance?: Maybe<Region_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Region" */
export type Region_Arr_Rel_Insert_Input = {
  data: Array<Region_Insert_Input>;
  on_conflict?: Maybe<Region_On_Conflict>;
};

/** aggregate avg on columns */
export type Region_Avg_Fields = {
  __typename?: 'Region_avg_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Region" */
export type Region_Avg_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Region". All fields are combined with a logical 'AND'. */
export type Region_Bool_Exp = {
  Cities?: Maybe<City_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Region_Bool_Exp>>>;
  _not?: Maybe<Region_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Region_Bool_Exp>>>;
  region?: Maybe<String_Comparison_Exp>;
  regionID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "Region" */
export enum Region_Constraint {
  /** unique or primary key constraint */
  RegionPkey = 'Region_pkey'
}

/** input type for incrementing integer columne in table "Region" */
export type Region_Inc_Input = {
  regionID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Region" */
export type Region_Insert_Input = {
  Cities?: Maybe<City_Arr_Rel_Insert_Input>;
  region?: Maybe<Scalars['String']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Region_Max_Fields = {
  __typename?: 'Region_max_fields';
  region?: Maybe<Scalars['String']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "Region" */
export type Region_Max_Order_By = {
  region?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Region_Min_Fields = {
  __typename?: 'Region_min_fields';
  region?: Maybe<Scalars['String']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "Region" */
export type Region_Min_Order_By = {
  region?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** response of any mutation on the table "Region" */
export type Region_Mutation_Response = {
  __typename?: 'Region_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Region>;
};

/** input type for inserting object relation for remote table "Region" */
export type Region_Obj_Rel_Insert_Input = {
  data: Region_Insert_Input;
  on_conflict?: Maybe<Region_On_Conflict>;
};

/** on conflict condition type for table "Region" */
export type Region_On_Conflict = {
  constraint: Region_Constraint;
  update_columns: Array<Region_Update_Column>;
  where?: Maybe<Region_Bool_Exp>;
};

/** ordering options when selecting data from "Region" */
export type Region_Order_By = {
  Cities_aggregate?: Maybe<City_Aggregate_Order_By>;
  region?: Maybe<Order_By>;
  regionID?: Maybe<Order_By>;
};

/** select columns of table "Region" */
export enum Region_Select_Column {
  /** column name */
  Region = 'region',
  /** column name */
  RegionId = 'regionID'
}

/** input type for updating data in table "Region" */
export type Region_Set_Input = {
  region?: Maybe<Scalars['String']>;
  regionID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Region_Stddev_Fields = {
  __typename?: 'Region_stddev_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Region" */
export type Region_Stddev_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Region_Stddev_Pop_Fields = {
  __typename?: 'Region_stddev_pop_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Region" */
export type Region_Stddev_Pop_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Region_Stddev_Samp_Fields = {
  __typename?: 'Region_stddev_samp_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Region" */
export type Region_Stddev_Samp_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Region_Sum_Fields = {
  __typename?: 'Region_sum_fields';
  regionID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Region" */
export type Region_Sum_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** update columns of table "Region" */
export enum Region_Update_Column {
  /** column name */
  Region = 'region',
  /** column name */
  RegionId = 'regionID'
}

/** aggregate var_pop on columns */
export type Region_Var_Pop_Fields = {
  __typename?: 'Region_var_pop_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Region" */
export type Region_Var_Pop_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Region_Var_Samp_Fields = {
  __typename?: 'Region_var_samp_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Region" */
export type Region_Var_Samp_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Region_Variance_Fields = {
  __typename?: 'Region_variance_fields';
  regionID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Region" */
export type Region_Variance_Order_By = {
  regionID?: Maybe<Order_By>;
};

/** columns and relationships of "Restaurant" */
export type Restaurant = {
  __typename?: 'Restaurant';
  /** An object relationship */
  Company: Company;
  ISO?: Maybe<Scalars['String']>;
  /** An object relationship */
  Location: Location;
  /** An array relationship */
  RestaurantAndCuisineTypes: Array<RestaurantAndCuisineType>;
  /** An aggregated array relationship */
  RestaurantAndCuisineTypes_aggregate: RestaurantAndCuisineType_Aggregate;
  /** An array relationship */
  RestaurantComments: Array<RestaurantComment>;
  /** An aggregated array relationship */
  RestaurantComments_aggregate: RestaurantComment_Aggregate;
  /** An array relationship */
  RestaurantMenus: Array<RestaurantMenu>;
  /** An aggregated array relationship */
  RestaurantMenus_aggregate: RestaurantMenu_Aggregate;
  /** An object relationship */
  RestaurantType: RestaurantType;
  /** An array relationship */
  RestaurantWorkingSchedules: Array<RestaurantWorkingSchedule>;
  /** An aggregated array relationship */
  RestaurantWorkingSchedules_aggregate: RestaurantWorkingSchedule_Aggregate;
  /** An array relationship */
  TravelGuideRestaurants: Array<TravelGuideRestaurant>;
  /** An aggregated array relationship */
  TravelGuideRestaurants_aggregate: TravelGuideRestaurant_Aggregate;
  companyID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  name: Scalars['String'];
  restaurantID: Scalars['Int'];
  restaurantTypeID: Scalars['Int'];
  since: Scalars['date'];
  star?: Maybe<Scalars['Float']>;
  taxNumber: Scalars['String'];
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantAndCuisineTypesArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantAndCuisineTypes_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantCommentsArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantComments_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantMenusArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantMenus_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantWorkingSchedulesArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantRestaurantWorkingSchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantTravelGuideRestaurantsArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** columns and relationships of "Restaurant" */
export type RestaurantTravelGuideRestaurants_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};

/** aggregated selection of "Restaurant" */
export type Restaurant_Aggregate = {
  __typename?: 'Restaurant_aggregate';
  aggregate?: Maybe<Restaurant_Aggregate_Fields>;
  nodes: Array<Restaurant>;
};

/** aggregate fields of "Restaurant" */
export type Restaurant_Aggregate_Fields = {
  __typename?: 'Restaurant_aggregate_fields';
  avg?: Maybe<Restaurant_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Restaurant_Max_Fields>;
  min?: Maybe<Restaurant_Min_Fields>;
  stddev?: Maybe<Restaurant_Stddev_Fields>;
  stddev_pop?: Maybe<Restaurant_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Restaurant_Stddev_Samp_Fields>;
  sum?: Maybe<Restaurant_Sum_Fields>;
  var_pop?: Maybe<Restaurant_Var_Pop_Fields>;
  var_samp?: Maybe<Restaurant_Var_Samp_Fields>;
  variance?: Maybe<Restaurant_Variance_Fields>;
};


/** aggregate fields of "Restaurant" */
export type Restaurant_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Restaurant_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Restaurant" */
export type Restaurant_Aggregate_Order_By = {
  avg?: Maybe<Restaurant_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Restaurant_Max_Order_By>;
  min?: Maybe<Restaurant_Min_Order_By>;
  stddev?: Maybe<Restaurant_Stddev_Order_By>;
  stddev_pop?: Maybe<Restaurant_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Restaurant_Stddev_Samp_Order_By>;
  sum?: Maybe<Restaurant_Sum_Order_By>;
  var_pop?: Maybe<Restaurant_Var_Pop_Order_By>;
  var_samp?: Maybe<Restaurant_Var_Samp_Order_By>;
  variance?: Maybe<Restaurant_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Restaurant" */
export type Restaurant_Arr_Rel_Insert_Input = {
  data: Array<Restaurant_Insert_Input>;
  on_conflict?: Maybe<Restaurant_On_Conflict>;
};

/** aggregate avg on columns */
export type Restaurant_Avg_Fields = {
  __typename?: 'Restaurant_avg_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Restaurant" */
export type Restaurant_Avg_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Restaurant". All fields are combined with a logical 'AND'. */
export type Restaurant_Bool_Exp = {
  Company?: Maybe<Company_Bool_Exp>;
  ISO?: Maybe<String_Comparison_Exp>;
  Location?: Maybe<Location_Bool_Exp>;
  RestaurantAndCuisineTypes?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
  RestaurantComments?: Maybe<RestaurantComment_Bool_Exp>;
  RestaurantMenus?: Maybe<RestaurantMenu_Bool_Exp>;
  RestaurantType?: Maybe<RestaurantType_Bool_Exp>;
  RestaurantWorkingSchedules?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
  TravelGuideRestaurants?: Maybe<TravelGuideRestaurant_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Restaurant_Bool_Exp>>>;
  _not?: Maybe<Restaurant_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Restaurant_Bool_Exp>>>;
  companyID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
  restaurantTypeID?: Maybe<Int_Comparison_Exp>;
  since?: Maybe<Date_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  taxNumber?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Restaurant" */
export enum Restaurant_Constraint {
  /** unique or primary key constraint */
  RestaurantPkey = 'Restaurant_pkey'
}

/** input type for incrementing integer columne in table "Restaurant" */
export type Restaurant_Inc_Input = {
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Restaurant" */
export type Restaurant_Insert_Input = {
  Company?: Maybe<Company_Obj_Rel_Insert_Input>;
  ISO?: Maybe<Scalars['String']>;
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  RestaurantAndCuisineTypes?: Maybe<RestaurantAndCuisineType_Arr_Rel_Insert_Input>;
  RestaurantComments?: Maybe<RestaurantComment_Arr_Rel_Insert_Input>;
  RestaurantMenus?: Maybe<RestaurantMenu_Arr_Rel_Insert_Input>;
  RestaurantType?: Maybe<RestaurantType_Obj_Rel_Insert_Input>;
  RestaurantWorkingSchedules?: Maybe<RestaurantWorkingSchedule_Arr_Rel_Insert_Input>;
  TravelGuideRestaurants?: Maybe<TravelGuideRestaurant_Arr_Rel_Insert_Input>;
  companyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  since?: Maybe<Scalars['date']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Restaurant_Max_Fields = {
  __typename?: 'Restaurant_max_fields';
  ISO?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  since?: Maybe<Scalars['date']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Restaurant" */
export type Restaurant_Max_Order_By = {
  ISO?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  since?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Restaurant_Min_Fields = {
  __typename?: 'Restaurant_min_fields';
  ISO?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  since?: Maybe<Scalars['date']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Restaurant" */
export type Restaurant_Min_Order_By = {
  ISO?: Maybe<Order_By>;
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  since?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** response of any mutation on the table "Restaurant" */
export type Restaurant_Mutation_Response = {
  __typename?: 'Restaurant_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Restaurant>;
};

/** input type for inserting object relation for remote table "Restaurant" */
export type Restaurant_Obj_Rel_Insert_Input = {
  data: Restaurant_Insert_Input;
  on_conflict?: Maybe<Restaurant_On_Conflict>;
};

/** on conflict condition type for table "Restaurant" */
export type Restaurant_On_Conflict = {
  constraint: Restaurant_Constraint;
  update_columns: Array<Restaurant_Update_Column>;
  where?: Maybe<Restaurant_Bool_Exp>;
};

/** ordering options when selecting data from "Restaurant" */
export type Restaurant_Order_By = {
  Company?: Maybe<Company_Order_By>;
  ISO?: Maybe<Order_By>;
  Location?: Maybe<Location_Order_By>;
  RestaurantAndCuisineTypes_aggregate?: Maybe<RestaurantAndCuisineType_Aggregate_Order_By>;
  RestaurantComments_aggregate?: Maybe<RestaurantComment_Aggregate_Order_By>;
  RestaurantMenus_aggregate?: Maybe<RestaurantMenu_Aggregate_Order_By>;
  RestaurantType?: Maybe<RestaurantType_Order_By>;
  RestaurantWorkingSchedules_aggregate?: Maybe<RestaurantWorkingSchedule_Aggregate_Order_By>;
  TravelGuideRestaurants_aggregate?: Maybe<TravelGuideRestaurant_Aggregate_Order_By>;
  companyID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  since?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  taxNumber?: Maybe<Order_By>;
};

/** select columns of table "Restaurant" */
export enum Restaurant_Select_Column {
  /** column name */
  Iso = 'ISO',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantTypeId = 'restaurantTypeID',
  /** column name */
  Since = 'since',
  /** column name */
  Star = 'star',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** input type for updating data in table "Restaurant" */
export type Restaurant_Set_Input = {
  ISO?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  since?: Maybe<Scalars['date']>;
  star?: Maybe<Scalars['Float']>;
  taxNumber?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Restaurant_Stddev_Fields = {
  __typename?: 'Restaurant_stddev_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Restaurant" */
export type Restaurant_Stddev_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Restaurant_Stddev_Pop_Fields = {
  __typename?: 'Restaurant_stddev_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Restaurant" */
export type Restaurant_Stddev_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Restaurant_Stddev_Samp_Fields = {
  __typename?: 'Restaurant_stddev_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Restaurant" */
export type Restaurant_Stddev_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Restaurant_Sum_Fields = {
  __typename?: 'Restaurant_sum_fields';
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "Restaurant" */
export type Restaurant_Sum_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** update columns of table "Restaurant" */
export enum Restaurant_Update_Column {
  /** column name */
  Iso = 'ISO',
  /** column name */
  CompanyId = 'companyID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  Name = 'name',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantTypeId = 'restaurantTypeID',
  /** column name */
  Since = 'since',
  /** column name */
  Star = 'star',
  /** column name */
  TaxNumber = 'taxNumber'
}

/** aggregate var_pop on columns */
export type Restaurant_Var_Pop_Fields = {
  __typename?: 'Restaurant_var_pop_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Restaurant" */
export type Restaurant_Var_Pop_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Restaurant_Var_Samp_Fields = {
  __typename?: 'Restaurant_var_samp_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Restaurant" */
export type Restaurant_Var_Samp_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Restaurant_Variance_Fields = {
  __typename?: 'Restaurant_variance_fields';
  companyID?: Maybe<Scalars['Float']>;
  locationID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantTypeID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Restaurant" */
export type Restaurant_Variance_Order_By = {
  companyID?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType = {
  __typename?: 'RestaurantAndCuisineType';
  /** An object relationship */
  Restaurant: Restaurant;
  /** An object relationship */
  RestaurantCuisineType: RestaurantCuisineType;
  isDeleted: Scalars['Boolean'];
  restaurantAndCuisineTypeID: Scalars['Int'];
  restaurantCuisineTypeID: Scalars['Int'];
  restaurantID: Scalars['Int'];
};

/** aggregated selection of "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Aggregate = {
  __typename?: 'RestaurantAndCuisineType_aggregate';
  aggregate?: Maybe<RestaurantAndCuisineType_Aggregate_Fields>;
  nodes: Array<RestaurantAndCuisineType>;
};

/** aggregate fields of "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Aggregate_Fields = {
  __typename?: 'RestaurantAndCuisineType_aggregate_fields';
  avg?: Maybe<RestaurantAndCuisineType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantAndCuisineType_Max_Fields>;
  min?: Maybe<RestaurantAndCuisineType_Min_Fields>;
  stddev?: Maybe<RestaurantAndCuisineType_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantAndCuisineType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantAndCuisineType_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantAndCuisineType_Sum_Fields>;
  var_pop?: Maybe<RestaurantAndCuisineType_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantAndCuisineType_Var_Samp_Fields>;
  variance?: Maybe<RestaurantAndCuisineType_Variance_Fields>;
};


/** aggregate fields of "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Aggregate_Order_By = {
  avg?: Maybe<RestaurantAndCuisineType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantAndCuisineType_Max_Order_By>;
  min?: Maybe<RestaurantAndCuisineType_Min_Order_By>;
  stddev?: Maybe<RestaurantAndCuisineType_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantAndCuisineType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantAndCuisineType_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantAndCuisineType_Sum_Order_By>;
  var_pop?: Maybe<RestaurantAndCuisineType_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantAndCuisineType_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantAndCuisineType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Arr_Rel_Insert_Input = {
  data: Array<RestaurantAndCuisineType_Insert_Input>;
  on_conflict?: Maybe<RestaurantAndCuisineType_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantAndCuisineType_Avg_Fields = {
  __typename?: 'RestaurantAndCuisineType_avg_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Avg_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantAndCuisineType". All fields are combined with a logical 'AND'. */
export type RestaurantAndCuisineType_Bool_Exp = {
  Restaurant?: Maybe<Restaurant_Bool_Exp>;
  RestaurantCuisineType?: Maybe<RestaurantCuisineType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantAndCuisineType_Bool_Exp>>>;
  _not?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantAndCuisineType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantAndCuisineTypeID?: Maybe<Int_Comparison_Exp>;
  restaurantCuisineTypeID?: Maybe<Int_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantAndCuisineType" */
export enum RestaurantAndCuisineType_Constraint {
  /** unique or primary key constraint */
  RestaurantAndCuisineTypePkey = 'RestaurantAndCuisineType_pkey'
}

/** input type for incrementing integer columne in table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Inc_Input = {
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Insert_Input = {
  Restaurant?: Maybe<Restaurant_Obj_Rel_Insert_Input>;
  RestaurantCuisineType?: Maybe<RestaurantCuisineType_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantAndCuisineType_Max_Fields = {
  __typename?: 'RestaurantAndCuisineType_max_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Max_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantAndCuisineType_Min_Fields = {
  __typename?: 'RestaurantAndCuisineType_min_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Min_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Mutation_Response = {
  __typename?: 'RestaurantAndCuisineType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantAndCuisineType>;
};

/** input type for inserting object relation for remote table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Obj_Rel_Insert_Input = {
  data: RestaurantAndCuisineType_Insert_Input;
  on_conflict?: Maybe<RestaurantAndCuisineType_On_Conflict>;
};

/** on conflict condition type for table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_On_Conflict = {
  constraint: RestaurantAndCuisineType_Constraint;
  update_columns: Array<RestaurantAndCuisineType_Update_Column>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Order_By = {
  Restaurant?: Maybe<Restaurant_Order_By>;
  RestaurantCuisineType?: Maybe<RestaurantCuisineType_Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantAndCuisineType" */
export enum RestaurantAndCuisineType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantAndCuisineTypeId = 'restaurantAndCuisineTypeID',
  /** column name */
  RestaurantCuisineTypeId = 'restaurantCuisineTypeID',
  /** column name */
  RestaurantId = 'restaurantID'
}

/** input type for updating data in table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantAndCuisineType_Stddev_Fields = {
  __typename?: 'RestaurantAndCuisineType_stddev_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Stddev_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantAndCuisineType_Stddev_Pop_Fields = {
  __typename?: 'RestaurantAndCuisineType_stddev_pop_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Stddev_Pop_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantAndCuisineType_Stddev_Samp_Fields = {
  __typename?: 'RestaurantAndCuisineType_stddev_samp_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Stddev_Samp_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantAndCuisineType_Sum_Fields = {
  __typename?: 'RestaurantAndCuisineType_sum_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Sum_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantAndCuisineType" */
export enum RestaurantAndCuisineType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantAndCuisineTypeId = 'restaurantAndCuisineTypeID',
  /** column name */
  RestaurantCuisineTypeId = 'restaurantCuisineTypeID',
  /** column name */
  RestaurantId = 'restaurantID'
}

/** aggregate var_pop on columns */
export type RestaurantAndCuisineType_Var_Pop_Fields = {
  __typename?: 'RestaurantAndCuisineType_var_pop_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Var_Pop_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantAndCuisineType_Var_Samp_Fields = {
  __typename?: 'RestaurantAndCuisineType_var_samp_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Var_Samp_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantAndCuisineType_Variance_Fields = {
  __typename?: 'RestaurantAndCuisineType_variance_fields';
  restaurantAndCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantAndCuisineType" */
export type RestaurantAndCuisineType_Variance_Order_By = {
  restaurantAndCuisineTypeID?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantComment" */
export type RestaurantComment = {
  __typename?: 'RestaurantComment';
  /** An object relationship */
  Restaurant: Restaurant;
  /** An object relationship */
  User: User;
  content: Scalars['String'];
  date: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  restaurantCommentID: Scalars['Int'];
  restaurantID: Scalars['Int'];
  star: Scalars['Float'];
  userID: Scalars['Int'];
};

/** aggregated selection of "RestaurantComment" */
export type RestaurantComment_Aggregate = {
  __typename?: 'RestaurantComment_aggregate';
  aggregate?: Maybe<RestaurantComment_Aggregate_Fields>;
  nodes: Array<RestaurantComment>;
};

/** aggregate fields of "RestaurantComment" */
export type RestaurantComment_Aggregate_Fields = {
  __typename?: 'RestaurantComment_aggregate_fields';
  avg?: Maybe<RestaurantComment_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantComment_Max_Fields>;
  min?: Maybe<RestaurantComment_Min_Fields>;
  stddev?: Maybe<RestaurantComment_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantComment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantComment_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantComment_Sum_Fields>;
  var_pop?: Maybe<RestaurantComment_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantComment_Var_Samp_Fields>;
  variance?: Maybe<RestaurantComment_Variance_Fields>;
};


/** aggregate fields of "RestaurantComment" */
export type RestaurantComment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantComment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantComment" */
export type RestaurantComment_Aggregate_Order_By = {
  avg?: Maybe<RestaurantComment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantComment_Max_Order_By>;
  min?: Maybe<RestaurantComment_Min_Order_By>;
  stddev?: Maybe<RestaurantComment_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantComment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantComment_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantComment_Sum_Order_By>;
  var_pop?: Maybe<RestaurantComment_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantComment_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantComment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantComment" */
export type RestaurantComment_Arr_Rel_Insert_Input = {
  data: Array<RestaurantComment_Insert_Input>;
  on_conflict?: Maybe<RestaurantComment_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantComment_Avg_Fields = {
  __typename?: 'RestaurantComment_avg_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantComment" */
export type RestaurantComment_Avg_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantComment". All fields are combined with a logical 'AND'. */
export type RestaurantComment_Bool_Exp = {
  Restaurant?: Maybe<Restaurant_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantComment_Bool_Exp>>>;
  _not?: Maybe<RestaurantComment_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantComment_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantCommentID?: Maybe<Int_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
  star?: Maybe<Float_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantComment" */
export enum RestaurantComment_Constraint {
  /** unique or primary key constraint */
  RestaurantCommentPkey = 'RestaurantComment_pkey'
}

/** input type for incrementing integer columne in table "RestaurantComment" */
export type RestaurantComment_Inc_Input = {
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantComment" */
export type RestaurantComment_Insert_Input = {
  Restaurant?: Maybe<Restaurant_Obj_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantComment_Max_Fields = {
  __typename?: 'RestaurantComment_max_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantComment" */
export type RestaurantComment_Max_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantComment_Min_Fields = {
  __typename?: 'RestaurantComment_min_fields';
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantComment" */
export type RestaurantComment_Min_Order_By = {
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantComment" */
export type RestaurantComment_Mutation_Response = {
  __typename?: 'RestaurantComment_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantComment>;
};

/** input type for inserting object relation for remote table "RestaurantComment" */
export type RestaurantComment_Obj_Rel_Insert_Input = {
  data: RestaurantComment_Insert_Input;
  on_conflict?: Maybe<RestaurantComment_On_Conflict>;
};

/** on conflict condition type for table "RestaurantComment" */
export type RestaurantComment_On_Conflict = {
  constraint: RestaurantComment_Constraint;
  update_columns: Array<RestaurantComment_Update_Column>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantComment" */
export type RestaurantComment_Order_By = {
  Restaurant?: Maybe<Restaurant_Order_By>;
  User?: Maybe<User_Order_By>;
  content?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantComment" */
export enum RestaurantComment_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantCommentId = 'restaurantCommentID',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "RestaurantComment" */
export type RestaurantComment_Set_Input = {
  content?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantComment_Stddev_Fields = {
  __typename?: 'RestaurantComment_stddev_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantComment" */
export type RestaurantComment_Stddev_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantComment_Stddev_Pop_Fields = {
  __typename?: 'RestaurantComment_stddev_pop_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantComment" */
export type RestaurantComment_Stddev_Pop_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantComment_Stddev_Samp_Fields = {
  __typename?: 'RestaurantComment_stddev_samp_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantComment" */
export type RestaurantComment_Stddev_Samp_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantComment_Sum_Fields = {
  __typename?: 'RestaurantComment_sum_fields';
  restaurantCommentID?: Maybe<Scalars['Int']>;
  restaurantID?: Maybe<Scalars['Int']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantComment" */
export type RestaurantComment_Sum_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantComment" */
export enum RestaurantComment_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  Date = 'date',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantCommentId = 'restaurantCommentID',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  Star = 'star',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type RestaurantComment_Var_Pop_Fields = {
  __typename?: 'RestaurantComment_var_pop_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantComment" */
export type RestaurantComment_Var_Pop_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantComment_Var_Samp_Fields = {
  __typename?: 'RestaurantComment_var_samp_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantComment" */
export type RestaurantComment_Var_Samp_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantComment_Variance_Fields = {
  __typename?: 'RestaurantComment_variance_fields';
  restaurantCommentID?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  star?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantComment" */
export type RestaurantComment_Variance_Order_By = {
  restaurantCommentID?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  star?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantCuisineType" */
export type RestaurantCuisineType = {
  __typename?: 'RestaurantCuisineType';
  /** An array relationship */
  RestaurantAndCuisineTypes: Array<RestaurantAndCuisineType>;
  /** An aggregated array relationship */
  RestaurantAndCuisineTypes_aggregate: RestaurantAndCuisineType_Aggregate;
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
  restaurantCuisineTypeID: Scalars['Int'];
};


/** columns and relationships of "RestaurantCuisineType" */
export type RestaurantCuisineTypeRestaurantAndCuisineTypesArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** columns and relationships of "RestaurantCuisineType" */
export type RestaurantCuisineTypeRestaurantAndCuisineTypes_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};

/** aggregated selection of "RestaurantCuisineType" */
export type RestaurantCuisineType_Aggregate = {
  __typename?: 'RestaurantCuisineType_aggregate';
  aggregate?: Maybe<RestaurantCuisineType_Aggregate_Fields>;
  nodes: Array<RestaurantCuisineType>;
};

/** aggregate fields of "RestaurantCuisineType" */
export type RestaurantCuisineType_Aggregate_Fields = {
  __typename?: 'RestaurantCuisineType_aggregate_fields';
  avg?: Maybe<RestaurantCuisineType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantCuisineType_Max_Fields>;
  min?: Maybe<RestaurantCuisineType_Min_Fields>;
  stddev?: Maybe<RestaurantCuisineType_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantCuisineType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantCuisineType_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantCuisineType_Sum_Fields>;
  var_pop?: Maybe<RestaurantCuisineType_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantCuisineType_Var_Samp_Fields>;
  variance?: Maybe<RestaurantCuisineType_Variance_Fields>;
};


/** aggregate fields of "RestaurantCuisineType" */
export type RestaurantCuisineType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantCuisineType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Aggregate_Order_By = {
  avg?: Maybe<RestaurantCuisineType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantCuisineType_Max_Order_By>;
  min?: Maybe<RestaurantCuisineType_Min_Order_By>;
  stddev?: Maybe<RestaurantCuisineType_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantCuisineType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantCuisineType_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantCuisineType_Sum_Order_By>;
  var_pop?: Maybe<RestaurantCuisineType_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantCuisineType_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantCuisineType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantCuisineType" */
export type RestaurantCuisineType_Arr_Rel_Insert_Input = {
  data: Array<RestaurantCuisineType_Insert_Input>;
  on_conflict?: Maybe<RestaurantCuisineType_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantCuisineType_Avg_Fields = {
  __typename?: 'RestaurantCuisineType_avg_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Avg_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantCuisineType". All fields are combined with a logical 'AND'. */
export type RestaurantCuisineType_Bool_Exp = {
  RestaurantAndCuisineTypes?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantCuisineType_Bool_Exp>>>;
  _not?: Maybe<RestaurantCuisineType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantCuisineType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  restaurantCuisineTypeID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantCuisineType" */
export enum RestaurantCuisineType_Constraint {
  /** unique or primary key constraint */
  RestaurantCuisineTypePkey = 'RestaurantCuisineType_pkey'
}

/** input type for incrementing integer columne in table "RestaurantCuisineType" */
export type RestaurantCuisineType_Inc_Input = {
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantCuisineType" */
export type RestaurantCuisineType_Insert_Input = {
  RestaurantAndCuisineTypes?: Maybe<RestaurantAndCuisineType_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantCuisineType_Max_Fields = {
  __typename?: 'RestaurantCuisineType_max_fields';
  name?: Maybe<Scalars['String']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Max_Order_By = {
  name?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantCuisineType_Min_Fields = {
  __typename?: 'RestaurantCuisineType_min_fields';
  name?: Maybe<Scalars['String']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Min_Order_By = {
  name?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantCuisineType" */
export type RestaurantCuisineType_Mutation_Response = {
  __typename?: 'RestaurantCuisineType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantCuisineType>;
};

/** input type for inserting object relation for remote table "RestaurantCuisineType" */
export type RestaurantCuisineType_Obj_Rel_Insert_Input = {
  data: RestaurantCuisineType_Insert_Input;
  on_conflict?: Maybe<RestaurantCuisineType_On_Conflict>;
};

/** on conflict condition type for table "RestaurantCuisineType" */
export type RestaurantCuisineType_On_Conflict = {
  constraint: RestaurantCuisineType_Constraint;
  update_columns: Array<RestaurantCuisineType_Update_Column>;
  where?: Maybe<RestaurantCuisineType_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantCuisineType" */
export type RestaurantCuisineType_Order_By = {
  RestaurantAndCuisineTypes_aggregate?: Maybe<RestaurantAndCuisineType_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantCuisineType" */
export enum RestaurantCuisineType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  RestaurantCuisineTypeId = 'restaurantCuisineTypeID'
}

/** input type for updating data in table "RestaurantCuisineType" */
export type RestaurantCuisineType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantCuisineType_Stddev_Fields = {
  __typename?: 'RestaurantCuisineType_stddev_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Stddev_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantCuisineType_Stddev_Pop_Fields = {
  __typename?: 'RestaurantCuisineType_stddev_pop_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Stddev_Pop_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantCuisineType_Stddev_Samp_Fields = {
  __typename?: 'RestaurantCuisineType_stddev_samp_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Stddev_Samp_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantCuisineType_Sum_Fields = {
  __typename?: 'RestaurantCuisineType_sum_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Sum_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantCuisineType" */
export enum RestaurantCuisineType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  RestaurantCuisineTypeId = 'restaurantCuisineTypeID'
}

/** aggregate var_pop on columns */
export type RestaurantCuisineType_Var_Pop_Fields = {
  __typename?: 'RestaurantCuisineType_var_pop_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Var_Pop_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantCuisineType_Var_Samp_Fields = {
  __typename?: 'RestaurantCuisineType_var_samp_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Var_Samp_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantCuisineType_Variance_Fields = {
  __typename?: 'RestaurantCuisineType_variance_fields';
  restaurantCuisineTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantCuisineType" */
export type RestaurantCuisineType_Variance_Order_By = {
  restaurantCuisineTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantFood" */
export type RestaurantFood = {
  __typename?: 'RestaurantFood';
  /** An object relationship */
  RestaurantFoodType: RestaurantFoodType;
  /** An array relationship */
  RestaurantMenuFoods: Array<RestaurantMenuFood>;
  /** An aggregated array relationship */
  RestaurantMenuFoods_aggregate: RestaurantMenuFood_Aggregate;
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID: Scalars['Int'];
  restaurantFoodTypeID: Scalars['Int'];
};


/** columns and relationships of "RestaurantFood" */
export type RestaurantFoodRestaurantMenuFoodsArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** columns and relationships of "RestaurantFood" */
export type RestaurantFoodRestaurantMenuFoods_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};

/** aggregated selection of "RestaurantFood" */
export type RestaurantFood_Aggregate = {
  __typename?: 'RestaurantFood_aggregate';
  aggregate?: Maybe<RestaurantFood_Aggregate_Fields>;
  nodes: Array<RestaurantFood>;
};

/** aggregate fields of "RestaurantFood" */
export type RestaurantFood_Aggregate_Fields = {
  __typename?: 'RestaurantFood_aggregate_fields';
  avg?: Maybe<RestaurantFood_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantFood_Max_Fields>;
  min?: Maybe<RestaurantFood_Min_Fields>;
  stddev?: Maybe<RestaurantFood_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantFood_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantFood_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantFood_Sum_Fields>;
  var_pop?: Maybe<RestaurantFood_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantFood_Var_Samp_Fields>;
  variance?: Maybe<RestaurantFood_Variance_Fields>;
};


/** aggregate fields of "RestaurantFood" */
export type RestaurantFood_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantFood_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantFood" */
export type RestaurantFood_Aggregate_Order_By = {
  avg?: Maybe<RestaurantFood_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantFood_Max_Order_By>;
  min?: Maybe<RestaurantFood_Min_Order_By>;
  stddev?: Maybe<RestaurantFood_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantFood_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantFood_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantFood_Sum_Order_By>;
  var_pop?: Maybe<RestaurantFood_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantFood_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantFood_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantFood" */
export type RestaurantFood_Arr_Rel_Insert_Input = {
  data: Array<RestaurantFood_Insert_Input>;
  on_conflict?: Maybe<RestaurantFood_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantFood_Avg_Fields = {
  __typename?: 'RestaurantFood_avg_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantFood" */
export type RestaurantFood_Avg_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantFood". All fields are combined with a logical 'AND'. */
export type RestaurantFood_Bool_Exp = {
  RestaurantFoodType?: Maybe<RestaurantFoodType_Bool_Exp>;
  RestaurantMenuFoods?: Maybe<RestaurantMenuFood_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantFood_Bool_Exp>>>;
  _not?: Maybe<RestaurantFood_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantFood_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  restaurantFoodID?: Maybe<Int_Comparison_Exp>;
  restaurantFoodTypeID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantFood" */
export enum RestaurantFood_Constraint {
  /** unique or primary key constraint */
  RestaurantFoodPkey = 'RestaurantFood_pkey'
}

/** input type for incrementing integer columne in table "RestaurantFood" */
export type RestaurantFood_Inc_Input = {
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantFood" */
export type RestaurantFood_Insert_Input = {
  RestaurantFoodType?: Maybe<RestaurantFoodType_Obj_Rel_Insert_Input>;
  RestaurantMenuFoods?: Maybe<RestaurantMenuFood_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantFood_Max_Fields = {
  __typename?: 'RestaurantFood_max_fields';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantFood" */
export type RestaurantFood_Max_Order_By = {
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantFood_Min_Fields = {
  __typename?: 'RestaurantFood_min_fields';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantFood" */
export type RestaurantFood_Min_Order_By = {
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantFood" */
export type RestaurantFood_Mutation_Response = {
  __typename?: 'RestaurantFood_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantFood>;
};

/** input type for inserting object relation for remote table "RestaurantFood" */
export type RestaurantFood_Obj_Rel_Insert_Input = {
  data: RestaurantFood_Insert_Input;
  on_conflict?: Maybe<RestaurantFood_On_Conflict>;
};

/** on conflict condition type for table "RestaurantFood" */
export type RestaurantFood_On_Conflict = {
  constraint: RestaurantFood_Constraint;
  update_columns: Array<RestaurantFood_Update_Column>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantFood" */
export type RestaurantFood_Order_By = {
  RestaurantFoodType?: Maybe<RestaurantFoodType_Order_By>;
  RestaurantMenuFoods_aggregate?: Maybe<RestaurantMenuFood_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantFood" */
export enum RestaurantFood_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  Price = 'price',
  /** column name */
  RestaurantFoodId = 'restaurantFoodID',
  /** column name */
  RestaurantFoodTypeId = 'restaurantFoodTypeID'
}

/** input type for updating data in table "RestaurantFood" */
export type RestaurantFood_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantFood_Stddev_Fields = {
  __typename?: 'RestaurantFood_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantFood" */
export type RestaurantFood_Stddev_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantFood_Stddev_Pop_Fields = {
  __typename?: 'RestaurantFood_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantFood" */
export type RestaurantFood_Stddev_Pop_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantFood_Stddev_Samp_Fields = {
  __typename?: 'RestaurantFood_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantFood" */
export type RestaurantFood_Stddev_Samp_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantFood_Sum_Fields = {
  __typename?: 'RestaurantFood_sum_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantFood" */
export type RestaurantFood_Sum_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantFood" */
export enum RestaurantFood_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  Price = 'price',
  /** column name */
  RestaurantFoodId = 'restaurantFoodID',
  /** column name */
  RestaurantFoodTypeId = 'restaurantFoodTypeID'
}

/** aggregate var_pop on columns */
export type RestaurantFood_Var_Pop_Fields = {
  __typename?: 'RestaurantFood_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantFood" */
export type RestaurantFood_Var_Pop_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantFood_Var_Samp_Fields = {
  __typename?: 'RestaurantFood_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantFood" */
export type RestaurantFood_Var_Samp_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantFood_Variance_Fields = {
  __typename?: 'RestaurantFood_variance_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantFood" */
export type RestaurantFood_Variance_Order_By = {
  price?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantFoodType" */
export type RestaurantFoodType = {
  __typename?: 'RestaurantFoodType';
  /** An array relationship */
  RestaurantFoods: Array<RestaurantFood>;
  /** An aggregated array relationship */
  RestaurantFoods_aggregate: RestaurantFood_Aggregate;
  isDeleted: Scalars['Boolean'];
  restaurantFoodTypeID: Scalars['Int'];
  type: Scalars['String'];
};


/** columns and relationships of "RestaurantFoodType" */
export type RestaurantFoodTypeRestaurantFoodsArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};


/** columns and relationships of "RestaurantFoodType" */
export type RestaurantFoodTypeRestaurantFoods_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};

/** aggregated selection of "RestaurantFoodType" */
export type RestaurantFoodType_Aggregate = {
  __typename?: 'RestaurantFoodType_aggregate';
  aggregate?: Maybe<RestaurantFoodType_Aggregate_Fields>;
  nodes: Array<RestaurantFoodType>;
};

/** aggregate fields of "RestaurantFoodType" */
export type RestaurantFoodType_Aggregate_Fields = {
  __typename?: 'RestaurantFoodType_aggregate_fields';
  avg?: Maybe<RestaurantFoodType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantFoodType_Max_Fields>;
  min?: Maybe<RestaurantFoodType_Min_Fields>;
  stddev?: Maybe<RestaurantFoodType_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantFoodType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantFoodType_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantFoodType_Sum_Fields>;
  var_pop?: Maybe<RestaurantFoodType_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantFoodType_Var_Samp_Fields>;
  variance?: Maybe<RestaurantFoodType_Variance_Fields>;
};


/** aggregate fields of "RestaurantFoodType" */
export type RestaurantFoodType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantFoodType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantFoodType" */
export type RestaurantFoodType_Aggregate_Order_By = {
  avg?: Maybe<RestaurantFoodType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantFoodType_Max_Order_By>;
  min?: Maybe<RestaurantFoodType_Min_Order_By>;
  stddev?: Maybe<RestaurantFoodType_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantFoodType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantFoodType_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantFoodType_Sum_Order_By>;
  var_pop?: Maybe<RestaurantFoodType_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantFoodType_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantFoodType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantFoodType" */
export type RestaurantFoodType_Arr_Rel_Insert_Input = {
  data: Array<RestaurantFoodType_Insert_Input>;
  on_conflict?: Maybe<RestaurantFoodType_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantFoodType_Avg_Fields = {
  __typename?: 'RestaurantFoodType_avg_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Avg_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantFoodType". All fields are combined with a logical 'AND'. */
export type RestaurantFoodType_Bool_Exp = {
  RestaurantFoods?: Maybe<RestaurantFood_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantFoodType_Bool_Exp>>>;
  _not?: Maybe<RestaurantFoodType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantFoodType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantFoodTypeID?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantFoodType" */
export enum RestaurantFoodType_Constraint {
  /** unique or primary key constraint */
  RestaurantFoodTypePkey = 'RestaurantFoodType_pkey'
}

/** input type for incrementing integer columne in table "RestaurantFoodType" */
export type RestaurantFoodType_Inc_Input = {
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantFoodType" */
export type RestaurantFoodType_Insert_Input = {
  RestaurantFoods?: Maybe<RestaurantFood_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type RestaurantFoodType_Max_Fields = {
  __typename?: 'RestaurantFoodType_max_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Max_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantFoodType_Min_Fields = {
  __typename?: 'RestaurantFoodType_min_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Min_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantFoodType" */
export type RestaurantFoodType_Mutation_Response = {
  __typename?: 'RestaurantFoodType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantFoodType>;
};

/** input type for inserting object relation for remote table "RestaurantFoodType" */
export type RestaurantFoodType_Obj_Rel_Insert_Input = {
  data: RestaurantFoodType_Insert_Input;
  on_conflict?: Maybe<RestaurantFoodType_On_Conflict>;
};

/** on conflict condition type for table "RestaurantFoodType" */
export type RestaurantFoodType_On_Conflict = {
  constraint: RestaurantFoodType_Constraint;
  update_columns: Array<RestaurantFoodType_Update_Column>;
  where?: Maybe<RestaurantFoodType_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantFoodType" */
export type RestaurantFoodType_Order_By = {
  RestaurantFoods_aggregate?: Maybe<RestaurantFood_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantFoodTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** select columns of table "RestaurantFoodType" */
export enum RestaurantFoodType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantFoodTypeId = 'restaurantFoodTypeID',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "RestaurantFoodType" */
export type RestaurantFoodType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type RestaurantFoodType_Stddev_Fields = {
  __typename?: 'RestaurantFoodType_stddev_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Stddev_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantFoodType_Stddev_Pop_Fields = {
  __typename?: 'RestaurantFoodType_stddev_pop_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Stddev_Pop_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantFoodType_Stddev_Samp_Fields = {
  __typename?: 'RestaurantFoodType_stddev_samp_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Stddev_Samp_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantFoodType_Sum_Fields = {
  __typename?: 'RestaurantFoodType_sum_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Sum_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantFoodType" */
export enum RestaurantFoodType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantFoodTypeId = 'restaurantFoodTypeID',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type RestaurantFoodType_Var_Pop_Fields = {
  __typename?: 'RestaurantFoodType_var_pop_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Var_Pop_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantFoodType_Var_Samp_Fields = {
  __typename?: 'RestaurantFoodType_var_samp_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Var_Samp_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantFoodType_Variance_Fields = {
  __typename?: 'RestaurantFoodType_variance_fields';
  restaurantFoodTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantFoodType" */
export type RestaurantFoodType_Variance_Order_By = {
  restaurantFoodTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantMenu" */
export type RestaurantMenu = {
  __typename?: 'RestaurantMenu';
  /** An object relationship */
  Restaurant: Restaurant;
  /** An array relationship */
  RestaurantMenuFoods: Array<RestaurantMenuFood>;
  /** An aggregated array relationship */
  RestaurantMenuFoods_aggregate: RestaurantMenuFood_Aggregate;
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
  price: Scalars['Float'];
  restaurantID: Scalars['Int'];
  restaurantMenuID: Scalars['Int'];
};


/** columns and relationships of "RestaurantMenu" */
export type RestaurantMenuRestaurantMenuFoodsArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** columns and relationships of "RestaurantMenu" */
export type RestaurantMenuRestaurantMenuFoods_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};

/** aggregated selection of "RestaurantMenu" */
export type RestaurantMenu_Aggregate = {
  __typename?: 'RestaurantMenu_aggregate';
  aggregate?: Maybe<RestaurantMenu_Aggregate_Fields>;
  nodes: Array<RestaurantMenu>;
};

/** aggregate fields of "RestaurantMenu" */
export type RestaurantMenu_Aggregate_Fields = {
  __typename?: 'RestaurantMenu_aggregate_fields';
  avg?: Maybe<RestaurantMenu_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantMenu_Max_Fields>;
  min?: Maybe<RestaurantMenu_Min_Fields>;
  stddev?: Maybe<RestaurantMenu_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantMenu_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantMenu_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantMenu_Sum_Fields>;
  var_pop?: Maybe<RestaurantMenu_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantMenu_Var_Samp_Fields>;
  variance?: Maybe<RestaurantMenu_Variance_Fields>;
};


/** aggregate fields of "RestaurantMenu" */
export type RestaurantMenu_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantMenu_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantMenu" */
export type RestaurantMenu_Aggregate_Order_By = {
  avg?: Maybe<RestaurantMenu_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantMenu_Max_Order_By>;
  min?: Maybe<RestaurantMenu_Min_Order_By>;
  stddev?: Maybe<RestaurantMenu_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantMenu_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantMenu_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantMenu_Sum_Order_By>;
  var_pop?: Maybe<RestaurantMenu_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantMenu_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantMenu_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantMenu" */
export type RestaurantMenu_Arr_Rel_Insert_Input = {
  data: Array<RestaurantMenu_Insert_Input>;
  on_conflict?: Maybe<RestaurantMenu_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantMenu_Avg_Fields = {
  __typename?: 'RestaurantMenu_avg_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Avg_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantMenu". All fields are combined with a logical 'AND'. */
export type RestaurantMenu_Bool_Exp = {
  Restaurant?: Maybe<Restaurant_Bool_Exp>;
  RestaurantMenuFoods?: Maybe<RestaurantMenuFood_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantMenu_Bool_Exp>>>;
  _not?: Maybe<RestaurantMenu_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantMenu_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
  restaurantMenuID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantMenu" */
export enum RestaurantMenu_Constraint {
  /** unique or primary key constraint */
  RestaurantMenuPkey = 'RestaurantMenu_pkey'
}

/** input type for incrementing integer columne in table "RestaurantMenu" */
export type RestaurantMenu_Inc_Input = {
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantMenu" */
export type RestaurantMenu_Insert_Input = {
  Restaurant?: Maybe<Restaurant_Obj_Rel_Insert_Input>;
  RestaurantMenuFoods?: Maybe<RestaurantMenuFood_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantMenu_Max_Fields = {
  __typename?: 'RestaurantMenu_max_fields';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Max_Order_By = {
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantMenu_Min_Fields = {
  __typename?: 'RestaurantMenu_min_fields';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Min_Order_By = {
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantMenu" */
export type RestaurantMenu_Mutation_Response = {
  __typename?: 'RestaurantMenu_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantMenu>;
};

/** input type for inserting object relation for remote table "RestaurantMenu" */
export type RestaurantMenu_Obj_Rel_Insert_Input = {
  data: RestaurantMenu_Insert_Input;
  on_conflict?: Maybe<RestaurantMenu_On_Conflict>;
};

/** on conflict condition type for table "RestaurantMenu" */
export type RestaurantMenu_On_Conflict = {
  constraint: RestaurantMenu_Constraint;
  update_columns: Array<RestaurantMenu_Update_Column>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantMenu" */
export type RestaurantMenu_Order_By = {
  Restaurant?: Maybe<Restaurant_Order_By>;
  RestaurantMenuFoods_aggregate?: Maybe<RestaurantMenuFood_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantMenu" */
export enum RestaurantMenu_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  Price = 'price',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantMenuId = 'restaurantMenuID'
}

/** input type for updating data in table "RestaurantMenu" */
export type RestaurantMenu_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantMenu_Stddev_Fields = {
  __typename?: 'RestaurantMenu_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Stddev_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantMenu_Stddev_Pop_Fields = {
  __typename?: 'RestaurantMenu_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Stddev_Pop_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantMenu_Stddev_Samp_Fields = {
  __typename?: 'RestaurantMenu_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Stddev_Samp_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantMenu_Sum_Fields = {
  __typename?: 'RestaurantMenu_sum_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Sum_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantMenu" */
export enum RestaurantMenu_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  Price = 'price',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantMenuId = 'restaurantMenuID'
}

/** aggregate var_pop on columns */
export type RestaurantMenu_Var_Pop_Fields = {
  __typename?: 'RestaurantMenu_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Var_Pop_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantMenu_Var_Samp_Fields = {
  __typename?: 'RestaurantMenu_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Var_Samp_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantMenu_Variance_Fields = {
  __typename?: 'RestaurantMenu_variance_fields';
  price?: Maybe<Scalars['Float']>;
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantMenu" */
export type RestaurantMenu_Variance_Order_By = {
  price?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantMenuFood" */
export type RestaurantMenuFood = {
  __typename?: 'RestaurantMenuFood';
  /** An object relationship */
  RestaurantFood: RestaurantFood;
  /** An object relationship */
  RestaurantMenu: RestaurantMenu;
  isDeleted: Scalars['Boolean'];
  restaurantFoodID: Scalars['Int'];
  restaurantMenuFoodID: Scalars['Int'];
  restaurantMenuID: Scalars['Int'];
};

/** aggregated selection of "RestaurantMenuFood" */
export type RestaurantMenuFood_Aggregate = {
  __typename?: 'RestaurantMenuFood_aggregate';
  aggregate?: Maybe<RestaurantMenuFood_Aggregate_Fields>;
  nodes: Array<RestaurantMenuFood>;
};

/** aggregate fields of "RestaurantMenuFood" */
export type RestaurantMenuFood_Aggregate_Fields = {
  __typename?: 'RestaurantMenuFood_aggregate_fields';
  avg?: Maybe<RestaurantMenuFood_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantMenuFood_Max_Fields>;
  min?: Maybe<RestaurantMenuFood_Min_Fields>;
  stddev?: Maybe<RestaurantMenuFood_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantMenuFood_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantMenuFood_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantMenuFood_Sum_Fields>;
  var_pop?: Maybe<RestaurantMenuFood_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantMenuFood_Var_Samp_Fields>;
  variance?: Maybe<RestaurantMenuFood_Variance_Fields>;
};


/** aggregate fields of "RestaurantMenuFood" */
export type RestaurantMenuFood_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Aggregate_Order_By = {
  avg?: Maybe<RestaurantMenuFood_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantMenuFood_Max_Order_By>;
  min?: Maybe<RestaurantMenuFood_Min_Order_By>;
  stddev?: Maybe<RestaurantMenuFood_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantMenuFood_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantMenuFood_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantMenuFood_Sum_Order_By>;
  var_pop?: Maybe<RestaurantMenuFood_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantMenuFood_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantMenuFood_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantMenuFood" */
export type RestaurantMenuFood_Arr_Rel_Insert_Input = {
  data: Array<RestaurantMenuFood_Insert_Input>;
  on_conflict?: Maybe<RestaurantMenuFood_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantMenuFood_Avg_Fields = {
  __typename?: 'RestaurantMenuFood_avg_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Avg_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantMenuFood". All fields are combined with a logical 'AND'. */
export type RestaurantMenuFood_Bool_Exp = {
  RestaurantFood?: Maybe<RestaurantFood_Bool_Exp>;
  RestaurantMenu?: Maybe<RestaurantMenu_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantMenuFood_Bool_Exp>>>;
  _not?: Maybe<RestaurantMenuFood_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantMenuFood_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantFoodID?: Maybe<Int_Comparison_Exp>;
  restaurantMenuFoodID?: Maybe<Int_Comparison_Exp>;
  restaurantMenuID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantMenuFood" */
export enum RestaurantMenuFood_Constraint {
  /** unique or primary key constraint */
  RestaurantMenuFoodPkey = 'RestaurantMenuFood_pkey'
}

/** input type for incrementing integer columne in table "RestaurantMenuFood" */
export type RestaurantMenuFood_Inc_Input = {
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantMenuFood" */
export type RestaurantMenuFood_Insert_Input = {
  RestaurantFood?: Maybe<RestaurantFood_Obj_Rel_Insert_Input>;
  RestaurantMenu?: Maybe<RestaurantMenu_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantMenuFood_Max_Fields = {
  __typename?: 'RestaurantMenuFood_max_fields';
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Max_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantMenuFood_Min_Fields = {
  __typename?: 'RestaurantMenuFood_min_fields';
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Min_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantMenuFood" */
export type RestaurantMenuFood_Mutation_Response = {
  __typename?: 'RestaurantMenuFood_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantMenuFood>;
};

/** input type for inserting object relation for remote table "RestaurantMenuFood" */
export type RestaurantMenuFood_Obj_Rel_Insert_Input = {
  data: RestaurantMenuFood_Insert_Input;
  on_conflict?: Maybe<RestaurantMenuFood_On_Conflict>;
};

/** on conflict condition type for table "RestaurantMenuFood" */
export type RestaurantMenuFood_On_Conflict = {
  constraint: RestaurantMenuFood_Constraint;
  update_columns: Array<RestaurantMenuFood_Update_Column>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantMenuFood" */
export type RestaurantMenuFood_Order_By = {
  RestaurantFood?: Maybe<RestaurantFood_Order_By>;
  RestaurantMenu?: Maybe<RestaurantMenu_Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantMenuFood" */
export enum RestaurantMenuFood_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantFoodId = 'restaurantFoodID',
  /** column name */
  RestaurantMenuFoodId = 'restaurantMenuFoodID',
  /** column name */
  RestaurantMenuId = 'restaurantMenuID'
}

/** input type for updating data in table "RestaurantMenuFood" */
export type RestaurantMenuFood_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantMenuFood_Stddev_Fields = {
  __typename?: 'RestaurantMenuFood_stddev_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Stddev_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantMenuFood_Stddev_Pop_Fields = {
  __typename?: 'RestaurantMenuFood_stddev_pop_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Stddev_Pop_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantMenuFood_Stddev_Samp_Fields = {
  __typename?: 'RestaurantMenuFood_stddev_samp_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Stddev_Samp_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantMenuFood_Sum_Fields = {
  __typename?: 'RestaurantMenuFood_sum_fields';
  restaurantFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuFoodID?: Maybe<Scalars['Int']>;
  restaurantMenuID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Sum_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantMenuFood" */
export enum RestaurantMenuFood_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantFoodId = 'restaurantFoodID',
  /** column name */
  RestaurantMenuFoodId = 'restaurantMenuFoodID',
  /** column name */
  RestaurantMenuId = 'restaurantMenuID'
}

/** aggregate var_pop on columns */
export type RestaurantMenuFood_Var_Pop_Fields = {
  __typename?: 'RestaurantMenuFood_var_pop_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Var_Pop_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantMenuFood_Var_Samp_Fields = {
  __typename?: 'RestaurantMenuFood_var_samp_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Var_Samp_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantMenuFood_Variance_Fields = {
  __typename?: 'RestaurantMenuFood_variance_fields';
  restaurantFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuFoodID?: Maybe<Scalars['Float']>;
  restaurantMenuID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantMenuFood" */
export type RestaurantMenuFood_Variance_Order_By = {
  restaurantFoodID?: Maybe<Order_By>;
  restaurantMenuFoodID?: Maybe<Order_By>;
  restaurantMenuID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantType" */
export type RestaurantType = {
  __typename?: 'RestaurantType';
  /** An array relationship */
  Restaurants: Array<Restaurant>;
  /** An aggregated array relationship */
  Restaurants_aggregate: Restaurant_Aggregate;
  isDeleted: Scalars['Boolean'];
  restaurantTypeID: Scalars['Int'];
  type: Scalars['String'];
};


/** columns and relationships of "RestaurantType" */
export type RestaurantTypeRestaurantsArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** columns and relationships of "RestaurantType" */
export type RestaurantTypeRestaurants_AggregateArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};

/** aggregated selection of "RestaurantType" */
export type RestaurantType_Aggregate = {
  __typename?: 'RestaurantType_aggregate';
  aggregate?: Maybe<RestaurantType_Aggregate_Fields>;
  nodes: Array<RestaurantType>;
};

/** aggregate fields of "RestaurantType" */
export type RestaurantType_Aggregate_Fields = {
  __typename?: 'RestaurantType_aggregate_fields';
  avg?: Maybe<RestaurantType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantType_Max_Fields>;
  min?: Maybe<RestaurantType_Min_Fields>;
  stddev?: Maybe<RestaurantType_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantType_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantType_Sum_Fields>;
  var_pop?: Maybe<RestaurantType_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantType_Var_Samp_Fields>;
  variance?: Maybe<RestaurantType_Variance_Fields>;
};


/** aggregate fields of "RestaurantType" */
export type RestaurantType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantType" */
export type RestaurantType_Aggregate_Order_By = {
  avg?: Maybe<RestaurantType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantType_Max_Order_By>;
  min?: Maybe<RestaurantType_Min_Order_By>;
  stddev?: Maybe<RestaurantType_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantType_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantType_Sum_Order_By>;
  var_pop?: Maybe<RestaurantType_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantType_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantType" */
export type RestaurantType_Arr_Rel_Insert_Input = {
  data: Array<RestaurantType_Insert_Input>;
  on_conflict?: Maybe<RestaurantType_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantType_Avg_Fields = {
  __typename?: 'RestaurantType_avg_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantType" */
export type RestaurantType_Avg_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantType". All fields are combined with a logical 'AND'. */
export type RestaurantType_Bool_Exp = {
  Restaurants?: Maybe<Restaurant_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantType_Bool_Exp>>>;
  _not?: Maybe<RestaurantType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantTypeID?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantType" */
export enum RestaurantType_Constraint {
  /** unique or primary key constraint */
  RestaurantTypePkey = 'RestaurantType_pkey'
}

/** input type for incrementing integer columne in table "RestaurantType" */
export type RestaurantType_Inc_Input = {
  restaurantTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantType" */
export type RestaurantType_Insert_Input = {
  Restaurants?: Maybe<Restaurant_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type RestaurantType_Max_Fields = {
  __typename?: 'RestaurantType_max_fields';
  restaurantTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "RestaurantType" */
export type RestaurantType_Max_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantType_Min_Fields = {
  __typename?: 'RestaurantType_min_fields';
  restaurantTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "RestaurantType" */
export type RestaurantType_Min_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantType" */
export type RestaurantType_Mutation_Response = {
  __typename?: 'RestaurantType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantType>;
};

/** input type for inserting object relation for remote table "RestaurantType" */
export type RestaurantType_Obj_Rel_Insert_Input = {
  data: RestaurantType_Insert_Input;
  on_conflict?: Maybe<RestaurantType_On_Conflict>;
};

/** on conflict condition type for table "RestaurantType" */
export type RestaurantType_On_Conflict = {
  constraint: RestaurantType_Constraint;
  update_columns: Array<RestaurantType_Update_Column>;
  where?: Maybe<RestaurantType_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantType" */
export type RestaurantType_Order_By = {
  Restaurants_aggregate?: Maybe<Restaurant_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantTypeID?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** select columns of table "RestaurantType" */
export enum RestaurantType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantTypeId = 'restaurantTypeID',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "RestaurantType" */
export type RestaurantType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantTypeID?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type RestaurantType_Stddev_Fields = {
  __typename?: 'RestaurantType_stddev_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantType" */
export type RestaurantType_Stddev_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantType_Stddev_Pop_Fields = {
  __typename?: 'RestaurantType_stddev_pop_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantType" */
export type RestaurantType_Stddev_Pop_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantType_Stddev_Samp_Fields = {
  __typename?: 'RestaurantType_stddev_samp_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantType" */
export type RestaurantType_Stddev_Samp_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantType_Sum_Fields = {
  __typename?: 'RestaurantType_sum_fields';
  restaurantTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantType" */
export type RestaurantType_Sum_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantType" */
export enum RestaurantType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantTypeId = 'restaurantTypeID',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type RestaurantType_Var_Pop_Fields = {
  __typename?: 'RestaurantType_var_pop_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantType" */
export type RestaurantType_Var_Pop_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantType_Var_Samp_Fields = {
  __typename?: 'RestaurantType_var_samp_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantType" */
export type RestaurantType_Var_Samp_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantType_Variance_Fields = {
  __typename?: 'RestaurantType_variance_fields';
  restaurantTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantType" */
export type RestaurantType_Variance_Order_By = {
  restaurantTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantWorkingDay" */
export type RestaurantWorkingDay = {
  __typename?: 'RestaurantWorkingDay';
  /** An object relationship */
  Day: Day;
  /** An array relationship */
  RestaurantWorkingDaySchedules: Array<RestaurantWorkingDaySchedule>;
  /** An aggregated array relationship */
  RestaurantWorkingDaySchedules_aggregate: RestaurantWorkingDaySchedule_Aggregate;
  closeHour: Scalars['timetz'];
  dayID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  openHour: Scalars['timetz'];
  restaurantWorkingDayID: Scalars['Int'];
};


/** columns and relationships of "RestaurantWorkingDay" */
export type RestaurantWorkingDayRestaurantWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "RestaurantWorkingDay" */
export type RestaurantWorkingDayRestaurantWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Aggregate = {
  __typename?: 'RestaurantWorkingDay_aggregate';
  aggregate?: Maybe<RestaurantWorkingDay_Aggregate_Fields>;
  nodes: Array<RestaurantWorkingDay>;
};

/** aggregate fields of "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Aggregate_Fields = {
  __typename?: 'RestaurantWorkingDay_aggregate_fields';
  avg?: Maybe<RestaurantWorkingDay_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantWorkingDay_Max_Fields>;
  min?: Maybe<RestaurantWorkingDay_Min_Fields>;
  stddev?: Maybe<RestaurantWorkingDay_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantWorkingDay_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantWorkingDay_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantWorkingDay_Sum_Fields>;
  var_pop?: Maybe<RestaurantWorkingDay_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantWorkingDay_Var_Samp_Fields>;
  variance?: Maybe<RestaurantWorkingDay_Variance_Fields>;
};


/** aggregate fields of "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Aggregate_Order_By = {
  avg?: Maybe<RestaurantWorkingDay_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantWorkingDay_Max_Order_By>;
  min?: Maybe<RestaurantWorkingDay_Min_Order_By>;
  stddev?: Maybe<RestaurantWorkingDay_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantWorkingDay_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantWorkingDay_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantWorkingDay_Sum_Order_By>;
  var_pop?: Maybe<RestaurantWorkingDay_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantWorkingDay_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantWorkingDay_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Arr_Rel_Insert_Input = {
  data: Array<RestaurantWorkingDay_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingDay_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantWorkingDay_Avg_Fields = {
  __typename?: 'RestaurantWorkingDay_avg_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Avg_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantWorkingDay". All fields are combined with a logical 'AND'. */
export type RestaurantWorkingDay_Bool_Exp = {
  Day?: Maybe<Day_Bool_Exp>;
  RestaurantWorkingDaySchedules?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantWorkingDay_Bool_Exp>>>;
  _not?: Maybe<RestaurantWorkingDay_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantWorkingDay_Bool_Exp>>>;
  closeHour?: Maybe<Timetz_Comparison_Exp>;
  dayID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  openHour?: Maybe<Timetz_Comparison_Exp>;
  restaurantWorkingDayID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantWorkingDay" */
export enum RestaurantWorkingDay_Constraint {
  /** unique or primary key constraint */
  RestaurantWorkingDayPkey = 'RestaurantWorkingDay_pkey'
}

/** input type for incrementing integer columne in table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Inc_Input = {
  dayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Insert_Input = {
  Day?: Maybe<Day_Obj_Rel_Insert_Input>;
  RestaurantWorkingDaySchedules?: Maybe<RestaurantWorkingDaySchedule_Arr_Rel_Insert_Input>;
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  openHour?: Maybe<Scalars['timetz']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantWorkingDay_Max_Fields = {
  __typename?: 'RestaurantWorkingDay_max_fields';
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Max_Order_By = {
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantWorkingDay_Min_Fields = {
  __typename?: 'RestaurantWorkingDay_min_fields';
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  openHour?: Maybe<Scalars['timetz']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Min_Order_By = {
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Mutation_Response = {
  __typename?: 'RestaurantWorkingDay_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantWorkingDay>;
};

/** input type for inserting object relation for remote table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Obj_Rel_Insert_Input = {
  data: RestaurantWorkingDay_Insert_Input;
  on_conflict?: Maybe<RestaurantWorkingDay_On_Conflict>;
};

/** on conflict condition type for table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_On_Conflict = {
  constraint: RestaurantWorkingDay_Constraint;
  update_columns: Array<RestaurantWorkingDay_Update_Column>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Order_By = {
  Day?: Maybe<Day_Order_By>;
  RestaurantWorkingDaySchedules_aggregate?: Maybe<RestaurantWorkingDaySchedule_Aggregate_Order_By>;
  closeHour?: Maybe<Order_By>;
  dayID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  openHour?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantWorkingDay" */
export enum RestaurantWorkingDay_Select_Column {
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  OpenHour = 'openHour',
  /** column name */
  RestaurantWorkingDayId = 'restaurantWorkingDayID'
}

/** input type for updating data in table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Set_Input = {
  closeHour?: Maybe<Scalars['timetz']>;
  dayID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  openHour?: Maybe<Scalars['timetz']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantWorkingDay_Stddev_Fields = {
  __typename?: 'RestaurantWorkingDay_stddev_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Stddev_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantWorkingDay_Stddev_Pop_Fields = {
  __typename?: 'RestaurantWorkingDay_stddev_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Stddev_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantWorkingDay_Stddev_Samp_Fields = {
  __typename?: 'RestaurantWorkingDay_stddev_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Stddev_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantWorkingDay_Sum_Fields = {
  __typename?: 'RestaurantWorkingDay_sum_fields';
  dayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Sum_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantWorkingDay" */
export enum RestaurantWorkingDay_Update_Column {
  /** column name */
  CloseHour = 'closeHour',
  /** column name */
  DayId = 'dayID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  OpenHour = 'openHour',
  /** column name */
  RestaurantWorkingDayId = 'restaurantWorkingDayID'
}

/** aggregate var_pop on columns */
export type RestaurantWorkingDay_Var_Pop_Fields = {
  __typename?: 'RestaurantWorkingDay_var_pop_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Var_Pop_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantWorkingDay_Var_Samp_Fields = {
  __typename?: 'RestaurantWorkingDay_var_samp_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Var_Samp_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantWorkingDay_Variance_Fields = {
  __typename?: 'RestaurantWorkingDay_variance_fields';
  dayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantWorkingDay" */
export type RestaurantWorkingDay_Variance_Order_By = {
  dayID?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule = {
  __typename?: 'RestaurantWorkingDaySchedule';
  /** An object relationship */
  RestaurantWorkingDay: RestaurantWorkingDay;
  /** An object relationship */
  RestaurantWorkingSchedule: RestaurantWorkingSchedule;
  isDeleted: Scalars['Boolean'];
  restaurantWorkingDayID: Scalars['Int'];
  restaurantWorkingDaySchedule: Scalars['Int'];
  restaurantWorkingScheduleID: Scalars['Int'];
};

/** aggregated selection of "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Aggregate = {
  __typename?: 'RestaurantWorkingDaySchedule_aggregate';
  aggregate?: Maybe<RestaurantWorkingDaySchedule_Aggregate_Fields>;
  nodes: Array<RestaurantWorkingDaySchedule>;
};

/** aggregate fields of "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Aggregate_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_aggregate_fields';
  avg?: Maybe<RestaurantWorkingDaySchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantWorkingDaySchedule_Max_Fields>;
  min?: Maybe<RestaurantWorkingDaySchedule_Min_Fields>;
  stddev?: Maybe<RestaurantWorkingDaySchedule_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantWorkingDaySchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantWorkingDaySchedule_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantWorkingDaySchedule_Sum_Fields>;
  var_pop?: Maybe<RestaurantWorkingDaySchedule_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantWorkingDaySchedule_Var_Samp_Fields>;
  variance?: Maybe<RestaurantWorkingDaySchedule_Variance_Fields>;
};


/** aggregate fields of "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Aggregate_Order_By = {
  avg?: Maybe<RestaurantWorkingDaySchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantWorkingDaySchedule_Max_Order_By>;
  min?: Maybe<RestaurantWorkingDaySchedule_Min_Order_By>;
  stddev?: Maybe<RestaurantWorkingDaySchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantWorkingDaySchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantWorkingDaySchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantWorkingDaySchedule_Sum_Order_By>;
  var_pop?: Maybe<RestaurantWorkingDaySchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantWorkingDaySchedule_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantWorkingDaySchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Arr_Rel_Insert_Input = {
  data: Array<RestaurantWorkingDaySchedule_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingDaySchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantWorkingDaySchedule_Avg_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_avg_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Avg_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table "RestaurantWorkingDaySchedule".
 * All fields are combined with a logical 'AND'.
 */
export type RestaurantWorkingDaySchedule_Bool_Exp = {
  RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Bool_Exp>;
  RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantWorkingDaySchedule_Bool_Exp>>>;
  _not?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantWorkingDaySchedule_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantWorkingDayID?: Maybe<Int_Comparison_Exp>;
  restaurantWorkingDaySchedule?: Maybe<Int_Comparison_Exp>;
  restaurantWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantWorkingDaySchedule" */
export enum RestaurantWorkingDaySchedule_Constraint {
  /** unique or primary key constraint */
  RestaurantWorkingDaySchedulePkey = 'RestaurantWorkingDaySchedule_pkey'
}

/** input type for incrementing integer columne in table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Inc_Input = {
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Insert_Input = {
  RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Obj_Rel_Insert_Input>;
  RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RestaurantWorkingDaySchedule_Max_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_max_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Max_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantWorkingDaySchedule_Min_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_min_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Min_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Mutation_Response = {
  __typename?: 'RestaurantWorkingDaySchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantWorkingDaySchedule>;
};

/** input type for inserting object relation for remote table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Obj_Rel_Insert_Input = {
  data: RestaurantWorkingDaySchedule_Insert_Input;
  on_conflict?: Maybe<RestaurantWorkingDaySchedule_On_Conflict>;
};

/** on conflict condition type for table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_On_Conflict = {
  constraint: RestaurantWorkingDaySchedule_Constraint;
  update_columns: Array<RestaurantWorkingDaySchedule_Update_Column>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Order_By = {
  RestaurantWorkingDay?: Maybe<RestaurantWorkingDay_Order_By>;
  RestaurantWorkingSchedule?: Maybe<RestaurantWorkingSchedule_Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** select columns of table "RestaurantWorkingDaySchedule" */
export enum RestaurantWorkingDaySchedule_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantWorkingDayId = 'restaurantWorkingDayID',
  /** column name */
  RestaurantWorkingDaySchedule = 'restaurantWorkingDaySchedule',
  /** column name */
  RestaurantWorkingScheduleId = 'restaurantWorkingScheduleID'
}

/** input type for updating data in table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RestaurantWorkingDaySchedule_Stddev_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_stddev_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Stddev_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantWorkingDaySchedule_Stddev_Pop_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_stddev_pop_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Stddev_Pop_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantWorkingDaySchedule_Stddev_Samp_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_stddev_samp_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Stddev_Samp_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantWorkingDaySchedule_Sum_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_sum_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Int']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Sum_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantWorkingDaySchedule" */
export enum RestaurantWorkingDaySchedule_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantWorkingDayId = 'restaurantWorkingDayID',
  /** column name */
  RestaurantWorkingDaySchedule = 'restaurantWorkingDaySchedule',
  /** column name */
  RestaurantWorkingScheduleId = 'restaurantWorkingScheduleID'
}

/** aggregate var_pop on columns */
export type RestaurantWorkingDaySchedule_Var_Pop_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_var_pop_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Var_Pop_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantWorkingDaySchedule_Var_Samp_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_var_samp_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Var_Samp_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantWorkingDaySchedule_Variance_Fields = {
  __typename?: 'RestaurantWorkingDaySchedule_variance_fields';
  restaurantWorkingDayID?: Maybe<Scalars['Float']>;
  restaurantWorkingDaySchedule?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantWorkingDaySchedule" */
export type RestaurantWorkingDaySchedule_Variance_Order_By = {
  restaurantWorkingDayID?: Maybe<Order_By>;
  restaurantWorkingDaySchedule?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** columns and relationships of "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule = {
  __typename?: 'RestaurantWorkingSchedule';
  /** An object relationship */
  Restaurant: Restaurant;
  /** An array relationship */
  RestaurantWorkingDaySchedules: Array<RestaurantWorkingDaySchedule>;
  /** An aggregated array relationship */
  RestaurantWorkingDaySchedules_aggregate: RestaurantWorkingDaySchedule_Aggregate;
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  restaurantID: Scalars['Int'];
  restaurantWorkingScheduleID: Scalars['Int'];
  startDate: Scalars['timestamptz'];
};


/** columns and relationships of "RestaurantWorkingSchedule" */
export type RestaurantWorkingScheduleRestaurantWorkingDaySchedulesArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** columns and relationships of "RestaurantWorkingSchedule" */
export type RestaurantWorkingScheduleRestaurantWorkingDaySchedules_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};

/** aggregated selection of "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Aggregate = {
  __typename?: 'RestaurantWorkingSchedule_aggregate';
  aggregate?: Maybe<RestaurantWorkingSchedule_Aggregate_Fields>;
  nodes: Array<RestaurantWorkingSchedule>;
};

/** aggregate fields of "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Aggregate_Fields = {
  __typename?: 'RestaurantWorkingSchedule_aggregate_fields';
  avg?: Maybe<RestaurantWorkingSchedule_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RestaurantWorkingSchedule_Max_Fields>;
  min?: Maybe<RestaurantWorkingSchedule_Min_Fields>;
  stddev?: Maybe<RestaurantWorkingSchedule_Stddev_Fields>;
  stddev_pop?: Maybe<RestaurantWorkingSchedule_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RestaurantWorkingSchedule_Stddev_Samp_Fields>;
  sum?: Maybe<RestaurantWorkingSchedule_Sum_Fields>;
  var_pop?: Maybe<RestaurantWorkingSchedule_Var_Pop_Fields>;
  var_samp?: Maybe<RestaurantWorkingSchedule_Var_Samp_Fields>;
  variance?: Maybe<RestaurantWorkingSchedule_Variance_Fields>;
};


/** aggregate fields of "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Aggregate_Order_By = {
  avg?: Maybe<RestaurantWorkingSchedule_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RestaurantWorkingSchedule_Max_Order_By>;
  min?: Maybe<RestaurantWorkingSchedule_Min_Order_By>;
  stddev?: Maybe<RestaurantWorkingSchedule_Stddev_Order_By>;
  stddev_pop?: Maybe<RestaurantWorkingSchedule_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RestaurantWorkingSchedule_Stddev_Samp_Order_By>;
  sum?: Maybe<RestaurantWorkingSchedule_Sum_Order_By>;
  var_pop?: Maybe<RestaurantWorkingSchedule_Var_Pop_Order_By>;
  var_samp?: Maybe<RestaurantWorkingSchedule_Var_Samp_Order_By>;
  variance?: Maybe<RestaurantWorkingSchedule_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Arr_Rel_Insert_Input = {
  data: Array<RestaurantWorkingSchedule_Insert_Input>;
  on_conflict?: Maybe<RestaurantWorkingSchedule_On_Conflict>;
};

/** aggregate avg on columns */
export type RestaurantWorkingSchedule_Avg_Fields = {
  __typename?: 'RestaurantWorkingSchedule_avg_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Avg_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RestaurantWorkingSchedule". All fields are combined with a logical 'AND'. */
export type RestaurantWorkingSchedule_Bool_Exp = {
  Restaurant?: Maybe<Restaurant_Bool_Exp>;
  RestaurantWorkingDaySchedules?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RestaurantWorkingSchedule_Bool_Exp>>>;
  _not?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RestaurantWorkingSchedule_Bool_Exp>>>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
  restaurantWorkingScheduleID?: Maybe<Int_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "RestaurantWorkingSchedule" */
export enum RestaurantWorkingSchedule_Constraint {
  /** unique or primary key constraint */
  RestaurantWorkingSchedulePkey = 'RestaurantWorkingSchedule_pkey'
}

/** input type for incrementing integer columne in table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Inc_Input = {
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Insert_Input = {
  Restaurant?: Maybe<Restaurant_Obj_Rel_Insert_Input>;
  RestaurantWorkingDaySchedules?: Maybe<RestaurantWorkingDaySchedule_Arr_Rel_Insert_Input>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type RestaurantWorkingSchedule_Max_Fields = {
  __typename?: 'RestaurantWorkingSchedule_max_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Max_Order_By = {
  finishDate?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RestaurantWorkingSchedule_Min_Fields = {
  __typename?: 'RestaurantWorkingSchedule_min_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Min_Order_By = {
  finishDate?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Mutation_Response = {
  __typename?: 'RestaurantWorkingSchedule_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RestaurantWorkingSchedule>;
};

/** input type for inserting object relation for remote table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Obj_Rel_Insert_Input = {
  data: RestaurantWorkingSchedule_Insert_Input;
  on_conflict?: Maybe<RestaurantWorkingSchedule_On_Conflict>;
};

/** on conflict condition type for table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_On_Conflict = {
  constraint: RestaurantWorkingSchedule_Constraint;
  update_columns: Array<RestaurantWorkingSchedule_Update_Column>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};

/** ordering options when selecting data from "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Order_By = {
  Restaurant?: Maybe<Restaurant_Order_By>;
  RestaurantWorkingDaySchedules_aggregate?: Maybe<RestaurantWorkingDaySchedule_Aggregate_Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "RestaurantWorkingSchedule" */
export enum RestaurantWorkingSchedule_Select_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantWorkingScheduleId = 'restaurantWorkingScheduleID',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Set_Input = {
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type RestaurantWorkingSchedule_Stddev_Fields = {
  __typename?: 'RestaurantWorkingSchedule_stddev_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Stddev_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RestaurantWorkingSchedule_Stddev_Pop_Fields = {
  __typename?: 'RestaurantWorkingSchedule_stddev_pop_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Stddev_Pop_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RestaurantWorkingSchedule_Stddev_Samp_Fields = {
  __typename?: 'RestaurantWorkingSchedule_stddev_samp_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Stddev_Samp_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RestaurantWorkingSchedule_Sum_Fields = {
  __typename?: 'RestaurantWorkingSchedule_sum_fields';
  restaurantID?: Maybe<Scalars['Int']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Sum_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** update columns of table "RestaurantWorkingSchedule" */
export enum RestaurantWorkingSchedule_Update_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  RestaurantWorkingScheduleId = 'restaurantWorkingScheduleID',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type RestaurantWorkingSchedule_Var_Pop_Fields = {
  __typename?: 'RestaurantWorkingSchedule_var_pop_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Var_Pop_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RestaurantWorkingSchedule_Var_Samp_Fields = {
  __typename?: 'RestaurantWorkingSchedule_var_samp_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Var_Samp_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RestaurantWorkingSchedule_Variance_Fields = {
  __typename?: 'RestaurantWorkingSchedule_variance_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  restaurantWorkingScheduleID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RestaurantWorkingSchedule" */
export type RestaurantWorkingSchedule_Variance_Order_By = {
  restaurantID?: Maybe<Order_By>;
  restaurantWorkingScheduleID?: Maybe<Order_By>;
};

/** columns and relationships of "Room" */
export type Room = {
  __typename?: 'Room';
  /** An array relationship */
  HotelRooms: Array<HotelRoom>;
  /** An aggregated array relationship */
  HotelRooms_aggregate: HotelRoom_Aggregate;
  /** An array relationship */
  RoomPictures: Array<RoomPicture>;
  /** An aggregated array relationship */
  RoomPictures_aggregate: RoomPicture_Aggregate;
  /** An array relationship */
  RoomPrices: Array<RoomPrice>;
  /** An aggregated array relationship */
  RoomPrices_aggregate: RoomPrice_Aggregate;
  /** An array relationship */
  RoomPropertyRooms: Array<RoomPropertyRoom>;
  /** An aggregated array relationship */
  RoomPropertyRooms_aggregate: RoomPropertyRoom_Aggregate;
  isDeleted: Scalars['Boolean'];
  roomID: Scalars['Int'];
  roomNo: Scalars['String'];
};


/** columns and relationships of "Room" */
export type RoomHotelRoomsArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomHotelRooms_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPicturesArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPictures_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPricesArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPrices_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPropertyRoomsArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** columns and relationships of "Room" */
export type RoomRoomPropertyRooms_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};

/** aggregated selection of "Room" */
export type Room_Aggregate = {
  __typename?: 'Room_aggregate';
  aggregate?: Maybe<Room_Aggregate_Fields>;
  nodes: Array<Room>;
};

/** aggregate fields of "Room" */
export type Room_Aggregate_Fields = {
  __typename?: 'Room_aggregate_fields';
  avg?: Maybe<Room_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Room_Max_Fields>;
  min?: Maybe<Room_Min_Fields>;
  stddev?: Maybe<Room_Stddev_Fields>;
  stddev_pop?: Maybe<Room_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Room_Stddev_Samp_Fields>;
  sum?: Maybe<Room_Sum_Fields>;
  var_pop?: Maybe<Room_Var_Pop_Fields>;
  var_samp?: Maybe<Room_Var_Samp_Fields>;
  variance?: Maybe<Room_Variance_Fields>;
};


/** aggregate fields of "Room" */
export type Room_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Room_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Room" */
export type Room_Aggregate_Order_By = {
  avg?: Maybe<Room_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Room_Max_Order_By>;
  min?: Maybe<Room_Min_Order_By>;
  stddev?: Maybe<Room_Stddev_Order_By>;
  stddev_pop?: Maybe<Room_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Room_Stddev_Samp_Order_By>;
  sum?: Maybe<Room_Sum_Order_By>;
  var_pop?: Maybe<Room_Var_Pop_Order_By>;
  var_samp?: Maybe<Room_Var_Samp_Order_By>;
  variance?: Maybe<Room_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Room" */
export type Room_Arr_Rel_Insert_Input = {
  data: Array<Room_Insert_Input>;
  on_conflict?: Maybe<Room_On_Conflict>;
};

/** aggregate avg on columns */
export type Room_Avg_Fields = {
  __typename?: 'Room_avg_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Room" */
export type Room_Avg_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Room". All fields are combined with a logical 'AND'. */
export type Room_Bool_Exp = {
  HotelRooms?: Maybe<HotelRoom_Bool_Exp>;
  RoomPictures?: Maybe<RoomPicture_Bool_Exp>;
  RoomPrices?: Maybe<RoomPrice_Bool_Exp>;
  RoomPropertyRooms?: Maybe<RoomPropertyRoom_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Room_Bool_Exp>>>;
  _not?: Maybe<Room_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Room_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  roomID?: Maybe<Int_Comparison_Exp>;
  roomNo?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Room" */
export enum Room_Constraint {
  /** unique or primary key constraint */
  RoomPkey = 'Room_pkey'
}

/** input type for incrementing integer columne in table "Room" */
export type Room_Inc_Input = {
  roomID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Room" */
export type Room_Insert_Input = {
  HotelRooms?: Maybe<HotelRoom_Arr_Rel_Insert_Input>;
  RoomPictures?: Maybe<RoomPicture_Arr_Rel_Insert_Input>;
  RoomPrices?: Maybe<RoomPrice_Arr_Rel_Insert_Input>;
  RoomPropertyRooms?: Maybe<RoomPropertyRoom_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomNo?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Room_Max_Fields = {
  __typename?: 'Room_max_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomNo?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "Room" */
export type Room_Max_Order_By = {
  roomID?: Maybe<Order_By>;
  roomNo?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_Min_Fields = {
  __typename?: 'Room_min_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomNo?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "Room" */
export type Room_Min_Order_By = {
  roomID?: Maybe<Order_By>;
  roomNo?: Maybe<Order_By>;
};

/** response of any mutation on the table "Room" */
export type Room_Mutation_Response = {
  __typename?: 'Room_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Room>;
};

/** input type for inserting object relation for remote table "Room" */
export type Room_Obj_Rel_Insert_Input = {
  data: Room_Insert_Input;
  on_conflict?: Maybe<Room_On_Conflict>;
};

/** on conflict condition type for table "Room" */
export type Room_On_Conflict = {
  constraint: Room_Constraint;
  update_columns: Array<Room_Update_Column>;
  where?: Maybe<Room_Bool_Exp>;
};

/** ordering options when selecting data from "Room" */
export type Room_Order_By = {
  HotelRooms_aggregate?: Maybe<HotelRoom_Aggregate_Order_By>;
  RoomPictures_aggregate?: Maybe<RoomPicture_Aggregate_Order_By>;
  RoomPrices_aggregate?: Maybe<RoomPrice_Aggregate_Order_By>;
  RoomPropertyRooms_aggregate?: Maybe<RoomPropertyRoom_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomNo?: Maybe<Order_By>;
};

/** select columns of table "Room" */
export enum Room_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomNo = 'roomNo'
}

/** input type for updating data in table "Room" */
export type Room_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomNo?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Room_Stddev_Fields = {
  __typename?: 'Room_stddev_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Room" */
export type Room_Stddev_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Room_Stddev_Pop_Fields = {
  __typename?: 'Room_stddev_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Room" */
export type Room_Stddev_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Room_Stddev_Samp_Fields = {
  __typename?: 'Room_stddev_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Room" */
export type Room_Stddev_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Room_Sum_Fields = {
  __typename?: 'Room_sum_fields';
  roomID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Room" */
export type Room_Sum_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** update columns of table "Room" */
export enum Room_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomNo = 'roomNo'
}

/** aggregate var_pop on columns */
export type Room_Var_Pop_Fields = {
  __typename?: 'Room_var_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Room" */
export type Room_Var_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Room_Var_Samp_Fields = {
  __typename?: 'Room_var_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Room" */
export type Room_Var_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Room_Variance_Fields = {
  __typename?: 'Room_variance_fields';
  roomID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Room" */
export type Room_Variance_Order_By = {
  roomID?: Maybe<Order_By>;
};

/** columns and relationships of "RoomPicture" */
export type RoomPicture = {
  __typename?: 'RoomPicture';
  /** An object relationship */
  Room: Room;
  addDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  roomID: Scalars['Int'];
  roomPictureID: Scalars['Int'];
  url: Scalars['String'];
};

/** aggregated selection of "RoomPicture" */
export type RoomPicture_Aggregate = {
  __typename?: 'RoomPicture_aggregate';
  aggregate?: Maybe<RoomPicture_Aggregate_Fields>;
  nodes: Array<RoomPicture>;
};

/** aggregate fields of "RoomPicture" */
export type RoomPicture_Aggregate_Fields = {
  __typename?: 'RoomPicture_aggregate_fields';
  avg?: Maybe<RoomPicture_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RoomPicture_Max_Fields>;
  min?: Maybe<RoomPicture_Min_Fields>;
  stddev?: Maybe<RoomPicture_Stddev_Fields>;
  stddev_pop?: Maybe<RoomPicture_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RoomPicture_Stddev_Samp_Fields>;
  sum?: Maybe<RoomPicture_Sum_Fields>;
  var_pop?: Maybe<RoomPicture_Var_Pop_Fields>;
  var_samp?: Maybe<RoomPicture_Var_Samp_Fields>;
  variance?: Maybe<RoomPicture_Variance_Fields>;
};


/** aggregate fields of "RoomPicture" */
export type RoomPicture_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RoomPicture_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RoomPicture" */
export type RoomPicture_Aggregate_Order_By = {
  avg?: Maybe<RoomPicture_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RoomPicture_Max_Order_By>;
  min?: Maybe<RoomPicture_Min_Order_By>;
  stddev?: Maybe<RoomPicture_Stddev_Order_By>;
  stddev_pop?: Maybe<RoomPicture_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RoomPicture_Stddev_Samp_Order_By>;
  sum?: Maybe<RoomPicture_Sum_Order_By>;
  var_pop?: Maybe<RoomPicture_Var_Pop_Order_By>;
  var_samp?: Maybe<RoomPicture_Var_Samp_Order_By>;
  variance?: Maybe<RoomPicture_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RoomPicture" */
export type RoomPicture_Arr_Rel_Insert_Input = {
  data: Array<RoomPicture_Insert_Input>;
  on_conflict?: Maybe<RoomPicture_On_Conflict>;
};

/** aggregate avg on columns */
export type RoomPicture_Avg_Fields = {
  __typename?: 'RoomPicture_avg_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RoomPicture" */
export type RoomPicture_Avg_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RoomPicture". All fields are combined with a logical 'AND'. */
export type RoomPicture_Bool_Exp = {
  Room?: Maybe<Room_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RoomPicture_Bool_Exp>>>;
  _not?: Maybe<RoomPicture_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RoomPicture_Bool_Exp>>>;
  addDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  roomID?: Maybe<Int_Comparison_Exp>;
  roomPictureID?: Maybe<Int_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "RoomPicture" */
export enum RoomPicture_Constraint {
  /** unique or primary key constraint */
  RoomPicturePkey = 'RoomPicture_pkey'
}

/** input type for incrementing integer columne in table "RoomPicture" */
export type RoomPicture_Inc_Input = {
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RoomPicture" */
export type RoomPicture_Insert_Input = {
  Room?: Maybe<Room_Obj_Rel_Insert_Input>;
  addDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type RoomPicture_Max_Fields = {
  __typename?: 'RoomPicture_max_fields';
  addDate?: Maybe<Scalars['timestamptz']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "RoomPicture" */
export type RoomPicture_Max_Order_By = {
  addDate?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RoomPicture_Min_Fields = {
  __typename?: 'RoomPicture_min_fields';
  addDate?: Maybe<Scalars['timestamptz']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "RoomPicture" */
export type RoomPicture_Min_Order_By = {
  addDate?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** response of any mutation on the table "RoomPicture" */
export type RoomPicture_Mutation_Response = {
  __typename?: 'RoomPicture_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RoomPicture>;
};

/** input type for inserting object relation for remote table "RoomPicture" */
export type RoomPicture_Obj_Rel_Insert_Input = {
  data: RoomPicture_Insert_Input;
  on_conflict?: Maybe<RoomPicture_On_Conflict>;
};

/** on conflict condition type for table "RoomPicture" */
export type RoomPicture_On_Conflict = {
  constraint: RoomPicture_Constraint;
  update_columns: Array<RoomPicture_Update_Column>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};

/** ordering options when selecting data from "RoomPicture" */
export type RoomPicture_Order_By = {
  Room?: Maybe<Room_Order_By>;
  addDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** select columns of table "RoomPicture" */
export enum RoomPicture_Select_Column {
  /** column name */
  AddDate = 'addDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPictureId = 'roomPictureID',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "RoomPicture" */
export type RoomPicture_Set_Input = {
  addDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type RoomPicture_Stddev_Fields = {
  __typename?: 'RoomPicture_stddev_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RoomPicture" */
export type RoomPicture_Stddev_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RoomPicture_Stddev_Pop_Fields = {
  __typename?: 'RoomPicture_stddev_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RoomPicture" */
export type RoomPicture_Stddev_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RoomPicture_Stddev_Samp_Fields = {
  __typename?: 'RoomPicture_stddev_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RoomPicture" */
export type RoomPicture_Stddev_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RoomPicture_Sum_Fields = {
  __typename?: 'RoomPicture_sum_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomPictureID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RoomPicture" */
export type RoomPicture_Sum_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** update columns of table "RoomPicture" */
export enum RoomPicture_Update_Column {
  /** column name */
  AddDate = 'addDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPictureId = 'roomPictureID',
  /** column name */
  Url = 'url'
}

/** aggregate var_pop on columns */
export type RoomPicture_Var_Pop_Fields = {
  __typename?: 'RoomPicture_var_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RoomPicture" */
export type RoomPicture_Var_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RoomPicture_Var_Samp_Fields = {
  __typename?: 'RoomPicture_var_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RoomPicture" */
export type RoomPicture_Var_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RoomPicture_Variance_Fields = {
  __typename?: 'RoomPicture_variance_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPictureID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RoomPicture" */
export type RoomPicture_Variance_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPictureID?: Maybe<Order_By>;
};

/** columns and relationships of "RoomPrice" */
export type RoomPrice = {
  __typename?: 'RoomPrice';
  /** An object relationship */
  Room: Room;
  finishDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  price: Scalars['Float'];
  roomID: Scalars['Int'];
  roomPriceID: Scalars['Int'];
  startDate: Scalars['timestamptz'];
};

/** aggregated selection of "RoomPrice" */
export type RoomPrice_Aggregate = {
  __typename?: 'RoomPrice_aggregate';
  aggregate?: Maybe<RoomPrice_Aggregate_Fields>;
  nodes: Array<RoomPrice>;
};

/** aggregate fields of "RoomPrice" */
export type RoomPrice_Aggregate_Fields = {
  __typename?: 'RoomPrice_aggregate_fields';
  avg?: Maybe<RoomPrice_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RoomPrice_Max_Fields>;
  min?: Maybe<RoomPrice_Min_Fields>;
  stddev?: Maybe<RoomPrice_Stddev_Fields>;
  stddev_pop?: Maybe<RoomPrice_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RoomPrice_Stddev_Samp_Fields>;
  sum?: Maybe<RoomPrice_Sum_Fields>;
  var_pop?: Maybe<RoomPrice_Var_Pop_Fields>;
  var_samp?: Maybe<RoomPrice_Var_Samp_Fields>;
  variance?: Maybe<RoomPrice_Variance_Fields>;
};


/** aggregate fields of "RoomPrice" */
export type RoomPrice_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RoomPrice_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RoomPrice" */
export type RoomPrice_Aggregate_Order_By = {
  avg?: Maybe<RoomPrice_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RoomPrice_Max_Order_By>;
  min?: Maybe<RoomPrice_Min_Order_By>;
  stddev?: Maybe<RoomPrice_Stddev_Order_By>;
  stddev_pop?: Maybe<RoomPrice_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RoomPrice_Stddev_Samp_Order_By>;
  sum?: Maybe<RoomPrice_Sum_Order_By>;
  var_pop?: Maybe<RoomPrice_Var_Pop_Order_By>;
  var_samp?: Maybe<RoomPrice_Var_Samp_Order_By>;
  variance?: Maybe<RoomPrice_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RoomPrice" */
export type RoomPrice_Arr_Rel_Insert_Input = {
  data: Array<RoomPrice_Insert_Input>;
  on_conflict?: Maybe<RoomPrice_On_Conflict>;
};

/** aggregate avg on columns */
export type RoomPrice_Avg_Fields = {
  __typename?: 'RoomPrice_avg_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RoomPrice" */
export type RoomPrice_Avg_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RoomPrice". All fields are combined with a logical 'AND'. */
export type RoomPrice_Bool_Exp = {
  Room?: Maybe<Room_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RoomPrice_Bool_Exp>>>;
  _not?: Maybe<RoomPrice_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RoomPrice_Bool_Exp>>>;
  finishDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  roomID?: Maybe<Int_Comparison_Exp>;
  roomPriceID?: Maybe<Int_Comparison_Exp>;
  startDate?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "RoomPrice" */
export enum RoomPrice_Constraint {
  /** unique or primary key constraint */
  RoomPricePkey = 'RoomPrice_pkey'
}

/** input type for incrementing integer columne in table "RoomPrice" */
export type RoomPrice_Inc_Input = {
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RoomPrice" */
export type RoomPrice_Insert_Input = {
  Room?: Maybe<Room_Obj_Rel_Insert_Input>;
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type RoomPrice_Max_Fields = {
  __typename?: 'RoomPrice_max_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "RoomPrice" */
export type RoomPrice_Max_Order_By = {
  finishDate?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RoomPrice_Min_Fields = {
  __typename?: 'RoomPrice_min_fields';
  finishDate?: Maybe<Scalars['timestamptz']>;
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "RoomPrice" */
export type RoomPrice_Min_Order_By = {
  finishDate?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** response of any mutation on the table "RoomPrice" */
export type RoomPrice_Mutation_Response = {
  __typename?: 'RoomPrice_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RoomPrice>;
};

/** input type for inserting object relation for remote table "RoomPrice" */
export type RoomPrice_Obj_Rel_Insert_Input = {
  data: RoomPrice_Insert_Input;
  on_conflict?: Maybe<RoomPrice_On_Conflict>;
};

/** on conflict condition type for table "RoomPrice" */
export type RoomPrice_On_Conflict = {
  constraint: RoomPrice_Constraint;
  update_columns: Array<RoomPrice_Update_Column>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};

/** ordering options when selecting data from "RoomPrice" */
export type RoomPrice_Order_By = {
  Room?: Maybe<Room_Order_By>;
  finishDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
  startDate?: Maybe<Order_By>;
};

/** select columns of table "RoomPrice" */
export enum RoomPrice_Select_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Price = 'price',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPriceId = 'roomPriceID',
  /** column name */
  StartDate = 'startDate'
}

/** input type for updating data in table "RoomPrice" */
export type RoomPrice_Set_Input = {
  finishDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type RoomPrice_Stddev_Fields = {
  __typename?: 'RoomPrice_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RoomPrice" */
export type RoomPrice_Stddev_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RoomPrice_Stddev_Pop_Fields = {
  __typename?: 'RoomPrice_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RoomPrice" */
export type RoomPrice_Stddev_Pop_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RoomPrice_Stddev_Samp_Fields = {
  __typename?: 'RoomPrice_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RoomPrice" */
export type RoomPrice_Stddev_Samp_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RoomPrice_Sum_Fields = {
  __typename?: 'RoomPrice_sum_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPriceID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RoomPrice" */
export type RoomPrice_Sum_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** update columns of table "RoomPrice" */
export enum RoomPrice_Update_Column {
  /** column name */
  FinishDate = 'finishDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Price = 'price',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPriceId = 'roomPriceID',
  /** column name */
  StartDate = 'startDate'
}

/** aggregate var_pop on columns */
export type RoomPrice_Var_Pop_Fields = {
  __typename?: 'RoomPrice_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RoomPrice" */
export type RoomPrice_Var_Pop_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RoomPrice_Var_Samp_Fields = {
  __typename?: 'RoomPrice_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RoomPrice" */
export type RoomPrice_Var_Samp_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RoomPrice_Variance_Fields = {
  __typename?: 'RoomPrice_variance_fields';
  price?: Maybe<Scalars['Float']>;
  roomID?: Maybe<Scalars['Float']>;
  roomPriceID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RoomPrice" */
export type RoomPrice_Variance_Order_By = {
  price?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPriceID?: Maybe<Order_By>;
};

/** columns and relationships of "RoomProperty" */
export type RoomProperty = {
  __typename?: 'RoomProperty';
  /** An array relationship */
  RoomPropertyRooms: Array<RoomPropertyRoom>;
  /** An aggregated array relationship */
  RoomPropertyRooms_aggregate: RoomPropertyRoom_Aggregate;
  content: Scalars['String'];
  isDeleted: Scalars['Boolean'];
  roomPropertyID: Scalars['Int'];
};


/** columns and relationships of "RoomProperty" */
export type RoomPropertyRoomPropertyRoomsArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** columns and relationships of "RoomProperty" */
export type RoomPropertyRoomPropertyRooms_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};

/** aggregated selection of "RoomProperty" */
export type RoomProperty_Aggregate = {
  __typename?: 'RoomProperty_aggregate';
  aggregate?: Maybe<RoomProperty_Aggregate_Fields>;
  nodes: Array<RoomProperty>;
};

/** aggregate fields of "RoomProperty" */
export type RoomProperty_Aggregate_Fields = {
  __typename?: 'RoomProperty_aggregate_fields';
  avg?: Maybe<RoomProperty_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RoomProperty_Max_Fields>;
  min?: Maybe<RoomProperty_Min_Fields>;
  stddev?: Maybe<RoomProperty_Stddev_Fields>;
  stddev_pop?: Maybe<RoomProperty_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RoomProperty_Stddev_Samp_Fields>;
  sum?: Maybe<RoomProperty_Sum_Fields>;
  var_pop?: Maybe<RoomProperty_Var_Pop_Fields>;
  var_samp?: Maybe<RoomProperty_Var_Samp_Fields>;
  variance?: Maybe<RoomProperty_Variance_Fields>;
};


/** aggregate fields of "RoomProperty" */
export type RoomProperty_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RoomProperty_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RoomProperty" */
export type RoomProperty_Aggregate_Order_By = {
  avg?: Maybe<RoomProperty_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RoomProperty_Max_Order_By>;
  min?: Maybe<RoomProperty_Min_Order_By>;
  stddev?: Maybe<RoomProperty_Stddev_Order_By>;
  stddev_pop?: Maybe<RoomProperty_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RoomProperty_Stddev_Samp_Order_By>;
  sum?: Maybe<RoomProperty_Sum_Order_By>;
  var_pop?: Maybe<RoomProperty_Var_Pop_Order_By>;
  var_samp?: Maybe<RoomProperty_Var_Samp_Order_By>;
  variance?: Maybe<RoomProperty_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RoomProperty" */
export type RoomProperty_Arr_Rel_Insert_Input = {
  data: Array<RoomProperty_Insert_Input>;
  on_conflict?: Maybe<RoomProperty_On_Conflict>;
};

/** aggregate avg on columns */
export type RoomProperty_Avg_Fields = {
  __typename?: 'RoomProperty_avg_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RoomProperty" */
export type RoomProperty_Avg_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RoomProperty". All fields are combined with a logical 'AND'. */
export type RoomProperty_Bool_Exp = {
  RoomPropertyRooms?: Maybe<RoomPropertyRoom_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RoomProperty_Bool_Exp>>>;
  _not?: Maybe<RoomProperty_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RoomProperty_Bool_Exp>>>;
  content?: Maybe<String_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  roomPropertyID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RoomProperty" */
export enum RoomProperty_Constraint {
  /** unique or primary key constraint */
  RoomPropertyPkey = 'RoomProperty_pkey'
}

/** input type for incrementing integer columne in table "RoomProperty" */
export type RoomProperty_Inc_Input = {
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RoomProperty" */
export type RoomProperty_Insert_Input = {
  RoomPropertyRooms?: Maybe<RoomPropertyRoom_Arr_Rel_Insert_Input>;
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RoomProperty_Max_Fields = {
  __typename?: 'RoomProperty_max_fields';
  content?: Maybe<Scalars['String']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RoomProperty" */
export type RoomProperty_Max_Order_By = {
  content?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RoomProperty_Min_Fields = {
  __typename?: 'RoomProperty_min_fields';
  content?: Maybe<Scalars['String']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RoomProperty" */
export type RoomProperty_Min_Order_By = {
  content?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RoomProperty" */
export type RoomProperty_Mutation_Response = {
  __typename?: 'RoomProperty_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RoomProperty>;
};

/** input type for inserting object relation for remote table "RoomProperty" */
export type RoomProperty_Obj_Rel_Insert_Input = {
  data: RoomProperty_Insert_Input;
  on_conflict?: Maybe<RoomProperty_On_Conflict>;
};

/** on conflict condition type for table "RoomProperty" */
export type RoomProperty_On_Conflict = {
  constraint: RoomProperty_Constraint;
  update_columns: Array<RoomProperty_Update_Column>;
  where?: Maybe<RoomProperty_Bool_Exp>;
};

/** ordering options when selecting data from "RoomProperty" */
export type RoomProperty_Order_By = {
  RoomPropertyRooms_aggregate?: Maybe<RoomPropertyRoom_Aggregate_Order_By>;
  content?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
};

/** select columns of table "RoomProperty" */
export enum RoomProperty_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomPropertyId = 'roomPropertyID'
}

/** input type for updating data in table "RoomProperty" */
export type RoomProperty_Set_Input = {
  content?: Maybe<Scalars['String']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RoomProperty_Stddev_Fields = {
  __typename?: 'RoomProperty_stddev_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RoomProperty" */
export type RoomProperty_Stddev_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RoomProperty_Stddev_Pop_Fields = {
  __typename?: 'RoomProperty_stddev_pop_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RoomProperty" */
export type RoomProperty_Stddev_Pop_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RoomProperty_Stddev_Samp_Fields = {
  __typename?: 'RoomProperty_stddev_samp_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RoomProperty" */
export type RoomProperty_Stddev_Samp_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RoomProperty_Sum_Fields = {
  __typename?: 'RoomProperty_sum_fields';
  roomPropertyID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RoomProperty" */
export type RoomProperty_Sum_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** update columns of table "RoomProperty" */
export enum RoomProperty_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomPropertyId = 'roomPropertyID'
}

/** aggregate var_pop on columns */
export type RoomProperty_Var_Pop_Fields = {
  __typename?: 'RoomProperty_var_pop_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RoomProperty" */
export type RoomProperty_Var_Pop_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RoomProperty_Var_Samp_Fields = {
  __typename?: 'RoomProperty_var_samp_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RoomProperty" */
export type RoomProperty_Var_Samp_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RoomProperty_Variance_Fields = {
  __typename?: 'RoomProperty_variance_fields';
  roomPropertyID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RoomProperty" */
export type RoomProperty_Variance_Order_By = {
  roomPropertyID?: Maybe<Order_By>;
};

/** columns and relationships of "RoomPropertyRoom" */
export type RoomPropertyRoom = {
  __typename?: 'RoomPropertyRoom';
  /** An object relationship */
  Room: Room;
  /** An object relationship */
  RoomProperty: RoomProperty;
  isDeleted: Scalars['Boolean'];
  roomID: Scalars['Int'];
  roomPropertyID: Scalars['Int'];
  roomPropertyRoomID: Scalars['Int'];
};

/** aggregated selection of "RoomPropertyRoom" */
export type RoomPropertyRoom_Aggregate = {
  __typename?: 'RoomPropertyRoom_aggregate';
  aggregate?: Maybe<RoomPropertyRoom_Aggregate_Fields>;
  nodes: Array<RoomPropertyRoom>;
};

/** aggregate fields of "RoomPropertyRoom" */
export type RoomPropertyRoom_Aggregate_Fields = {
  __typename?: 'RoomPropertyRoom_aggregate_fields';
  avg?: Maybe<RoomPropertyRoom_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<RoomPropertyRoom_Max_Fields>;
  min?: Maybe<RoomPropertyRoom_Min_Fields>;
  stddev?: Maybe<RoomPropertyRoom_Stddev_Fields>;
  stddev_pop?: Maybe<RoomPropertyRoom_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RoomPropertyRoom_Stddev_Samp_Fields>;
  sum?: Maybe<RoomPropertyRoom_Sum_Fields>;
  var_pop?: Maybe<RoomPropertyRoom_Var_Pop_Fields>;
  var_samp?: Maybe<RoomPropertyRoom_Var_Samp_Fields>;
  variance?: Maybe<RoomPropertyRoom_Variance_Fields>;
};


/** aggregate fields of "RoomPropertyRoom" */
export type RoomPropertyRoom_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Aggregate_Order_By = {
  avg?: Maybe<RoomPropertyRoom_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<RoomPropertyRoom_Max_Order_By>;
  min?: Maybe<RoomPropertyRoom_Min_Order_By>;
  stddev?: Maybe<RoomPropertyRoom_Stddev_Order_By>;
  stddev_pop?: Maybe<RoomPropertyRoom_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<RoomPropertyRoom_Stddev_Samp_Order_By>;
  sum?: Maybe<RoomPropertyRoom_Sum_Order_By>;
  var_pop?: Maybe<RoomPropertyRoom_Var_Pop_Order_By>;
  var_samp?: Maybe<RoomPropertyRoom_Var_Samp_Order_By>;
  variance?: Maybe<RoomPropertyRoom_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "RoomPropertyRoom" */
export type RoomPropertyRoom_Arr_Rel_Insert_Input = {
  data: Array<RoomPropertyRoom_Insert_Input>;
  on_conflict?: Maybe<RoomPropertyRoom_On_Conflict>;
};

/** aggregate avg on columns */
export type RoomPropertyRoom_Avg_Fields = {
  __typename?: 'RoomPropertyRoom_avg_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Avg_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "RoomPropertyRoom". All fields are combined with a logical 'AND'. */
export type RoomPropertyRoom_Bool_Exp = {
  Room?: Maybe<Room_Bool_Exp>;
  RoomProperty?: Maybe<RoomProperty_Bool_Exp>;
  _and?: Maybe<Array<Maybe<RoomPropertyRoom_Bool_Exp>>>;
  _not?: Maybe<RoomPropertyRoom_Bool_Exp>;
  _or?: Maybe<Array<Maybe<RoomPropertyRoom_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  roomID?: Maybe<Int_Comparison_Exp>;
  roomPropertyID?: Maybe<Int_Comparison_Exp>;
  roomPropertyRoomID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "RoomPropertyRoom" */
export enum RoomPropertyRoom_Constraint {
  /** unique or primary key constraint */
  RoomPropertyRoomPkey = 'RoomPropertyRoom_pkey'
}

/** input type for incrementing integer columne in table "RoomPropertyRoom" */
export type RoomPropertyRoom_Inc_Input = {
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "RoomPropertyRoom" */
export type RoomPropertyRoom_Insert_Input = {
  Room?: Maybe<Room_Obj_Rel_Insert_Input>;
  RoomProperty?: Maybe<RoomProperty_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type RoomPropertyRoom_Max_Fields = {
  __typename?: 'RoomPropertyRoom_max_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Max_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type RoomPropertyRoom_Min_Fields = {
  __typename?: 'RoomPropertyRoom_min_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Min_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** response of any mutation on the table "RoomPropertyRoom" */
export type RoomPropertyRoom_Mutation_Response = {
  __typename?: 'RoomPropertyRoom_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<RoomPropertyRoom>;
};

/** input type for inserting object relation for remote table "RoomPropertyRoom" */
export type RoomPropertyRoom_Obj_Rel_Insert_Input = {
  data: RoomPropertyRoom_Insert_Input;
  on_conflict?: Maybe<RoomPropertyRoom_On_Conflict>;
};

/** on conflict condition type for table "RoomPropertyRoom" */
export type RoomPropertyRoom_On_Conflict = {
  constraint: RoomPropertyRoom_Constraint;
  update_columns: Array<RoomPropertyRoom_Update_Column>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};

/** ordering options when selecting data from "RoomPropertyRoom" */
export type RoomPropertyRoom_Order_By = {
  Room?: Maybe<Room_Order_By>;
  RoomProperty?: Maybe<RoomProperty_Order_By>;
  isDeleted?: Maybe<Order_By>;
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** select columns of table "RoomPropertyRoom" */
export enum RoomPropertyRoom_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPropertyId = 'roomPropertyID',
  /** column name */
  RoomPropertyRoomId = 'roomPropertyRoomID'
}

/** input type for updating data in table "RoomPropertyRoom" */
export type RoomPropertyRoom_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type RoomPropertyRoom_Stddev_Fields = {
  __typename?: 'RoomPropertyRoom_stddev_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Stddev_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type RoomPropertyRoom_Stddev_Pop_Fields = {
  __typename?: 'RoomPropertyRoom_stddev_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Stddev_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type RoomPropertyRoom_Stddev_Samp_Fields = {
  __typename?: 'RoomPropertyRoom_stddev_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Stddev_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type RoomPropertyRoom_Sum_Fields = {
  __typename?: 'RoomPropertyRoom_sum_fields';
  roomID?: Maybe<Scalars['Int']>;
  roomPropertyID?: Maybe<Scalars['Int']>;
  roomPropertyRoomID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Sum_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** update columns of table "RoomPropertyRoom" */
export enum RoomPropertyRoom_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  RoomId = 'roomID',
  /** column name */
  RoomPropertyId = 'roomPropertyID',
  /** column name */
  RoomPropertyRoomId = 'roomPropertyRoomID'
}

/** aggregate var_pop on columns */
export type RoomPropertyRoom_Var_Pop_Fields = {
  __typename?: 'RoomPropertyRoom_var_pop_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Var_Pop_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type RoomPropertyRoom_Var_Samp_Fields = {
  __typename?: 'RoomPropertyRoom_var_samp_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Var_Samp_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type RoomPropertyRoom_Variance_Fields = {
  __typename?: 'RoomPropertyRoom_variance_fields';
  roomID?: Maybe<Scalars['Float']>;
  roomPropertyID?: Maybe<Scalars['Float']>;
  roomPropertyRoomID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "RoomPropertyRoom" */
export type RoomPropertyRoom_Variance_Order_By = {
  roomID?: Maybe<Order_By>;
  roomPropertyID?: Maybe<Order_By>;
  roomPropertyRoomID?: Maybe<Order_By>;
};

/** expression to compare columns of type String. All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  _nlike?: Maybe<Scalars['String']>;
  _nsimilar?: Maybe<Scalars['String']>;
  _similar?: Maybe<Scalars['String']>;
};

/** subscription root */
export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "Address" */
  Address: Array<Address>;
  /** fetch aggregated fields from the table: "Address" */
  Address_aggregate: Address_Aggregate;
  /** fetch data from the table: "Address" using primary key columns */
  Address_by_pk?: Maybe<Address>;
  /** fetch data from the table: "ArchSite" */
  ArchSite: Array<ArchSite>;
  /** fetch data from the table: "ArchSiteComment" */
  ArchSiteComment: Array<ArchSiteComment>;
  /** fetch aggregated fields from the table: "ArchSiteComment" */
  ArchSiteComment_aggregate: ArchSiteComment_Aggregate;
  /** fetch data from the table: "ArchSiteComment" using primary key columns */
  ArchSiteComment_by_pk?: Maybe<ArchSiteComment>;
  /** fetch data from the table: "ArchSiteEntranceType" */
  ArchSiteEntranceType: Array<ArchSiteEntranceType>;
  /** fetch aggregated fields from the table: "ArchSiteEntranceType" */
  ArchSiteEntranceType_aggregate: ArchSiteEntranceType_Aggregate;
  /** fetch data from the table: "ArchSiteEntranceType" using primary key columns */
  ArchSiteEntranceType_by_pk?: Maybe<ArchSiteEntranceType>;
  /** fetch data from the table: "ArchSitePrice" */
  ArchSitePrice: Array<ArchSitePrice>;
  /** fetch aggregated fields from the table: "ArchSitePrice" */
  ArchSitePrice_aggregate: ArchSitePrice_Aggregate;
  /** fetch data from the table: "ArchSitePrice" using primary key columns */
  ArchSitePrice_by_pk?: Maybe<ArchSitePrice>;
  /** fetch data from the table: "ArchSiteType" */
  ArchSiteType: Array<ArchSiteType>;
  /** fetch data from the table: "ArchSiteTypeArchSite" */
  ArchSiteTypeArchSite: Array<ArchSiteTypeArchSite>;
  /** fetch aggregated fields from the table: "ArchSiteTypeArchSite" */
  ArchSiteTypeArchSite_aggregate: ArchSiteTypeArchSite_Aggregate;
  /** fetch data from the table: "ArchSiteTypeArchSite" using primary key columns */
  ArchSiteTypeArchSite_by_pk?: Maybe<ArchSiteTypeArchSite>;
  /** fetch aggregated fields from the table: "ArchSiteType" */
  ArchSiteType_aggregate: ArchSiteType_Aggregate;
  /** fetch data from the table: "ArchSiteType" using primary key columns */
  ArchSiteType_by_pk?: Maybe<ArchSiteType>;
  /** fetch data from the table: "ArchSiteWorkingDay" */
  ArchSiteWorkingDay: Array<ArchSiteWorkingDay>;
  /** fetch data from the table: "ArchSiteWorkingDaySchedule" */
  ArchSiteWorkingDaySchedule: Array<ArchSiteWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingDaySchedule" */
  ArchSiteWorkingDaySchedule_aggregate: ArchSiteWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingDaySchedule" using primary key columns */
  ArchSiteWorkingDaySchedule_by_pk?: Maybe<ArchSiteWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingDay" */
  ArchSiteWorkingDay_aggregate: ArchSiteWorkingDay_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingDay" using primary key columns */
  ArchSiteWorkingDay_by_pk?: Maybe<ArchSiteWorkingDay>;
  /** fetch data from the table: "ArchSiteWorkingSchedule" */
  ArchSiteWorkingSchedule: Array<ArchSiteWorkingSchedule>;
  /** fetch aggregated fields from the table: "ArchSiteWorkingSchedule" */
  ArchSiteWorkingSchedule_aggregate: ArchSiteWorkingSchedule_Aggregate;
  /** fetch data from the table: "ArchSiteWorkingSchedule" using primary key columns */
  ArchSiteWorkingSchedule_by_pk?: Maybe<ArchSiteWorkingSchedule>;
  /** fetch aggregated fields from the table: "ArchSite" */
  ArchSite_aggregate: ArchSite_Aggregate;
  /** fetch data from the table: "ArchSite" using primary key columns */
  ArchSite_by_pk?: Maybe<ArchSite>;
  /** fetch data from the table: "Article" */
  Article: Array<Article>;
  /** fetch data from the table: "ArticleTag" */
  ArticleTag: Array<ArticleTag>;
  /** fetch aggregated fields from the table: "ArticleTag" */
  ArticleTag_aggregate: ArticleTag_Aggregate;
  /** fetch data from the table: "ArticleTag" using primary key columns */
  ArticleTag_by_pk?: Maybe<ArticleTag>;
  /** fetch data from the table: "ArticleUser" */
  ArticleUser: Array<ArticleUser>;
  /** fetch aggregated fields from the table: "ArticleUser" */
  ArticleUser_aggregate: ArticleUser_Aggregate;
  /** fetch data from the table: "ArticleUser" using primary key columns */
  ArticleUser_by_pk?: Maybe<ArticleUser>;
  /** fetch aggregated fields from the table: "Article" */
  Article_aggregate: Article_Aggregate;
  /** fetch data from the table: "Article" using primary key columns */
  Article_by_pk?: Maybe<Article>;
  /** fetch data from the table: "City" */
  City: Array<City>;
  /** fetch aggregated fields from the table: "City" */
  City_aggregate: City_Aggregate;
  /** fetch data from the table: "City" using primary key columns */
  City_by_pk?: Maybe<City>;
  /** fetch data from the table: "Company" */
  Company: Array<Company>;
  /** fetch data from the table: "CompanyContact" */
  CompanyContact: Array<CompanyContact>;
  /** fetch aggregated fields from the table: "CompanyContact" */
  CompanyContact_aggregate: CompanyContact_Aggregate;
  /** fetch data from the table: "CompanyContact" using primary key columns */
  CompanyContact_by_pk?: Maybe<CompanyContact>;
  /** fetch data from the table: "CompanyPhone" */
  CompanyPhone: Array<CompanyPhone>;
  /** fetch aggregated fields from the table: "CompanyPhone" */
  CompanyPhone_aggregate: CompanyPhone_Aggregate;
  /** fetch data from the table: "CompanyPhone" using primary key columns */
  CompanyPhone_by_pk?: Maybe<CompanyPhone>;
  /** fetch data from the table: "CompanyUser" */
  CompanyUser: Array<CompanyUser>;
  /** fetch aggregated fields from the table: "CompanyUser" */
  CompanyUser_aggregate: CompanyUser_Aggregate;
  /** fetch data from the table: "CompanyUser" using primary key columns */
  CompanyUser_by_pk?: Maybe<CompanyUser>;
  /** fetch aggregated fields from the table: "Company" */
  Company_aggregate: Company_Aggregate;
  /** fetch data from the table: "Company" using primary key columns */
  Company_by_pk?: Maybe<Company>;
  /** fetch data from the table: "Country" */
  Country: Array<Country>;
  /** fetch aggregated fields from the table: "Country" */
  Country_aggregate: Country_Aggregate;
  /** fetch data from the table: "Country" using primary key columns */
  Country_by_pk?: Maybe<Country>;
  /** fetch data from the table: "Day" */
  Day: Array<Day>;
  /** fetch aggregated fields from the table: "Day" */
  Day_aggregate: Day_Aggregate;
  /** fetch data from the table: "Day" using primary key columns */
  Day_by_pk?: Maybe<Day>;
  /** fetch data from the table: "District" */
  District: Array<District>;
  /** fetch aggregated fields from the table: "District" */
  District_aggregate: District_Aggregate;
  /** fetch data from the table: "District" using primary key columns */
  District_by_pk?: Maybe<District>;
  /** fetch data from the table: "Hotel" */
  Hotel: Array<Hotel>;
  /** fetch data from the table: "HotelComment" */
  HotelComment: Array<HotelComment>;
  /** fetch aggregated fields from the table: "HotelComment" */
  HotelComment_aggregate: HotelComment_Aggregate;
  /** fetch data from the table: "HotelComment" using primary key columns */
  HotelComment_by_pk?: Maybe<HotelComment>;
  /** fetch data from the table: "HotelRoom" */
  HotelRoom: Array<HotelRoom>;
  /** fetch aggregated fields from the table: "HotelRoom" */
  HotelRoom_aggregate: HotelRoom_Aggregate;
  /** fetch data from the table: "HotelRoom" using primary key columns */
  HotelRoom_by_pk?: Maybe<HotelRoom>;
  /** fetch data from the table: "HotelService" */
  HotelService: Array<HotelService>;
  /** fetch data from the table: "HotelServiceProperty" */
  HotelServiceProperty: Array<HotelServiceProperty>;
  /** fetch aggregated fields from the table: "HotelServiceProperty" */
  HotelServiceProperty_aggregate: HotelServiceProperty_Aggregate;
  /** fetch data from the table: "HotelServiceProperty" using primary key columns */
  HotelServiceProperty_by_pk?: Maybe<HotelServiceProperty>;
  /** fetch aggregated fields from the table: "HotelService" */
  HotelService_aggregate: HotelService_Aggregate;
  /** fetch data from the table: "HotelService" using primary key columns */
  HotelService_by_pk?: Maybe<HotelService>;
  /** fetch aggregated fields from the table: "Hotel" */
  Hotel_aggregate: Hotel_Aggregate;
  /** fetch data from the table: "Hotel" using primary key columns */
  Hotel_by_pk?: Maybe<Hotel>;
  /** fetch data from the table: "Location" */
  Location: Array<Location>;
  /** fetch aggregated fields from the table: "Location" */
  Location_aggregate: Location_Aggregate;
  /** fetch data from the table: "Location" using primary key columns */
  Location_by_pk?: Maybe<Location>;
  /** fetch data from the table: "LoginType" */
  LoginType: Array<LoginType>;
  /** fetch aggregated fields from the table: "LoginType" */
  LoginType_aggregate: LoginType_Aggregate;
  /** fetch data from the table: "LoginType" using primary key columns */
  LoginType_by_pk?: Maybe<LoginType>;
  /** fetch data from the table: "Museum" */
  Museum: Array<Museum>;
  /** fetch data from the table: "MuseumComment" */
  MuseumComment: Array<MuseumComment>;
  /** fetch aggregated fields from the table: "MuseumComment" */
  MuseumComment_aggregate: MuseumComment_Aggregate;
  /** fetch data from the table: "MuseumComment" using primary key columns */
  MuseumComment_by_pk?: Maybe<MuseumComment>;
  /** fetch data from the table: "MuseumEntranceType" */
  MuseumEntranceType: Array<MuseumEntranceType>;
  /** fetch aggregated fields from the table: "MuseumEntranceType" */
  MuseumEntranceType_aggregate: MuseumEntranceType_Aggregate;
  /** fetch data from the table: "MuseumEntranceType" using primary key columns */
  MuseumEntranceType_by_pk?: Maybe<MuseumEntranceType>;
  /** fetch data from the table: "MuseumPrice" */
  MuseumPrice: Array<MuseumPrice>;
  /** fetch aggregated fields from the table: "MuseumPrice" */
  MuseumPrice_aggregate: MuseumPrice_Aggregate;
  /** fetch data from the table: "MuseumPrice" using primary key columns */
  MuseumPrice_by_pk?: Maybe<MuseumPrice>;
  /** fetch data from the table: "MuseumType" */
  MuseumType: Array<MuseumType>;
  /** fetch data from the table: "MuseumTypeMuseum" */
  MuseumTypeMuseum: Array<MuseumTypeMuseum>;
  /** fetch aggregated fields from the table: "MuseumTypeMuseum" */
  MuseumTypeMuseum_aggregate: MuseumTypeMuseum_Aggregate;
  /** fetch data from the table: "MuseumTypeMuseum" using primary key columns */
  MuseumTypeMuseum_by_pk?: Maybe<MuseumTypeMuseum>;
  /** fetch aggregated fields from the table: "MuseumType" */
  MuseumType_aggregate: MuseumType_Aggregate;
  /** fetch data from the table: "MuseumType" using primary key columns */
  MuseumType_by_pk?: Maybe<MuseumType>;
  /** fetch data from the table: "MuseumWorkingDay" */
  MuseumWorkingDay: Array<MuseumWorkingDay>;
  /** fetch data from the table: "MuseumWorkingDaySchedule" */
  MuseumWorkingDaySchedule: Array<MuseumWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingDaySchedule" */
  MuseumWorkingDaySchedule_aggregate: MuseumWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "MuseumWorkingDaySchedule" using primary key columns */
  MuseumWorkingDaySchedule_by_pk?: Maybe<MuseumWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingDay" */
  MuseumWorkingDay_aggregate: MuseumWorkingDay_Aggregate;
  /** fetch data from the table: "MuseumWorkingDay" using primary key columns */
  MuseumWorkingDay_by_pk?: Maybe<MuseumWorkingDay>;
  /** fetch data from the table: "MuseumWorkingSchedule" */
  MuseumWorkingSchedule: Array<MuseumWorkingSchedule>;
  /** fetch aggregated fields from the table: "MuseumWorkingSchedule" */
  MuseumWorkingSchedule_aggregate: MuseumWorkingSchedule_Aggregate;
  /** fetch data from the table: "MuseumWorkingSchedule" using primary key columns */
  MuseumWorkingSchedule_by_pk?: Maybe<MuseumWorkingSchedule>;
  /** fetch aggregated fields from the table: "Museum" */
  Museum_aggregate: Museum_Aggregate;
  /** fetch data from the table: "Museum" using primary key columns */
  Museum_by_pk?: Maybe<Museum>;
  /** fetch data from the table: "Phone" */
  Phone: Array<Phone>;
  /** fetch aggregated fields from the table: "Phone" */
  Phone_aggregate: Phone_Aggregate;
  /** fetch data from the table: "Phone" using primary key columns */
  Phone_by_pk?: Maybe<Phone>;
  /** fetch data from the table: "Region" */
  Region: Array<Region>;
  /** fetch aggregated fields from the table: "Region" */
  Region_aggregate: Region_Aggregate;
  /** fetch data from the table: "Region" using primary key columns */
  Region_by_pk?: Maybe<Region>;
  /** fetch data from the table: "Restaurant" */
  Restaurant: Array<Restaurant>;
  /** fetch data from the table: "RestaurantAndCuisineType" */
  RestaurantAndCuisineType: Array<RestaurantAndCuisineType>;
  /** fetch aggregated fields from the table: "RestaurantAndCuisineType" */
  RestaurantAndCuisineType_aggregate: RestaurantAndCuisineType_Aggregate;
  /** fetch data from the table: "RestaurantAndCuisineType" using primary key columns */
  RestaurantAndCuisineType_by_pk?: Maybe<RestaurantAndCuisineType>;
  /** fetch data from the table: "RestaurantComment" */
  RestaurantComment: Array<RestaurantComment>;
  /** fetch aggregated fields from the table: "RestaurantComment" */
  RestaurantComment_aggregate: RestaurantComment_Aggregate;
  /** fetch data from the table: "RestaurantComment" using primary key columns */
  RestaurantComment_by_pk?: Maybe<RestaurantComment>;
  /** fetch data from the table: "RestaurantCuisineType" */
  RestaurantCuisineType: Array<RestaurantCuisineType>;
  /** fetch aggregated fields from the table: "RestaurantCuisineType" */
  RestaurantCuisineType_aggregate: RestaurantCuisineType_Aggregate;
  /** fetch data from the table: "RestaurantCuisineType" using primary key columns */
  RestaurantCuisineType_by_pk?: Maybe<RestaurantCuisineType>;
  /** fetch data from the table: "RestaurantFood" */
  RestaurantFood: Array<RestaurantFood>;
  /** fetch data from the table: "RestaurantFoodType" */
  RestaurantFoodType: Array<RestaurantFoodType>;
  /** fetch aggregated fields from the table: "RestaurantFoodType" */
  RestaurantFoodType_aggregate: RestaurantFoodType_Aggregate;
  /** fetch data from the table: "RestaurantFoodType" using primary key columns */
  RestaurantFoodType_by_pk?: Maybe<RestaurantFoodType>;
  /** fetch aggregated fields from the table: "RestaurantFood" */
  RestaurantFood_aggregate: RestaurantFood_Aggregate;
  /** fetch data from the table: "RestaurantFood" using primary key columns */
  RestaurantFood_by_pk?: Maybe<RestaurantFood>;
  /** fetch data from the table: "RestaurantMenu" */
  RestaurantMenu: Array<RestaurantMenu>;
  /** fetch data from the table: "RestaurantMenuFood" */
  RestaurantMenuFood: Array<RestaurantMenuFood>;
  /** fetch aggregated fields from the table: "RestaurantMenuFood" */
  RestaurantMenuFood_aggregate: RestaurantMenuFood_Aggregate;
  /** fetch data from the table: "RestaurantMenuFood" using primary key columns */
  RestaurantMenuFood_by_pk?: Maybe<RestaurantMenuFood>;
  /** fetch aggregated fields from the table: "RestaurantMenu" */
  RestaurantMenu_aggregate: RestaurantMenu_Aggregate;
  /** fetch data from the table: "RestaurantMenu" using primary key columns */
  RestaurantMenu_by_pk?: Maybe<RestaurantMenu>;
  /** fetch data from the table: "RestaurantType" */
  RestaurantType: Array<RestaurantType>;
  /** fetch aggregated fields from the table: "RestaurantType" */
  RestaurantType_aggregate: RestaurantType_Aggregate;
  /** fetch data from the table: "RestaurantType" using primary key columns */
  RestaurantType_by_pk?: Maybe<RestaurantType>;
  /** fetch data from the table: "RestaurantWorkingDay" */
  RestaurantWorkingDay: Array<RestaurantWorkingDay>;
  /** fetch data from the table: "RestaurantWorkingDaySchedule" */
  RestaurantWorkingDaySchedule: Array<RestaurantWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingDaySchedule" */
  RestaurantWorkingDaySchedule_aggregate: RestaurantWorkingDaySchedule_Aggregate;
  /** fetch data from the table: "RestaurantWorkingDaySchedule" using primary key columns */
  RestaurantWorkingDaySchedule_by_pk?: Maybe<RestaurantWorkingDaySchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingDay" */
  RestaurantWorkingDay_aggregate: RestaurantWorkingDay_Aggregate;
  /** fetch data from the table: "RestaurantWorkingDay" using primary key columns */
  RestaurantWorkingDay_by_pk?: Maybe<RestaurantWorkingDay>;
  /** fetch data from the table: "RestaurantWorkingSchedule" */
  RestaurantWorkingSchedule: Array<RestaurantWorkingSchedule>;
  /** fetch aggregated fields from the table: "RestaurantWorkingSchedule" */
  RestaurantWorkingSchedule_aggregate: RestaurantWorkingSchedule_Aggregate;
  /** fetch data from the table: "RestaurantWorkingSchedule" using primary key columns */
  RestaurantWorkingSchedule_by_pk?: Maybe<RestaurantWorkingSchedule>;
  /** fetch aggregated fields from the table: "Restaurant" */
  Restaurant_aggregate: Restaurant_Aggregate;
  /** fetch data from the table: "Restaurant" using primary key columns */
  Restaurant_by_pk?: Maybe<Restaurant>;
  /** fetch data from the table: "Room" */
  Room: Array<Room>;
  /** fetch data from the table: "RoomPicture" */
  RoomPicture: Array<RoomPicture>;
  /** fetch aggregated fields from the table: "RoomPicture" */
  RoomPicture_aggregate: RoomPicture_Aggregate;
  /** fetch data from the table: "RoomPicture" using primary key columns */
  RoomPicture_by_pk?: Maybe<RoomPicture>;
  /** fetch data from the table: "RoomPrice" */
  RoomPrice: Array<RoomPrice>;
  /** fetch aggregated fields from the table: "RoomPrice" */
  RoomPrice_aggregate: RoomPrice_Aggregate;
  /** fetch data from the table: "RoomPrice" using primary key columns */
  RoomPrice_by_pk?: Maybe<RoomPrice>;
  /** fetch data from the table: "RoomProperty" */
  RoomProperty: Array<RoomProperty>;
  /** fetch data from the table: "RoomPropertyRoom" */
  RoomPropertyRoom: Array<RoomPropertyRoom>;
  /** fetch aggregated fields from the table: "RoomPropertyRoom" */
  RoomPropertyRoom_aggregate: RoomPropertyRoom_Aggregate;
  /** fetch data from the table: "RoomPropertyRoom" using primary key columns */
  RoomPropertyRoom_by_pk?: Maybe<RoomPropertyRoom>;
  /** fetch aggregated fields from the table: "RoomProperty" */
  RoomProperty_aggregate: RoomProperty_Aggregate;
  /** fetch data from the table: "RoomProperty" using primary key columns */
  RoomProperty_by_pk?: Maybe<RoomProperty>;
  /** fetch aggregated fields from the table: "Room" */
  Room_aggregate: Room_Aggregate;
  /** fetch data from the table: "Room" using primary key columns */
  Room_by_pk?: Maybe<Room>;
  /** fetch data from the table: "Tag" */
  Tag: Array<Tag>;
  /** fetch aggregated fields from the table: "Tag" */
  Tag_aggregate: Tag_Aggregate;
  /** fetch data from the table: "Tag" using primary key columns */
  Tag_by_pk?: Maybe<Tag>;
  /** fetch data from the table: "TravelGuide" */
  TravelGuide: Array<TravelGuide>;
  /** fetch data from the table: "TravelGuideArchSite" */
  TravelGuideArchSite: Array<TravelGuideArchSite>;
  /** fetch aggregated fields from the table: "TravelGuideArchSite" */
  TravelGuideArchSite_aggregate: TravelGuideArchSite_Aggregate;
  /** fetch data from the table: "TravelGuideArchSite" using primary key columns */
  TravelGuideArchSite_by_pk?: Maybe<TravelGuideArchSite>;
  /** fetch data from the table: "TravelGuideHotel" */
  TravelGuideHotel: Array<TravelGuideHotel>;
  /** fetch aggregated fields from the table: "TravelGuideHotel" */
  TravelGuideHotel_aggregate: TravelGuideHotel_Aggregate;
  /** fetch data from the table: "TravelGuideHotel" using primary key columns */
  TravelGuideHotel_by_pk?: Maybe<TravelGuideHotel>;
  /** fetch data from the table: "TravelGuideLocation" */
  TravelGuideLocation: Array<TravelGuideLocation>;
  /** fetch aggregated fields from the table: "TravelGuideLocation" */
  TravelGuideLocation_aggregate: TravelGuideLocation_Aggregate;
  /** fetch data from the table: "TravelGuideLocation" using primary key columns */
  TravelGuideLocation_by_pk?: Maybe<TravelGuideLocation>;
  /** fetch data from the table: "TravelGuideMuseum" */
  TravelGuideMuseum: Array<TravelGuideMuseum>;
  /** fetch aggregated fields from the table: "TravelGuideMuseum" */
  TravelGuideMuseum_aggregate: TravelGuideMuseum_Aggregate;
  /** fetch data from the table: "TravelGuideMuseum" using primary key columns */
  TravelGuideMuseum_by_pk?: Maybe<TravelGuideMuseum>;
  /** fetch data from the table: "TravelGuideRestaurant" */
  TravelGuideRestaurant: Array<TravelGuideRestaurant>;
  /** fetch aggregated fields from the table: "TravelGuideRestaurant" */
  TravelGuideRestaurant_aggregate: TravelGuideRestaurant_Aggregate;
  /** fetch data from the table: "TravelGuideRestaurant" using primary key columns */
  TravelGuideRestaurant_by_pk?: Maybe<TravelGuideRestaurant>;
  /** fetch aggregated fields from the table: "TravelGuide" */
  TravelGuide_aggregate: TravelGuide_Aggregate;
  /** fetch data from the table: "TravelGuide" using primary key columns */
  TravelGuide_by_pk?: Maybe<TravelGuide>;
  /** fetch data from the table: "User" */
  User: Array<User>;
  /** fetch data from the table: "UserType" */
  UserType: Array<UserType>;
  /** fetch aggregated fields from the table: "UserType" */
  UserType_aggregate: UserType_Aggregate;
  /** fetch data from the table: "UserType" using primary key columns */
  UserType_by_pk?: Maybe<UserType>;
  /** fetch aggregated fields from the table: "User" */
  User_aggregate: User_Aggregate;
  /** fetch data from the table: "User" using primary key columns */
  User_by_pk?: Maybe<User>;
};


/** subscription root */
export type Subscription_RootAddressArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAddress_AggregateArgs = {
  distinct_on?: Maybe<Array<Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Address_Order_By>>;
  where?: Maybe<Address_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootAddress_By_PkArgs = {
  addressID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteCommentArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteComment_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteComment_By_PkArgs = {
  archSiteCommentID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteEntranceTypeArgs = {
  distinct_on?: Maybe<Array<ArchSiteEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteEntranceType_Order_By>>;
  where?: Maybe<ArchSiteEntranceType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteEntranceType_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteEntranceType_Order_By>>;
  where?: Maybe<ArchSiteEntranceType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteEntranceType_By_PkArgs = {
  archSiteEntranceTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSitePriceArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSitePrice_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSitePrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSitePrice_Order_By>>;
  where?: Maybe<ArchSitePrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSitePrice_By_PkArgs = {
  archSitePriceID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteTypeArgs = {
  distinct_on?: Maybe<Array<ArchSiteType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteType_Order_By>>;
  where?: Maybe<ArchSiteType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteTypeArchSiteArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteTypeArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteTypeArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteTypeArchSite_Order_By>>;
  where?: Maybe<ArchSiteTypeArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteTypeArchSite_By_PkArgs = {
  archSiteTypeArchSiteID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteType_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteType_Order_By>>;
  where?: Maybe<ArchSiteType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteType_By_PkArgs = {
  archSiteTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDayArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDaySchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDaySchedule_By_PkArgs = {
  archSiteWorkingDayScheduleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingDay_Order_By>>;
  where?: Maybe<ArchSiteWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingDay_By_PkArgs = {
  archSiteWorkingDayID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSiteWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteWorkingSchedule_Order_By>>;
  where?: Maybe<ArchSiteWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSiteWorkingSchedule_By_PkArgs = {
  archSiteWorkingScheduleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSite_Order_By>>;
  where?: Maybe<ArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArchSite_By_PkArgs = {
  archSiteID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArticleArgs = {
  distinct_on?: Maybe<Array<Article_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Article_Order_By>>;
  where?: Maybe<Article_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticleTagArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticleTag_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticleTag_By_PkArgs = {
  articleTagID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArticleUserArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticleUser_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticleUser_By_PkArgs = {
  articleUserID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootArticle_AggregateArgs = {
  distinct_on?: Maybe<Array<Article_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Article_Order_By>>;
  where?: Maybe<Article_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootArticle_By_PkArgs = {
  articleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCityArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCity_AggregateArgs = {
  distinct_on?: Maybe<Array<City_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<City_Order_By>>;
  where?: Maybe<City_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCity_By_PkArgs = {
  cityID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCompanyArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyContactArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyContact_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyContact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyContact_Order_By>>;
  where?: Maybe<CompanyContact_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyContact_By_PkArgs = {
  companyContactID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCompanyPhoneArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyPhone_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyPhone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyPhone_Order_By>>;
  where?: Maybe<CompanyPhone_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyPhone_By_PkArgs = {
  companyPhoneID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCompanyUserArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyUser_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompanyUser_By_PkArgs = {
  companyUserID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCompany_AggregateArgs = {
  distinct_on?: Maybe<Array<Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Company_Order_By>>;
  where?: Maybe<Company_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCompany_By_PkArgs = {
  companyID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCountryArgs = {
  distinct_on?: Maybe<Array<Country_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Country_Order_By>>;
  where?: Maybe<Country_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCountry_AggregateArgs = {
  distinct_on?: Maybe<Array<Country_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Country_Order_By>>;
  where?: Maybe<Country_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCountry_By_PkArgs = {
  countryID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootDayArgs = {
  distinct_on?: Maybe<Array<Day_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Day_Order_By>>;
  where?: Maybe<Day_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDay_AggregateArgs = {
  distinct_on?: Maybe<Array<Day_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Day_Order_By>>;
  where?: Maybe<Day_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDay_By_PkArgs = {
  dayID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootDistrictArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDistrict_AggregateArgs = {
  distinct_on?: Maybe<Array<District_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<District_Order_By>>;
  where?: Maybe<District_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootDistrict_By_PkArgs = {
  districtID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHotelArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelCommentArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelComment_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelComment_By_PkArgs = {
  hotelCommentID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHotelRoomArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelRoom_Order_By>>;
  where?: Maybe<HotelRoom_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelRoom_By_PkArgs = {
  hotelRoomID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHotelServiceArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelServicePropertyArgs = {
  distinct_on?: Maybe<Array<HotelServiceProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelServiceProperty_Order_By>>;
  where?: Maybe<HotelServiceProperty_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelServiceProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelServiceProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelServiceProperty_Order_By>>;
  where?: Maybe<HotelServiceProperty_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelServiceProperty_By_PkArgs = {
  hotelServicePropertyID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHotelService_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelService_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelService_Order_By>>;
  where?: Maybe<HotelService_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotelService_By_PkArgs = {
  hotelServiceHotelID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHotel_AggregateArgs = {
  distinct_on?: Maybe<Array<Hotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hotel_Order_By>>;
  where?: Maybe<Hotel_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHotel_By_PkArgs = {
  hotelID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootLocationArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLocation_AggregateArgs = {
  distinct_on?: Maybe<Array<Location_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Location_Order_By>>;
  where?: Maybe<Location_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLocation_By_PkArgs = {
  locationID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootLoginTypeArgs = {
  distinct_on?: Maybe<Array<LoginType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<LoginType_Order_By>>;
  where?: Maybe<LoginType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLoginType_AggregateArgs = {
  distinct_on?: Maybe<Array<LoginType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<LoginType_Order_By>>;
  where?: Maybe<LoginType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLoginType_By_PkArgs = {
  loginTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumCommentArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumComment_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumComment_By_PkArgs = {
  museumCommentID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumEntranceTypeArgs = {
  distinct_on?: Maybe<Array<MuseumEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumEntranceType_Order_By>>;
  where?: Maybe<MuseumEntranceType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumEntranceType_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumEntranceType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumEntranceType_Order_By>>;
  where?: Maybe<MuseumEntranceType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumEntranceType_By_PkArgs = {
  museumEntranceTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumPriceArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumPrice_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumPrice_Order_By>>;
  where?: Maybe<MuseumPrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumPrice_By_PkArgs = {
  museumPriceID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumTypeArgs = {
  distinct_on?: Maybe<Array<MuseumType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumType_Order_By>>;
  where?: Maybe<MuseumType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumTypeMuseumArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumTypeMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumTypeMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumTypeMuseum_Order_By>>;
  where?: Maybe<MuseumTypeMuseum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumTypeMuseum_By_PkArgs = {
  museumTypeMuseumID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumType_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumType_Order_By>>;
  where?: Maybe<MuseumType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumType_By_PkArgs = {
  museumTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumWorkingDayArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDaySchedule_Order_By>>;
  where?: Maybe<MuseumWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingDaySchedule_By_PkArgs = {
  museumWorkingDayScheduleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingDay_Order_By>>;
  where?: Maybe<MuseumWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingDay_By_PkArgs = {
  museumWorkingDayID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseumWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumWorkingSchedule_Order_By>>;
  where?: Maybe<MuseumWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseumWorkingSchedule_By_PkArgs = {
  museumWorkingScheduleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<Museum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Museum_Order_By>>;
  where?: Maybe<Museum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootMuseum_By_PkArgs = {
  museumID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootPhoneArgs = {
  distinct_on?: Maybe<Array<Phone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Phone_Order_By>>;
  where?: Maybe<Phone_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPhone_AggregateArgs = {
  distinct_on?: Maybe<Array<Phone_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Phone_Order_By>>;
  where?: Maybe<Phone_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPhone_By_PkArgs = {
  phoneID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRegionArgs = {
  distinct_on?: Maybe<Array<Region_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Region_Order_By>>;
  where?: Maybe<Region_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRegion_AggregateArgs = {
  distinct_on?: Maybe<Array<Region_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Region_Order_By>>;
  where?: Maybe<Region_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRegion_By_PkArgs = {
  regionID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantAndCuisineTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantAndCuisineType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantAndCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantAndCuisineType_Order_By>>;
  where?: Maybe<RestaurantAndCuisineType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantAndCuisineType_By_PkArgs = {
  restaurantAndCuisineTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantCommentArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantComment_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantComment_By_PkArgs = {
  restaurantCommentID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantCuisineTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantCuisineType_Order_By>>;
  where?: Maybe<RestaurantCuisineType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantCuisineType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantCuisineType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantCuisineType_Order_By>>;
  where?: Maybe<RestaurantCuisineType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantCuisineType_By_PkArgs = {
  restaurantCuisineTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantFoodArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantFoodTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantFoodType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFoodType_Order_By>>;
  where?: Maybe<RestaurantFoodType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantFoodType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantFoodType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFoodType_Order_By>>;
  where?: Maybe<RestaurantFoodType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantFoodType_By_PkArgs = {
  restaurantFoodTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantFood_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantFood_Order_By>>;
  where?: Maybe<RestaurantFood_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantFood_By_PkArgs = {
  restaurantFoodID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantMenuArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantMenuFoodArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantMenuFood_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenuFood_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenuFood_Order_By>>;
  where?: Maybe<RestaurantMenuFood_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantMenuFood_By_PkArgs = {
  restaurantMenuFoodID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantMenu_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantMenu_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantMenu_Order_By>>;
  where?: Maybe<RestaurantMenu_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantMenu_By_PkArgs = {
  restaurantMenuID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantTypeArgs = {
  distinct_on?: Maybe<Array<RestaurantType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantType_Order_By>>;
  where?: Maybe<RestaurantType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantType_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantType_Order_By>>;
  where?: Maybe<RestaurantType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantType_By_PkArgs = {
  restaurantTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDayArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDayScheduleArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDaySchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDaySchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDaySchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingDaySchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDaySchedule_By_PkArgs = {
  restaurantWorkingDaySchedule: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDay_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingDay_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingDay_Order_By>>;
  where?: Maybe<RestaurantWorkingDay_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingDay_By_PkArgs = {
  restaurantWorkingDayID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurantWorkingScheduleArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingSchedule_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantWorkingSchedule_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantWorkingSchedule_Order_By>>;
  where?: Maybe<RestaurantWorkingSchedule_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurantWorkingSchedule_By_PkArgs = {
  restaurantWorkingScheduleID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRestaurant_AggregateArgs = {
  distinct_on?: Maybe<Array<Restaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Restaurant_Order_By>>;
  where?: Maybe<Restaurant_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRestaurant_By_PkArgs = {
  restaurantID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoomArgs = {
  distinct_on?: Maybe<Array<Room_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Room_Order_By>>;
  where?: Maybe<Room_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPictureArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPicture_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPicture_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPicture_Order_By>>;
  where?: Maybe<RoomPicture_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPicture_By_PkArgs = {
  roomPictureID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoomPriceArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPrice_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPrice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPrice_Order_By>>;
  where?: Maybe<RoomPrice_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPrice_By_PkArgs = {
  roomPriceID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoomPropertyArgs = {
  distinct_on?: Maybe<Array<RoomProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomProperty_Order_By>>;
  where?: Maybe<RoomProperty_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPropertyRoomArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPropertyRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomPropertyRoom_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomPropertyRoom_Order_By>>;
  where?: Maybe<RoomPropertyRoom_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomPropertyRoom_By_PkArgs = {
  roomPropertyRoomID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoomProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<RoomProperty_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RoomProperty_Order_By>>;
  where?: Maybe<RoomProperty_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoomProperty_By_PkArgs = {
  roomPropertyID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoom_AggregateArgs = {
  distinct_on?: Maybe<Array<Room_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Room_Order_By>>;
  where?: Maybe<Room_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoom_By_PkArgs = {
  roomID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTagArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTag_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTag_By_PkArgs = {
  tagID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuideArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideArchSiteArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideArchSite_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideArchSite_By_PkArgs = {
  travelGuideArchSiteID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuideHotelArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideHotel_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideHotel_By_PkArgs = {
  travelGuideHotel: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuideLocationArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideLocation_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideLocation_By_PkArgs = {
  travelGuideLocationID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuideMuseumArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideMuseum_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideMuseum_By_PkArgs = {
  travelGuideMuseumID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuideRestaurantArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideRestaurant_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuideRestaurant_By_PkArgs = {
  travelGuideRestaurantID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootTravelGuide_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootTravelGuide_By_PkArgs = {
  travelGuideID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootUserArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUserTypeArgs = {
  distinct_on?: Maybe<Array<UserType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<UserType_Order_By>>;
  where?: Maybe<UserType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUserType_AggregateArgs = {
  distinct_on?: Maybe<Array<UserType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<UserType_Order_By>>;
  where?: Maybe<UserType_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUserType_By_PkArgs = {
  userTypeID: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootUser_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootUser_By_PkArgs = {
  userID: Scalars['Int'];
};

/** columns and relationships of "Tag" */
export type Tag = {
  __typename?: 'Tag';
  /** An array relationship */
  ArticleTags: Array<ArticleTag>;
  /** An aggregated array relationship */
  ArticleTags_aggregate: ArticleTag_Aggregate;
  isDeleted: Scalars['Boolean'];
  name: Scalars['String'];
  tagID: Scalars['Int'];
};


/** columns and relationships of "Tag" */
export type TagArticleTagsArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};


/** columns and relationships of "Tag" */
export type TagArticleTags_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleTag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleTag_Order_By>>;
  where?: Maybe<ArticleTag_Bool_Exp>;
};

/** aggregated selection of "Tag" */
export type Tag_Aggregate = {
  __typename?: 'Tag_aggregate';
  aggregate?: Maybe<Tag_Aggregate_Fields>;
  nodes: Array<Tag>;
};

/** aggregate fields of "Tag" */
export type Tag_Aggregate_Fields = {
  __typename?: 'Tag_aggregate_fields';
  avg?: Maybe<Tag_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Tag_Max_Fields>;
  min?: Maybe<Tag_Min_Fields>;
  stddev?: Maybe<Tag_Stddev_Fields>;
  stddev_pop?: Maybe<Tag_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Tag_Stddev_Samp_Fields>;
  sum?: Maybe<Tag_Sum_Fields>;
  var_pop?: Maybe<Tag_Var_Pop_Fields>;
  var_samp?: Maybe<Tag_Var_Samp_Fields>;
  variance?: Maybe<Tag_Variance_Fields>;
};


/** aggregate fields of "Tag" */
export type Tag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Tag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "Tag" */
export type Tag_Aggregate_Order_By = {
  avg?: Maybe<Tag_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Tag_Max_Order_By>;
  min?: Maybe<Tag_Min_Order_By>;
  stddev?: Maybe<Tag_Stddev_Order_By>;
  stddev_pop?: Maybe<Tag_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Tag_Stddev_Samp_Order_By>;
  sum?: Maybe<Tag_Sum_Order_By>;
  var_pop?: Maybe<Tag_Var_Pop_Order_By>;
  var_samp?: Maybe<Tag_Var_Samp_Order_By>;
  variance?: Maybe<Tag_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Tag" */
export type Tag_Arr_Rel_Insert_Input = {
  data: Array<Tag_Insert_Input>;
  on_conflict?: Maybe<Tag_On_Conflict>;
};

/** aggregate avg on columns */
export type Tag_Avg_Fields = {
  __typename?: 'Tag_avg_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "Tag" */
export type Tag_Avg_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Tag". All fields are combined with a logical 'AND'. */
export type Tag_Bool_Exp = {
  ArticleTags?: Maybe<ArticleTag_Bool_Exp>;
  _and?: Maybe<Array<Maybe<Tag_Bool_Exp>>>;
  _not?: Maybe<Tag_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Tag_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  tagID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "Tag" */
export enum Tag_Constraint {
  /** unique or primary key constraint */
  TagPkey = 'Tag_pkey'
}

/** input type for incrementing integer columne in table "Tag" */
export type Tag_Inc_Input = {
  tagID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "Tag" */
export type Tag_Insert_Input = {
  ArticleTags?: Maybe<ArticleTag_Arr_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Tag_Max_Fields = {
  __typename?: 'Tag_max_fields';
  name?: Maybe<Scalars['String']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "Tag" */
export type Tag_Max_Order_By = {
  name?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Tag_Min_Fields = {
  __typename?: 'Tag_min_fields';
  name?: Maybe<Scalars['String']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "Tag" */
export type Tag_Min_Order_By = {
  name?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** response of any mutation on the table "Tag" */
export type Tag_Mutation_Response = {
  __typename?: 'Tag_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Tag>;
};

/** input type for inserting object relation for remote table "Tag" */
export type Tag_Obj_Rel_Insert_Input = {
  data: Tag_Insert_Input;
  on_conflict?: Maybe<Tag_On_Conflict>;
};

/** on conflict condition type for table "Tag" */
export type Tag_On_Conflict = {
  constraint: Tag_Constraint;
  update_columns: Array<Tag_Update_Column>;
  where?: Maybe<Tag_Bool_Exp>;
};

/** ordering options when selecting data from "Tag" */
export type Tag_Order_By = {
  ArticleTags_aggregate?: Maybe<ArticleTag_Aggregate_Order_By>;
  isDeleted?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  tagID?: Maybe<Order_By>;
};

/** select columns of table "Tag" */
export enum Tag_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  TagId = 'tagID'
}

/** input type for updating data in table "Tag" */
export type Tag_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  tagID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Tag_Stddev_Fields = {
  __typename?: 'Tag_stddev_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "Tag" */
export type Tag_Stddev_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Tag_Stddev_Pop_Fields = {
  __typename?: 'Tag_stddev_pop_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "Tag" */
export type Tag_Stddev_Pop_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Tag_Stddev_Samp_Fields = {
  __typename?: 'Tag_stddev_samp_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "Tag" */
export type Tag_Stddev_Samp_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Tag_Sum_Fields = {
  __typename?: 'Tag_sum_fields';
  tagID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "Tag" */
export type Tag_Sum_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** update columns of table "Tag" */
export enum Tag_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Name = 'name',
  /** column name */
  TagId = 'tagID'
}

/** aggregate var_pop on columns */
export type Tag_Var_Pop_Fields = {
  __typename?: 'Tag_var_pop_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "Tag" */
export type Tag_Var_Pop_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Tag_Var_Samp_Fields = {
  __typename?: 'Tag_var_samp_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "Tag" */
export type Tag_Var_Samp_Order_By = {
  tagID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Tag_Variance_Fields = {
  __typename?: 'Tag_variance_fields';
  tagID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "Tag" */
export type Tag_Variance_Order_By = {
  tagID?: Maybe<Order_By>;
};


/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamptz']>;
  _gt?: Maybe<Scalars['timestamptz']>;
  _gte?: Maybe<Scalars['timestamptz']>;
  _in?: Maybe<Array<Scalars['timestamptz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamptz']>;
  _lte?: Maybe<Scalars['timestamptz']>;
  _neq?: Maybe<Scalars['timestamptz']>;
  _nin?: Maybe<Array<Scalars['timestamptz']>>;
};


/** expression to compare columns of type timetz. All fields are combined with logical 'AND'. */
export type Timetz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timetz']>;
  _gt?: Maybe<Scalars['timetz']>;
  _gte?: Maybe<Scalars['timetz']>;
  _in?: Maybe<Array<Scalars['timetz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timetz']>;
  _lte?: Maybe<Scalars['timetz']>;
  _neq?: Maybe<Scalars['timetz']>;
  _nin?: Maybe<Array<Scalars['timetz']>>;
};

/** columns and relationships of "TravelGuide" */
export type TravelGuide = {
  __typename?: 'TravelGuide';
  /** An array relationship */
  TravelGuideArchSites: Array<TravelGuideArchSite>;
  /** An aggregated array relationship */
  TravelGuideArchSites_aggregate: TravelGuideArchSite_Aggregate;
  /** An array relationship */
  TravelGuideHotels: Array<TravelGuideHotel>;
  /** An aggregated array relationship */
  TravelGuideHotels_aggregate: TravelGuideHotel_Aggregate;
  /** An array relationship */
  TravelGuideLocations: Array<TravelGuideLocation>;
  /** An aggregated array relationship */
  TravelGuideLocations_aggregate: TravelGuideLocation_Aggregate;
  /** An array relationship */
  TravelGuideMuseums: Array<TravelGuideMuseum>;
  /** An aggregated array relationship */
  TravelGuideMuseums_aggregate: TravelGuideMuseum_Aggregate;
  /** An array relationship */
  TravelGuideRestaurants: Array<TravelGuideRestaurant>;
  /** An aggregated array relationship */
  TravelGuideRestaurants_aggregate: TravelGuideRestaurant_Aggregate;
  /** An object relationship */
  User: User;
  cost?: Maybe<Scalars['Float']>;
  creationDate: Scalars['timestamptz'];
  isDeleted: Scalars['Boolean'];
  title: Scalars['String'];
  travelGuideID: Scalars['Int'];
  userID: Scalars['Int'];
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideArchSitesArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideArchSites_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideArchSite_Order_By>>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideHotelsArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideHotels_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideHotel_Order_By>>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideLocationsArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideLocations_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideLocation_Order_By>>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideMuseumsArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideMuseums_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideMuseum_Order_By>>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideRestaurantsArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};


/** columns and relationships of "TravelGuide" */
export type TravelGuideTravelGuideRestaurants_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuideRestaurant_Order_By>>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};

/** aggregated selection of "TravelGuide" */
export type TravelGuide_Aggregate = {
  __typename?: 'TravelGuide_aggregate';
  aggregate?: Maybe<TravelGuide_Aggregate_Fields>;
  nodes: Array<TravelGuide>;
};

/** aggregate fields of "TravelGuide" */
export type TravelGuide_Aggregate_Fields = {
  __typename?: 'TravelGuide_aggregate_fields';
  avg?: Maybe<TravelGuide_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuide_Max_Fields>;
  min?: Maybe<TravelGuide_Min_Fields>;
  stddev?: Maybe<TravelGuide_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuide_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuide_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuide_Sum_Fields>;
  var_pop?: Maybe<TravelGuide_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuide_Var_Samp_Fields>;
  variance?: Maybe<TravelGuide_Variance_Fields>;
};


/** aggregate fields of "TravelGuide" */
export type TravelGuide_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuide_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuide" */
export type TravelGuide_Aggregate_Order_By = {
  avg?: Maybe<TravelGuide_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuide_Max_Order_By>;
  min?: Maybe<TravelGuide_Min_Order_By>;
  stddev?: Maybe<TravelGuide_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuide_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuide_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuide_Sum_Order_By>;
  var_pop?: Maybe<TravelGuide_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuide_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuide_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuide" */
export type TravelGuide_Arr_Rel_Insert_Input = {
  data: Array<TravelGuide_Insert_Input>;
  on_conflict?: Maybe<TravelGuide_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuide_Avg_Fields = {
  __typename?: 'TravelGuide_avg_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuide" */
export type TravelGuide_Avg_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuide". All fields are combined with a logical 'AND'. */
export type TravelGuide_Bool_Exp = {
  TravelGuideArchSites?: Maybe<TravelGuideArchSite_Bool_Exp>;
  TravelGuideHotels?: Maybe<TravelGuideHotel_Bool_Exp>;
  TravelGuideLocations?: Maybe<TravelGuideLocation_Bool_Exp>;
  TravelGuideMuseums?: Maybe<TravelGuideMuseum_Bool_Exp>;
  TravelGuideRestaurants?: Maybe<TravelGuideRestaurant_Bool_Exp>;
  User?: Maybe<User_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuide_Bool_Exp>>>;
  _not?: Maybe<TravelGuide_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuide_Bool_Exp>>>;
  cost?: Maybe<Float_Comparison_Exp>;
  creationDate?: Maybe<Timestamptz_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuide" */
export enum TravelGuide_Constraint {
  /** unique or primary key constraint */
  TravelGuidePkey = 'TravelGuide_pkey',
  /** unique or primary key constraint */
  TravelGuideTravelGuideKey = 'TravelGuide_travelGuide_key'
}

/** input type for incrementing integer columne in table "TravelGuide" */
export type TravelGuide_Inc_Input = {
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuide" */
export type TravelGuide_Insert_Input = {
  TravelGuideArchSites?: Maybe<TravelGuideArchSite_Arr_Rel_Insert_Input>;
  TravelGuideHotels?: Maybe<TravelGuideHotel_Arr_Rel_Insert_Input>;
  TravelGuideLocations?: Maybe<TravelGuideLocation_Arr_Rel_Insert_Input>;
  TravelGuideMuseums?: Maybe<TravelGuideMuseum_Arr_Rel_Insert_Input>;
  TravelGuideRestaurants?: Maybe<TravelGuideRestaurant_Arr_Rel_Insert_Input>;
  User?: Maybe<User_Obj_Rel_Insert_Input>;
  cost?: Maybe<Scalars['Float']>;
  creationDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuide_Max_Fields = {
  __typename?: 'TravelGuide_max_fields';
  cost?: Maybe<Scalars['Float']>;
  creationDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuide" */
export type TravelGuide_Max_Order_By = {
  cost?: Maybe<Order_By>;
  creationDate?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuide_Min_Fields = {
  __typename?: 'TravelGuide_min_fields';
  cost?: Maybe<Scalars['Float']>;
  creationDate?: Maybe<Scalars['timestamptz']>;
  title?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuide" */
export type TravelGuide_Min_Order_By = {
  cost?: Maybe<Order_By>;
  creationDate?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuide" */
export type TravelGuide_Mutation_Response = {
  __typename?: 'TravelGuide_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuide>;
};

/** input type for inserting object relation for remote table "TravelGuide" */
export type TravelGuide_Obj_Rel_Insert_Input = {
  data: TravelGuide_Insert_Input;
  on_conflict?: Maybe<TravelGuide_On_Conflict>;
};

/** on conflict condition type for table "TravelGuide" */
export type TravelGuide_On_Conflict = {
  constraint: TravelGuide_Constraint;
  update_columns: Array<TravelGuide_Update_Column>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuide" */
export type TravelGuide_Order_By = {
  TravelGuideArchSites_aggregate?: Maybe<TravelGuideArchSite_Aggregate_Order_By>;
  TravelGuideHotels_aggregate?: Maybe<TravelGuideHotel_Aggregate_Order_By>;
  TravelGuideLocations_aggregate?: Maybe<TravelGuideLocation_Aggregate_Order_By>;
  TravelGuideMuseums_aggregate?: Maybe<TravelGuideMuseum_Aggregate_Order_By>;
  TravelGuideRestaurants_aggregate?: Maybe<TravelGuideRestaurant_Aggregate_Order_By>;
  User?: Maybe<User_Order_By>;
  cost?: Maybe<Order_By>;
  creationDate?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuide" */
export enum TravelGuide_Select_Column {
  /** column name */
  Cost = 'cost',
  /** column name */
  CreationDate = 'creationDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Title = 'title',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  UserId = 'userID'
}

/** input type for updating data in table "TravelGuide" */
export type TravelGuide_Set_Input = {
  cost?: Maybe<Scalars['Float']>;
  creationDate?: Maybe<Scalars['timestamptz']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuide_Stddev_Fields = {
  __typename?: 'TravelGuide_stddev_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuide" */
export type TravelGuide_Stddev_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuide_Stddev_Pop_Fields = {
  __typename?: 'TravelGuide_stddev_pop_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuide" */
export type TravelGuide_Stddev_Pop_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuide_Stddev_Samp_Fields = {
  __typename?: 'TravelGuide_stddev_samp_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuide" */
export type TravelGuide_Stddev_Samp_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuide_Sum_Fields = {
  __typename?: 'TravelGuide_sum_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuide" */
export type TravelGuide_Sum_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuide" */
export enum TravelGuide_Update_Column {
  /** column name */
  Cost = 'cost',
  /** column name */
  CreationDate = 'creationDate',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Title = 'title',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  UserId = 'userID'
}

/** aggregate var_pop on columns */
export type TravelGuide_Var_Pop_Fields = {
  __typename?: 'TravelGuide_var_pop_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuide" */
export type TravelGuide_Var_Pop_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuide_Var_Samp_Fields = {
  __typename?: 'TravelGuide_var_samp_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuide" */
export type TravelGuide_Var_Samp_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuide_Variance_Fields = {
  __typename?: 'TravelGuide_variance_fields';
  cost?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuide" */
export type TravelGuide_Variance_Order_By = {
  cost?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
};

/** columns and relationships of "TravelGuideArchSite" */
export type TravelGuideArchSite = {
  __typename?: 'TravelGuideArchSite';
  /** An object relationship */
  ArchSite: ArchSite;
  /** An object relationship */
  TravelGuide: TravelGuide;
  archSiteID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  note?: Maybe<Scalars['String']>;
  travelGuideArchSiteID: Scalars['Int'];
  travelGuideID: Scalars['Int'];
};

/** aggregated selection of "TravelGuideArchSite" */
export type TravelGuideArchSite_Aggregate = {
  __typename?: 'TravelGuideArchSite_aggregate';
  aggregate?: Maybe<TravelGuideArchSite_Aggregate_Fields>;
  nodes: Array<TravelGuideArchSite>;
};

/** aggregate fields of "TravelGuideArchSite" */
export type TravelGuideArchSite_Aggregate_Fields = {
  __typename?: 'TravelGuideArchSite_aggregate_fields';
  avg?: Maybe<TravelGuideArchSite_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuideArchSite_Max_Fields>;
  min?: Maybe<TravelGuideArchSite_Min_Fields>;
  stddev?: Maybe<TravelGuideArchSite_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuideArchSite_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuideArchSite_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuideArchSite_Sum_Fields>;
  var_pop?: Maybe<TravelGuideArchSite_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuideArchSite_Var_Samp_Fields>;
  variance?: Maybe<TravelGuideArchSite_Variance_Fields>;
};


/** aggregate fields of "TravelGuideArchSite" */
export type TravelGuideArchSite_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuideArchSite_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Aggregate_Order_By = {
  avg?: Maybe<TravelGuideArchSite_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuideArchSite_Max_Order_By>;
  min?: Maybe<TravelGuideArchSite_Min_Order_By>;
  stddev?: Maybe<TravelGuideArchSite_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuideArchSite_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuideArchSite_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuideArchSite_Sum_Order_By>;
  var_pop?: Maybe<TravelGuideArchSite_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuideArchSite_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuideArchSite_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuideArchSite" */
export type TravelGuideArchSite_Arr_Rel_Insert_Input = {
  data: Array<TravelGuideArchSite_Insert_Input>;
  on_conflict?: Maybe<TravelGuideArchSite_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuideArchSite_Avg_Fields = {
  __typename?: 'TravelGuideArchSite_avg_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Avg_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuideArchSite". All fields are combined with a logical 'AND'. */
export type TravelGuideArchSite_Bool_Exp = {
  ArchSite?: Maybe<ArchSite_Bool_Exp>;
  TravelGuide?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuideArchSite_Bool_Exp>>>;
  _not?: Maybe<TravelGuideArchSite_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuideArchSite_Bool_Exp>>>;
  archSiteID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  travelGuideArchSiteID?: Maybe<Int_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuideArchSite" */
export enum TravelGuideArchSite_Constraint {
  /** unique or primary key constraint */
  TravelGuideArchSitePkey = 'TravelGuideArchSite_pkey'
}

/** input type for incrementing integer columne in table "TravelGuideArchSite" */
export type TravelGuideArchSite_Inc_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuideArchSite" */
export type TravelGuideArchSite_Insert_Input = {
  ArchSite?: Maybe<ArchSite_Obj_Rel_Insert_Input>;
  TravelGuide?: Maybe<TravelGuide_Obj_Rel_Insert_Input>;
  archSiteID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuideArchSite_Max_Fields = {
  __typename?: 'TravelGuideArchSite_max_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Max_Order_By = {
  archSiteID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuideArchSite_Min_Fields = {
  __typename?: 'TravelGuideArchSite_min_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Min_Order_By = {
  archSiteID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuideArchSite" */
export type TravelGuideArchSite_Mutation_Response = {
  __typename?: 'TravelGuideArchSite_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuideArchSite>;
};

/** input type for inserting object relation for remote table "TravelGuideArchSite" */
export type TravelGuideArchSite_Obj_Rel_Insert_Input = {
  data: TravelGuideArchSite_Insert_Input;
  on_conflict?: Maybe<TravelGuideArchSite_On_Conflict>;
};

/** on conflict condition type for table "TravelGuideArchSite" */
export type TravelGuideArchSite_On_Conflict = {
  constraint: TravelGuideArchSite_Constraint;
  update_columns: Array<TravelGuideArchSite_Update_Column>;
  where?: Maybe<TravelGuideArchSite_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuideArchSite" */
export type TravelGuideArchSite_Order_By = {
  ArchSite?: Maybe<ArchSite_Order_By>;
  TravelGuide?: Maybe<TravelGuide_Order_By>;
  archSiteID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuideArchSite" */
export enum TravelGuideArchSite_Select_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideArchSiteId = 'travelGuideArchSiteID',
  /** column name */
  TravelGuideId = 'travelGuideID'
}

/** input type for updating data in table "TravelGuideArchSite" */
export type TravelGuideArchSite_Set_Input = {
  archSiteID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuideArchSite_Stddev_Fields = {
  __typename?: 'TravelGuideArchSite_stddev_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Stddev_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuideArchSite_Stddev_Pop_Fields = {
  __typename?: 'TravelGuideArchSite_stddev_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Stddev_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuideArchSite_Stddev_Samp_Fields = {
  __typename?: 'TravelGuideArchSite_stddev_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Stddev_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuideArchSite_Sum_Fields = {
  __typename?: 'TravelGuideArchSite_sum_fields';
  archSiteID?: Maybe<Scalars['Int']>;
  travelGuideArchSiteID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Sum_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuideArchSite" */
export enum TravelGuideArchSite_Update_Column {
  /** column name */
  ArchSiteId = 'archSiteID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideArchSiteId = 'travelGuideArchSiteID',
  /** column name */
  TravelGuideId = 'travelGuideID'
}

/** aggregate var_pop on columns */
export type TravelGuideArchSite_Var_Pop_Fields = {
  __typename?: 'TravelGuideArchSite_var_pop_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Var_Pop_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuideArchSite_Var_Samp_Fields = {
  __typename?: 'TravelGuideArchSite_var_samp_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Var_Samp_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuideArchSite_Variance_Fields = {
  __typename?: 'TravelGuideArchSite_variance_fields';
  archSiteID?: Maybe<Scalars['Float']>;
  travelGuideArchSiteID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuideArchSite" */
export type TravelGuideArchSite_Variance_Order_By = {
  archSiteID?: Maybe<Order_By>;
  travelGuideArchSiteID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** columns and relationships of "TravelGuideHotel" */
export type TravelGuideHotel = {
  __typename?: 'TravelGuideHotel';
  /** An object relationship */
  Hotel: Hotel;
  /** An object relationship */
  TravelGuide: TravelGuide;
  hotelID: Scalars['Int'];
  isDeleted: Scalars['Boolean'];
  note?: Maybe<Scalars['String']>;
  travelGuideHotel: Scalars['Int'];
  travelGuideID: Scalars['Int'];
};

/** aggregated selection of "TravelGuideHotel" */
export type TravelGuideHotel_Aggregate = {
  __typename?: 'TravelGuideHotel_aggregate';
  aggregate?: Maybe<TravelGuideHotel_Aggregate_Fields>;
  nodes: Array<TravelGuideHotel>;
};

/** aggregate fields of "TravelGuideHotel" */
export type TravelGuideHotel_Aggregate_Fields = {
  __typename?: 'TravelGuideHotel_aggregate_fields';
  avg?: Maybe<TravelGuideHotel_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuideHotel_Max_Fields>;
  min?: Maybe<TravelGuideHotel_Min_Fields>;
  stddev?: Maybe<TravelGuideHotel_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuideHotel_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuideHotel_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuideHotel_Sum_Fields>;
  var_pop?: Maybe<TravelGuideHotel_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuideHotel_Var_Samp_Fields>;
  variance?: Maybe<TravelGuideHotel_Variance_Fields>;
};


/** aggregate fields of "TravelGuideHotel" */
export type TravelGuideHotel_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuideHotel_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuideHotel" */
export type TravelGuideHotel_Aggregate_Order_By = {
  avg?: Maybe<TravelGuideHotel_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuideHotel_Max_Order_By>;
  min?: Maybe<TravelGuideHotel_Min_Order_By>;
  stddev?: Maybe<TravelGuideHotel_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuideHotel_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuideHotel_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuideHotel_Sum_Order_By>;
  var_pop?: Maybe<TravelGuideHotel_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuideHotel_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuideHotel_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuideHotel" */
export type TravelGuideHotel_Arr_Rel_Insert_Input = {
  data: Array<TravelGuideHotel_Insert_Input>;
  on_conflict?: Maybe<TravelGuideHotel_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuideHotel_Avg_Fields = {
  __typename?: 'TravelGuideHotel_avg_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Avg_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuideHotel". All fields are combined with a logical 'AND'. */
export type TravelGuideHotel_Bool_Exp = {
  Hotel?: Maybe<Hotel_Bool_Exp>;
  TravelGuide?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuideHotel_Bool_Exp>>>;
  _not?: Maybe<TravelGuideHotel_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuideHotel_Bool_Exp>>>;
  hotelID?: Maybe<Int_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  travelGuideHotel?: Maybe<Int_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuideHotel" */
export enum TravelGuideHotel_Constraint {
  /** unique or primary key constraint */
  TravelGuideHotelPkey = 'TravelGuideHotel_pkey'
}

/** input type for incrementing integer columne in table "TravelGuideHotel" */
export type TravelGuideHotel_Inc_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuideHotel" */
export type TravelGuideHotel_Insert_Input = {
  Hotel?: Maybe<Hotel_Obj_Rel_Insert_Input>;
  TravelGuide?: Maybe<TravelGuide_Obj_Rel_Insert_Input>;
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuideHotel_Max_Fields = {
  __typename?: 'TravelGuideHotel_max_fields';
  hotelID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Max_Order_By = {
  hotelID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuideHotel_Min_Fields = {
  __typename?: 'TravelGuideHotel_min_fields';
  hotelID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Min_Order_By = {
  hotelID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuideHotel" */
export type TravelGuideHotel_Mutation_Response = {
  __typename?: 'TravelGuideHotel_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuideHotel>;
};

/** input type for inserting object relation for remote table "TravelGuideHotel" */
export type TravelGuideHotel_Obj_Rel_Insert_Input = {
  data: TravelGuideHotel_Insert_Input;
  on_conflict?: Maybe<TravelGuideHotel_On_Conflict>;
};

/** on conflict condition type for table "TravelGuideHotel" */
export type TravelGuideHotel_On_Conflict = {
  constraint: TravelGuideHotel_Constraint;
  update_columns: Array<TravelGuideHotel_Update_Column>;
  where?: Maybe<TravelGuideHotel_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuideHotel" */
export type TravelGuideHotel_Order_By = {
  Hotel?: Maybe<Hotel_Order_By>;
  TravelGuide?: Maybe<TravelGuide_Order_By>;
  hotelID?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuideHotel" */
export enum TravelGuideHotel_Select_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideHotel = 'travelGuideHotel',
  /** column name */
  TravelGuideId = 'travelGuideID'
}

/** input type for updating data in table "TravelGuideHotel" */
export type TravelGuideHotel_Set_Input = {
  hotelID?: Maybe<Scalars['Int']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuideHotel_Stddev_Fields = {
  __typename?: 'TravelGuideHotel_stddev_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Stddev_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuideHotel_Stddev_Pop_Fields = {
  __typename?: 'TravelGuideHotel_stddev_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Stddev_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuideHotel_Stddev_Samp_Fields = {
  __typename?: 'TravelGuideHotel_stddev_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Stddev_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuideHotel_Sum_Fields = {
  __typename?: 'TravelGuideHotel_sum_fields';
  hotelID?: Maybe<Scalars['Int']>;
  travelGuideHotel?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Sum_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuideHotel" */
export enum TravelGuideHotel_Update_Column {
  /** column name */
  HotelId = 'hotelID',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideHotel = 'travelGuideHotel',
  /** column name */
  TravelGuideId = 'travelGuideID'
}

/** aggregate var_pop on columns */
export type TravelGuideHotel_Var_Pop_Fields = {
  __typename?: 'TravelGuideHotel_var_pop_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Var_Pop_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuideHotel_Var_Samp_Fields = {
  __typename?: 'TravelGuideHotel_var_samp_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Var_Samp_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuideHotel_Variance_Fields = {
  __typename?: 'TravelGuideHotel_variance_fields';
  hotelID?: Maybe<Scalars['Float']>;
  travelGuideHotel?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuideHotel" */
export type TravelGuideHotel_Variance_Order_By = {
  hotelID?: Maybe<Order_By>;
  travelGuideHotel?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
};

/** columns and relationships of "TravelGuideLocation" */
export type TravelGuideLocation = {
  __typename?: 'TravelGuideLocation';
  /** An object relationship */
  Location: Location;
  /** An object relationship */
  TravelGuide: TravelGuide;
  isDeleted: Scalars['Boolean'];
  locationID: Scalars['Int'];
  travelGuideID: Scalars['Int'];
  travelGuideLocationID: Scalars['Int'];
};

/** aggregated selection of "TravelGuideLocation" */
export type TravelGuideLocation_Aggregate = {
  __typename?: 'TravelGuideLocation_aggregate';
  aggregate?: Maybe<TravelGuideLocation_Aggregate_Fields>;
  nodes: Array<TravelGuideLocation>;
};

/** aggregate fields of "TravelGuideLocation" */
export type TravelGuideLocation_Aggregate_Fields = {
  __typename?: 'TravelGuideLocation_aggregate_fields';
  avg?: Maybe<TravelGuideLocation_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuideLocation_Max_Fields>;
  min?: Maybe<TravelGuideLocation_Min_Fields>;
  stddev?: Maybe<TravelGuideLocation_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuideLocation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuideLocation_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuideLocation_Sum_Fields>;
  var_pop?: Maybe<TravelGuideLocation_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuideLocation_Var_Samp_Fields>;
  variance?: Maybe<TravelGuideLocation_Variance_Fields>;
};


/** aggregate fields of "TravelGuideLocation" */
export type TravelGuideLocation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuideLocation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuideLocation" */
export type TravelGuideLocation_Aggregate_Order_By = {
  avg?: Maybe<TravelGuideLocation_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuideLocation_Max_Order_By>;
  min?: Maybe<TravelGuideLocation_Min_Order_By>;
  stddev?: Maybe<TravelGuideLocation_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuideLocation_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuideLocation_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuideLocation_Sum_Order_By>;
  var_pop?: Maybe<TravelGuideLocation_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuideLocation_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuideLocation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuideLocation" */
export type TravelGuideLocation_Arr_Rel_Insert_Input = {
  data: Array<TravelGuideLocation_Insert_Input>;
  on_conflict?: Maybe<TravelGuideLocation_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuideLocation_Avg_Fields = {
  __typename?: 'TravelGuideLocation_avg_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Avg_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuideLocation". All fields are combined with a logical 'AND'. */
export type TravelGuideLocation_Bool_Exp = {
  Location?: Maybe<Location_Bool_Exp>;
  TravelGuide?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuideLocation_Bool_Exp>>>;
  _not?: Maybe<TravelGuideLocation_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuideLocation_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  locationID?: Maybe<Int_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
  travelGuideLocationID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuideLocation" */
export enum TravelGuideLocation_Constraint {
  /** unique or primary key constraint */
  TravelGuideLocationPkey = 'TravelGuideLocation_pkey'
}

/** input type for incrementing integer columne in table "TravelGuideLocation" */
export type TravelGuideLocation_Inc_Input = {
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuideLocation" */
export type TravelGuideLocation_Insert_Input = {
  Location?: Maybe<Location_Obj_Rel_Insert_Input>;
  TravelGuide?: Maybe<TravelGuide_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuideLocation_Max_Fields = {
  __typename?: 'TravelGuideLocation_max_fields';
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Max_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuideLocation_Min_Fields = {
  __typename?: 'TravelGuideLocation_min_fields';
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Min_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuideLocation" */
export type TravelGuideLocation_Mutation_Response = {
  __typename?: 'TravelGuideLocation_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuideLocation>;
};

/** input type for inserting object relation for remote table "TravelGuideLocation" */
export type TravelGuideLocation_Obj_Rel_Insert_Input = {
  data: TravelGuideLocation_Insert_Input;
  on_conflict?: Maybe<TravelGuideLocation_On_Conflict>;
};

/** on conflict condition type for table "TravelGuideLocation" */
export type TravelGuideLocation_On_Conflict = {
  constraint: TravelGuideLocation_Constraint;
  update_columns: Array<TravelGuideLocation_Update_Column>;
  where?: Maybe<TravelGuideLocation_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuideLocation" */
export type TravelGuideLocation_Order_By = {
  Location?: Maybe<Location_Order_By>;
  TravelGuide?: Maybe<TravelGuide_Order_By>;
  isDeleted?: Maybe<Order_By>;
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuideLocation" */
export enum TravelGuideLocation_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideLocationId = 'travelGuideLocationID'
}

/** input type for updating data in table "TravelGuideLocation" */
export type TravelGuideLocation_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuideLocation_Stddev_Fields = {
  __typename?: 'TravelGuideLocation_stddev_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Stddev_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuideLocation_Stddev_Pop_Fields = {
  __typename?: 'TravelGuideLocation_stddev_pop_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Stddev_Pop_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuideLocation_Stddev_Samp_Fields = {
  __typename?: 'TravelGuideLocation_stddev_samp_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Stddev_Samp_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuideLocation_Sum_Fields = {
  __typename?: 'TravelGuideLocation_sum_fields';
  locationID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideLocationID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Sum_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuideLocation" */
export enum TravelGuideLocation_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LocationId = 'locationID',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideLocationId = 'travelGuideLocationID'
}

/** aggregate var_pop on columns */
export type TravelGuideLocation_Var_Pop_Fields = {
  __typename?: 'TravelGuideLocation_var_pop_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Var_Pop_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuideLocation_Var_Samp_Fields = {
  __typename?: 'TravelGuideLocation_var_samp_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Var_Samp_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuideLocation_Variance_Fields = {
  __typename?: 'TravelGuideLocation_variance_fields';
  locationID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideLocationID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuideLocation" */
export type TravelGuideLocation_Variance_Order_By = {
  locationID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideLocationID?: Maybe<Order_By>;
};

/** columns and relationships of "TravelGuideMuseum" */
export type TravelGuideMuseum = {
  __typename?: 'TravelGuideMuseum';
  /** An object relationship */
  Museum: Museum;
  /** An object relationship */
  TravelGuide: TravelGuide;
  isDeleted: Scalars['Boolean'];
  museumID: Scalars['Int'];
  note?: Maybe<Scalars['String']>;
  travelGuideID: Scalars['Int'];
  travelGuideMuseumID: Scalars['Int'];
};

/** aggregated selection of "TravelGuideMuseum" */
export type TravelGuideMuseum_Aggregate = {
  __typename?: 'TravelGuideMuseum_aggregate';
  aggregate?: Maybe<TravelGuideMuseum_Aggregate_Fields>;
  nodes: Array<TravelGuideMuseum>;
};

/** aggregate fields of "TravelGuideMuseum" */
export type TravelGuideMuseum_Aggregate_Fields = {
  __typename?: 'TravelGuideMuseum_aggregate_fields';
  avg?: Maybe<TravelGuideMuseum_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuideMuseum_Max_Fields>;
  min?: Maybe<TravelGuideMuseum_Min_Fields>;
  stddev?: Maybe<TravelGuideMuseum_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuideMuseum_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuideMuseum_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuideMuseum_Sum_Fields>;
  var_pop?: Maybe<TravelGuideMuseum_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuideMuseum_Var_Samp_Fields>;
  variance?: Maybe<TravelGuideMuseum_Variance_Fields>;
};


/** aggregate fields of "TravelGuideMuseum" */
export type TravelGuideMuseum_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuideMuseum_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Aggregate_Order_By = {
  avg?: Maybe<TravelGuideMuseum_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuideMuseum_Max_Order_By>;
  min?: Maybe<TravelGuideMuseum_Min_Order_By>;
  stddev?: Maybe<TravelGuideMuseum_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuideMuseum_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuideMuseum_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuideMuseum_Sum_Order_By>;
  var_pop?: Maybe<TravelGuideMuseum_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuideMuseum_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuideMuseum_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuideMuseum" */
export type TravelGuideMuseum_Arr_Rel_Insert_Input = {
  data: Array<TravelGuideMuseum_Insert_Input>;
  on_conflict?: Maybe<TravelGuideMuseum_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuideMuseum_Avg_Fields = {
  __typename?: 'TravelGuideMuseum_avg_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Avg_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuideMuseum". All fields are combined with a logical 'AND'. */
export type TravelGuideMuseum_Bool_Exp = {
  Museum?: Maybe<Museum_Bool_Exp>;
  TravelGuide?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuideMuseum_Bool_Exp>>>;
  _not?: Maybe<TravelGuideMuseum_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuideMuseum_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  museumID?: Maybe<Int_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
  travelGuideMuseumID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuideMuseum" */
export enum TravelGuideMuseum_Constraint {
  /** unique or primary key constraint */
  TravelGuideMuseumPkey = 'TravelGuideMuseum_pkey'
}

/** input type for incrementing integer columne in table "TravelGuideMuseum" */
export type TravelGuideMuseum_Inc_Input = {
  museumID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuideMuseum" */
export type TravelGuideMuseum_Insert_Input = {
  Museum?: Maybe<Museum_Obj_Rel_Insert_Input>;
  TravelGuide?: Maybe<TravelGuide_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuideMuseum_Max_Fields = {
  __typename?: 'TravelGuideMuseum_max_fields';
  museumID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Max_Order_By = {
  museumID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuideMuseum_Min_Fields = {
  __typename?: 'TravelGuideMuseum_min_fields';
  museumID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Min_Order_By = {
  museumID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuideMuseum" */
export type TravelGuideMuseum_Mutation_Response = {
  __typename?: 'TravelGuideMuseum_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuideMuseum>;
};

/** input type for inserting object relation for remote table "TravelGuideMuseum" */
export type TravelGuideMuseum_Obj_Rel_Insert_Input = {
  data: TravelGuideMuseum_Insert_Input;
  on_conflict?: Maybe<TravelGuideMuseum_On_Conflict>;
};

/** on conflict condition type for table "TravelGuideMuseum" */
export type TravelGuideMuseum_On_Conflict = {
  constraint: TravelGuideMuseum_Constraint;
  update_columns: Array<TravelGuideMuseum_Update_Column>;
  where?: Maybe<TravelGuideMuseum_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuideMuseum" */
export type TravelGuideMuseum_Order_By = {
  Museum?: Maybe<Museum_Order_By>;
  TravelGuide?: Maybe<TravelGuide_Order_By>;
  isDeleted?: Maybe<Order_By>;
  museumID?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuideMuseum" */
export enum TravelGuideMuseum_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideMuseumId = 'travelGuideMuseumID'
}

/** input type for updating data in table "TravelGuideMuseum" */
export type TravelGuideMuseum_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  museumID?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuideMuseum_Stddev_Fields = {
  __typename?: 'TravelGuideMuseum_stddev_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Stddev_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuideMuseum_Stddev_Pop_Fields = {
  __typename?: 'TravelGuideMuseum_stddev_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Stddev_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuideMuseum_Stddev_Samp_Fields = {
  __typename?: 'TravelGuideMuseum_stddev_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Stddev_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuideMuseum_Sum_Fields = {
  __typename?: 'TravelGuideMuseum_sum_fields';
  museumID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideMuseumID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Sum_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuideMuseum" */
export enum TravelGuideMuseum_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  MuseumId = 'museumID',
  /** column name */
  Note = 'note',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideMuseumId = 'travelGuideMuseumID'
}

/** aggregate var_pop on columns */
export type TravelGuideMuseum_Var_Pop_Fields = {
  __typename?: 'TravelGuideMuseum_var_pop_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Var_Pop_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuideMuseum_Var_Samp_Fields = {
  __typename?: 'TravelGuideMuseum_var_samp_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Var_Samp_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuideMuseum_Variance_Fields = {
  __typename?: 'TravelGuideMuseum_variance_fields';
  museumID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideMuseumID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuideMuseum" */
export type TravelGuideMuseum_Variance_Order_By = {
  museumID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideMuseumID?: Maybe<Order_By>;
};

/** columns and relationships of "TravelGuideRestaurant" */
export type TravelGuideRestaurant = {
  __typename?: 'TravelGuideRestaurant';
  /** An object relationship */
  Restaurant: Restaurant;
  /** An object relationship */
  TravelGuide: TravelGuide;
  isDeleted: Scalars['Boolean'];
  note?: Maybe<Scalars['String']>;
  restaurantID: Scalars['Int'];
  travelGuideID: Scalars['Int'];
  travelGuideRestaurantID: Scalars['Int'];
};

/** aggregated selection of "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Aggregate = {
  __typename?: 'TravelGuideRestaurant_aggregate';
  aggregate?: Maybe<TravelGuideRestaurant_Aggregate_Fields>;
  nodes: Array<TravelGuideRestaurant>;
};

/** aggregate fields of "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Aggregate_Fields = {
  __typename?: 'TravelGuideRestaurant_aggregate_fields';
  avg?: Maybe<TravelGuideRestaurant_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<TravelGuideRestaurant_Max_Fields>;
  min?: Maybe<TravelGuideRestaurant_Min_Fields>;
  stddev?: Maybe<TravelGuideRestaurant_Stddev_Fields>;
  stddev_pop?: Maybe<TravelGuideRestaurant_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TravelGuideRestaurant_Stddev_Samp_Fields>;
  sum?: Maybe<TravelGuideRestaurant_Sum_Fields>;
  var_pop?: Maybe<TravelGuideRestaurant_Var_Pop_Fields>;
  var_samp?: Maybe<TravelGuideRestaurant_Var_Samp_Fields>;
  variance?: Maybe<TravelGuideRestaurant_Variance_Fields>;
};


/** aggregate fields of "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<TravelGuideRestaurant_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Aggregate_Order_By = {
  avg?: Maybe<TravelGuideRestaurant_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<TravelGuideRestaurant_Max_Order_By>;
  min?: Maybe<TravelGuideRestaurant_Min_Order_By>;
  stddev?: Maybe<TravelGuideRestaurant_Stddev_Order_By>;
  stddev_pop?: Maybe<TravelGuideRestaurant_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<TravelGuideRestaurant_Stddev_Samp_Order_By>;
  sum?: Maybe<TravelGuideRestaurant_Sum_Order_By>;
  var_pop?: Maybe<TravelGuideRestaurant_Var_Pop_Order_By>;
  var_samp?: Maybe<TravelGuideRestaurant_Var_Samp_Order_By>;
  variance?: Maybe<TravelGuideRestaurant_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Arr_Rel_Insert_Input = {
  data: Array<TravelGuideRestaurant_Insert_Input>;
  on_conflict?: Maybe<TravelGuideRestaurant_On_Conflict>;
};

/** aggregate avg on columns */
export type TravelGuideRestaurant_Avg_Fields = {
  __typename?: 'TravelGuideRestaurant_avg_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Avg_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "TravelGuideRestaurant". All fields are combined with a logical 'AND'. */
export type TravelGuideRestaurant_Bool_Exp = {
  Restaurant?: Maybe<Restaurant_Bool_Exp>;
  TravelGuide?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<TravelGuideRestaurant_Bool_Exp>>>;
  _not?: Maybe<TravelGuideRestaurant_Bool_Exp>;
  _or?: Maybe<Array<Maybe<TravelGuideRestaurant_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  restaurantID?: Maybe<Int_Comparison_Exp>;
  travelGuideID?: Maybe<Int_Comparison_Exp>;
  travelGuideRestaurantID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "TravelGuideRestaurant" */
export enum TravelGuideRestaurant_Constraint {
  /** unique or primary key constraint */
  TravelGuideRestaurantPkey = 'TravelGuideRestaurant_pkey'
}

/** input type for incrementing integer columne in table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Inc_Input = {
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Insert_Input = {
  Restaurant?: Maybe<Restaurant_Obj_Rel_Insert_Input>;
  TravelGuide?: Maybe<TravelGuide_Obj_Rel_Insert_Input>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type TravelGuideRestaurant_Max_Fields = {
  __typename?: 'TravelGuideRestaurant_max_fields';
  note?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Max_Order_By = {
  note?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type TravelGuideRestaurant_Min_Fields = {
  __typename?: 'TravelGuideRestaurant_min_fields';
  note?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Min_Order_By = {
  note?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** response of any mutation on the table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Mutation_Response = {
  __typename?: 'TravelGuideRestaurant_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<TravelGuideRestaurant>;
};

/** input type for inserting object relation for remote table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Obj_Rel_Insert_Input = {
  data: TravelGuideRestaurant_Insert_Input;
  on_conflict?: Maybe<TravelGuideRestaurant_On_Conflict>;
};

/** on conflict condition type for table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_On_Conflict = {
  constraint: TravelGuideRestaurant_Constraint;
  update_columns: Array<TravelGuideRestaurant_Update_Column>;
  where?: Maybe<TravelGuideRestaurant_Bool_Exp>;
};

/** ordering options when selecting data from "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Order_By = {
  Restaurant?: Maybe<Restaurant_Order_By>;
  TravelGuide?: Maybe<TravelGuide_Order_By>;
  isDeleted?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** select columns of table "TravelGuideRestaurant" */
export enum TravelGuideRestaurant_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideRestaurantId = 'travelGuideRestaurantID'
}

/** input type for updating data in table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type TravelGuideRestaurant_Stddev_Fields = {
  __typename?: 'TravelGuideRestaurant_stddev_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Stddev_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type TravelGuideRestaurant_Stddev_Pop_Fields = {
  __typename?: 'TravelGuideRestaurant_stddev_pop_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Stddev_Pop_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type TravelGuideRestaurant_Stddev_Samp_Fields = {
  __typename?: 'TravelGuideRestaurant_stddev_samp_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Stddev_Samp_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type TravelGuideRestaurant_Sum_Fields = {
  __typename?: 'TravelGuideRestaurant_sum_fields';
  restaurantID?: Maybe<Scalars['Int']>;
  travelGuideID?: Maybe<Scalars['Int']>;
  travelGuideRestaurantID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Sum_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** update columns of table "TravelGuideRestaurant" */
export enum TravelGuideRestaurant_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Note = 'note',
  /** column name */
  RestaurantId = 'restaurantID',
  /** column name */
  TravelGuideId = 'travelGuideID',
  /** column name */
  TravelGuideRestaurantId = 'travelGuideRestaurantID'
}

/** aggregate var_pop on columns */
export type TravelGuideRestaurant_Var_Pop_Fields = {
  __typename?: 'TravelGuideRestaurant_var_pop_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Var_Pop_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type TravelGuideRestaurant_Var_Samp_Fields = {
  __typename?: 'TravelGuideRestaurant_var_samp_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Var_Samp_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type TravelGuideRestaurant_Variance_Fields = {
  __typename?: 'TravelGuideRestaurant_variance_fields';
  restaurantID?: Maybe<Scalars['Float']>;
  travelGuideID?: Maybe<Scalars['Float']>;
  travelGuideRestaurantID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "TravelGuideRestaurant" */
export type TravelGuideRestaurant_Variance_Order_By = {
  restaurantID?: Maybe<Order_By>;
  travelGuideID?: Maybe<Order_By>;
  travelGuideRestaurantID?: Maybe<Order_By>;
};

/** columns and relationships of "User" */
export type User = {
  __typename?: 'User';
  /** An array relationship */
  ArchSiteComments: Array<ArchSiteComment>;
  /** An aggregated array relationship */
  ArchSiteComments_aggregate: ArchSiteComment_Aggregate;
  /** An array relationship */
  ArticleUsers: Array<ArticleUser>;
  /** An aggregated array relationship */
  ArticleUsers_aggregate: ArticleUser_Aggregate;
  /** An array relationship */
  CompanyUsers: Array<CompanyUser>;
  /** An aggregated array relationship */
  CompanyUsers_aggregate: CompanyUser_Aggregate;
  /** An array relationship */
  HotelComments: Array<HotelComment>;
  /** An aggregated array relationship */
  HotelComments_aggregate: HotelComment_Aggregate;
  /** An object relationship */
  LoginType: LoginType;
  /** An array relationship */
  MuseumComments: Array<MuseumComment>;
  /** An aggregated array relationship */
  MuseumComments_aggregate: MuseumComment_Aggregate;
  /** An object relationship */
  Phone?: Maybe<Phone>;
  /** An array relationship */
  RestaurantComments: Array<RestaurantComment>;
  /** An aggregated array relationship */
  RestaurantComments_aggregate: RestaurantComment_Aggregate;
  /** An array relationship */
  TravelGuides: Array<TravelGuide>;
  /** An aggregated array relationship */
  TravelGuides_aggregate: TravelGuide_Aggregate;
  accessToken?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['date']>;
  isBlocked: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  loginDate: Scalars['timestamptz'];
  loginIP: Scalars['inet'];
  loginTypeID: Scalars['Int'];
  mail: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
  phoneID?: Maybe<Scalars['Int']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  registerDate: Scalars['timestamptz'];
  surname?: Maybe<Scalars['String']>;
  userID: Scalars['Int'];
  userTypeID: Scalars['Int'];
};


/** columns and relationships of "User" */
export type UserArchSiteCommentsArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserArchSiteComments_AggregateArgs = {
  distinct_on?: Maybe<Array<ArchSiteComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArchSiteComment_Order_By>>;
  where?: Maybe<ArchSiteComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserArticleUsersArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserArticleUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<ArticleUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ArticleUser_Order_By>>;
  where?: Maybe<ArticleUser_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserCompanyUsersArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserCompanyUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<CompanyUser_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<CompanyUser_Order_By>>;
  where?: Maybe<CompanyUser_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserHotelCommentsArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserHotelComments_AggregateArgs = {
  distinct_on?: Maybe<Array<HotelComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<HotelComment_Order_By>>;
  where?: Maybe<HotelComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserMuseumCommentsArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserMuseumComments_AggregateArgs = {
  distinct_on?: Maybe<Array<MuseumComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<MuseumComment_Order_By>>;
  where?: Maybe<MuseumComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserRestaurantCommentsArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserRestaurantComments_AggregateArgs = {
  distinct_on?: Maybe<Array<RestaurantComment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<RestaurantComment_Order_By>>;
  where?: Maybe<RestaurantComment_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserTravelGuidesArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};


/** columns and relationships of "User" */
export type UserTravelGuides_AggregateArgs = {
  distinct_on?: Maybe<Array<TravelGuide_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<TravelGuide_Order_By>>;
  where?: Maybe<TravelGuide_Bool_Exp>;
};

/** aggregated selection of "User" */
export type User_Aggregate = {
  __typename?: 'User_aggregate';
  aggregate?: Maybe<User_Aggregate_Fields>;
  nodes: Array<User>;
};

/** aggregate fields of "User" */
export type User_Aggregate_Fields = {
  __typename?: 'User_aggregate_fields';
  avg?: Maybe<User_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<User_Max_Fields>;
  min?: Maybe<User_Min_Fields>;
  stddev?: Maybe<User_Stddev_Fields>;
  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;
  sum?: Maybe<User_Sum_Fields>;
  var_pop?: Maybe<User_Var_Pop_Fields>;
  var_samp?: Maybe<User_Var_Samp_Fields>;
  variance?: Maybe<User_Variance_Fields>;
};


/** aggregate fields of "User" */
export type User_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "User" */
export type User_Aggregate_Order_By = {
  avg?: Maybe<User_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<User_Max_Order_By>;
  min?: Maybe<User_Min_Order_By>;
  stddev?: Maybe<User_Stddev_Order_By>;
  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;
  sum?: Maybe<User_Sum_Order_By>;
  var_pop?: Maybe<User_Var_Pop_Order_By>;
  var_samp?: Maybe<User_Var_Samp_Order_By>;
  variance?: Maybe<User_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "User" */
export type User_Arr_Rel_Insert_Input = {
  data: Array<User_Insert_Input>;
  on_conflict?: Maybe<User_On_Conflict>;
};

/** aggregate avg on columns */
export type User_Avg_Fields = {
  __typename?: 'User_avg_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "User" */
export type User_Avg_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
export type User_Bool_Exp = {
  ArchSiteComments?: Maybe<ArchSiteComment_Bool_Exp>;
  ArticleUsers?: Maybe<ArticleUser_Bool_Exp>;
  CompanyUsers?: Maybe<CompanyUser_Bool_Exp>;
  HotelComments?: Maybe<HotelComment_Bool_Exp>;
  LoginType?: Maybe<LoginType_Bool_Exp>;
  MuseumComments?: Maybe<MuseumComment_Bool_Exp>;
  Phone?: Maybe<Phone_Bool_Exp>;
  RestaurantComments?: Maybe<RestaurantComment_Bool_Exp>;
  TravelGuides?: Maybe<TravelGuide_Bool_Exp>;
  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;
  _not?: Maybe<User_Bool_Exp>;
  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;
  accessToken?: Maybe<String_Comparison_Exp>;
  birthDate?: Maybe<Date_Comparison_Exp>;
  isBlocked?: Maybe<Boolean_Comparison_Exp>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  loginDate?: Maybe<Timestamptz_Comparison_Exp>;
  loginIP?: Maybe<Inet_Comparison_Exp>;
  loginTypeID?: Maybe<Int_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  password?: Maybe<String_Comparison_Exp>;
  phoneID?: Maybe<Int_Comparison_Exp>;
  profileImageUrl?: Maybe<String_Comparison_Exp>;
  registerDate?: Maybe<Timestamptz_Comparison_Exp>;
  surname?: Maybe<String_Comparison_Exp>;
  userID?: Maybe<Int_Comparison_Exp>;
  userTypeID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "User" */
export enum User_Constraint {
  /** unique or primary key constraint */
  UserMailKey = 'User_mail_key',
  /** unique or primary key constraint */
  UserPkey = 'User_pkey'
}

/** input type for incrementing integer columne in table "User" */
export type User_Inc_Input = {
  loginTypeID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "User" */
export type User_Insert_Input = {
  ArchSiteComments?: Maybe<ArchSiteComment_Arr_Rel_Insert_Input>;
  ArticleUsers?: Maybe<ArticleUser_Arr_Rel_Insert_Input>;
  CompanyUsers?: Maybe<CompanyUser_Arr_Rel_Insert_Input>;
  HotelComments?: Maybe<HotelComment_Arr_Rel_Insert_Input>;
  LoginType?: Maybe<LoginType_Obj_Rel_Insert_Input>;
  MuseumComments?: Maybe<MuseumComment_Arr_Rel_Insert_Input>;
  Phone?: Maybe<Phone_Obj_Rel_Insert_Input>;
  RestaurantComments?: Maybe<RestaurantComment_Arr_Rel_Insert_Input>;
  TravelGuides?: Maybe<TravelGuide_Arr_Rel_Insert_Input>;
  accessToken?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['date']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  loginDate?: Maybe<Scalars['timestamptz']>;
  loginIP?: Maybe<Scalars['inet']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  surname?: Maybe<Scalars['String']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type User_Max_Fields = {
  __typename?: 'User_max_fields';
  accessToken?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['date']>;
  loginDate?: Maybe<Scalars['timestamptz']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  surname?: Maybe<Scalars['String']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "User" */
export type User_Max_Order_By = {
  accessToken?: Maybe<Order_By>;
  birthDate?: Maybe<Order_By>;
  loginDate?: Maybe<Order_By>;
  loginTypeID?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  password?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  profileImageUrl?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  surname?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Min_Fields = {
  __typename?: 'User_min_fields';
  accessToken?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['date']>;
  loginDate?: Maybe<Scalars['timestamptz']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  surname?: Maybe<Scalars['String']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "User" */
export type User_Min_Order_By = {
  accessToken?: Maybe<Order_By>;
  birthDate?: Maybe<Order_By>;
  loginDate?: Maybe<Order_By>;
  loginTypeID?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  password?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  profileImageUrl?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  surname?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "User" */
export type User_Mutation_Response = {
  __typename?: 'User_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<User>;
};

/** input type for inserting object relation for remote table "User" */
export type User_Obj_Rel_Insert_Input = {
  data: User_Insert_Input;
  on_conflict?: Maybe<User_On_Conflict>;
};

/** on conflict condition type for table "User" */
export type User_On_Conflict = {
  constraint: User_Constraint;
  update_columns: Array<User_Update_Column>;
  where?: Maybe<User_Bool_Exp>;
};

/** ordering options when selecting data from "User" */
export type User_Order_By = {
  ArchSiteComments_aggregate?: Maybe<ArchSiteComment_Aggregate_Order_By>;
  ArticleUsers_aggregate?: Maybe<ArticleUser_Aggregate_Order_By>;
  CompanyUsers_aggregate?: Maybe<CompanyUser_Aggregate_Order_By>;
  HotelComments_aggregate?: Maybe<HotelComment_Aggregate_Order_By>;
  LoginType?: Maybe<LoginType_Order_By>;
  MuseumComments_aggregate?: Maybe<MuseumComment_Aggregate_Order_By>;
  Phone?: Maybe<Phone_Order_By>;
  RestaurantComments_aggregate?: Maybe<RestaurantComment_Aggregate_Order_By>;
  TravelGuides_aggregate?: Maybe<TravelGuide_Aggregate_Order_By>;
  accessToken?: Maybe<Order_By>;
  birthDate?: Maybe<Order_By>;
  isBlocked?: Maybe<Order_By>;
  isDeleted?: Maybe<Order_By>;
  loginDate?: Maybe<Order_By>;
  loginIP?: Maybe<Order_By>;
  loginTypeID?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  password?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  profileImageUrl?: Maybe<Order_By>;
  registerDate?: Maybe<Order_By>;
  surname?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** select columns of table "User" */
export enum User_Select_Column {
  /** column name */
  AccessToken = 'accessToken',
  /** column name */
  BirthDate = 'birthDate',
  /** column name */
  IsBlocked = 'isBlocked',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LoginDate = 'loginDate',
  /** column name */
  LoginIp = 'loginIP',
  /** column name */
  LoginTypeId = 'loginTypeID',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Password = 'password',
  /** column name */
  PhoneId = 'phoneID',
  /** column name */
  ProfileImageUrl = 'profileImageUrl',
  /** column name */
  RegisterDate = 'registerDate',
  /** column name */
  Surname = 'surname',
  /** column name */
  UserId = 'userID',
  /** column name */
  UserTypeId = 'userTypeID'
}

/** input type for updating data in table "User" */
export type User_Set_Input = {
  accessToken?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['date']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  loginDate?: Maybe<Scalars['timestamptz']>;
  loginIP?: Maybe<Scalars['inet']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phoneID?: Maybe<Scalars['Int']>;
  profileImageUrl?: Maybe<Scalars['String']>;
  registerDate?: Maybe<Scalars['timestamptz']>;
  surname?: Maybe<Scalars['String']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type User_Stddev_Fields = {
  __typename?: 'User_stddev_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "User" */
export type User_Stddev_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type User_Stddev_Pop_Fields = {
  __typename?: 'User_stddev_pop_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "User" */
export type User_Stddev_Pop_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type User_Stddev_Samp_Fields = {
  __typename?: 'User_stddev_samp_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "User" */
export type User_Stddev_Samp_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type User_Sum_Fields = {
  __typename?: 'User_sum_fields';
  loginTypeID?: Maybe<Scalars['Int']>;
  phoneID?: Maybe<Scalars['Int']>;
  userID?: Maybe<Scalars['Int']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "User" */
export type User_Sum_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** update columns of table "User" */
export enum User_Update_Column {
  /** column name */
  AccessToken = 'accessToken',
  /** column name */
  BirthDate = 'birthDate',
  /** column name */
  IsBlocked = 'isBlocked',
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  LoginDate = 'loginDate',
  /** column name */
  LoginIp = 'loginIP',
  /** column name */
  LoginTypeId = 'loginTypeID',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Password = 'password',
  /** column name */
  PhoneId = 'phoneID',
  /** column name */
  ProfileImageUrl = 'profileImageUrl',
  /** column name */
  RegisterDate = 'registerDate',
  /** column name */
  Surname = 'surname',
  /** column name */
  UserId = 'userID',
  /** column name */
  UserTypeId = 'userTypeID'
}

/** aggregate var_pop on columns */
export type User_Var_Pop_Fields = {
  __typename?: 'User_var_pop_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "User" */
export type User_Var_Pop_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type User_Var_Samp_Fields = {
  __typename?: 'User_var_samp_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "User" */
export type User_Var_Samp_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type User_Variance_Fields = {
  __typename?: 'User_variance_fields';
  loginTypeID?: Maybe<Scalars['Float']>;
  phoneID?: Maybe<Scalars['Float']>;
  userID?: Maybe<Scalars['Float']>;
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "User" */
export type User_Variance_Order_By = {
  loginTypeID?: Maybe<Order_By>;
  phoneID?: Maybe<Order_By>;
  userID?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** columns and relationships of "UserType" */
export type UserType = {
  __typename?: 'UserType';
  isDeleted: Scalars['Boolean'];
  type: Scalars['String'];
  userTypeID: Scalars['Int'];
};

/** aggregated selection of "UserType" */
export type UserType_Aggregate = {
  __typename?: 'UserType_aggregate';
  aggregate?: Maybe<UserType_Aggregate_Fields>;
  nodes: Array<UserType>;
};

/** aggregate fields of "UserType" */
export type UserType_Aggregate_Fields = {
  __typename?: 'UserType_aggregate_fields';
  avg?: Maybe<UserType_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<UserType_Max_Fields>;
  min?: Maybe<UserType_Min_Fields>;
  stddev?: Maybe<UserType_Stddev_Fields>;
  stddev_pop?: Maybe<UserType_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<UserType_Stddev_Samp_Fields>;
  sum?: Maybe<UserType_Sum_Fields>;
  var_pop?: Maybe<UserType_Var_Pop_Fields>;
  var_samp?: Maybe<UserType_Var_Samp_Fields>;
  variance?: Maybe<UserType_Variance_Fields>;
};


/** aggregate fields of "UserType" */
export type UserType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<UserType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "UserType" */
export type UserType_Aggregate_Order_By = {
  avg?: Maybe<UserType_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<UserType_Max_Order_By>;
  min?: Maybe<UserType_Min_Order_By>;
  stddev?: Maybe<UserType_Stddev_Order_By>;
  stddev_pop?: Maybe<UserType_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<UserType_Stddev_Samp_Order_By>;
  sum?: Maybe<UserType_Sum_Order_By>;
  var_pop?: Maybe<UserType_Var_Pop_Order_By>;
  var_samp?: Maybe<UserType_Var_Samp_Order_By>;
  variance?: Maybe<UserType_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "UserType" */
export type UserType_Arr_Rel_Insert_Input = {
  data: Array<UserType_Insert_Input>;
  on_conflict?: Maybe<UserType_On_Conflict>;
};

/** aggregate avg on columns */
export type UserType_Avg_Fields = {
  __typename?: 'UserType_avg_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "UserType" */
export type UserType_Avg_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "UserType". All fields are combined with a logical 'AND'. */
export type UserType_Bool_Exp = {
  _and?: Maybe<Array<Maybe<UserType_Bool_Exp>>>;
  _not?: Maybe<UserType_Bool_Exp>;
  _or?: Maybe<Array<Maybe<UserType_Bool_Exp>>>;
  isDeleted?: Maybe<Boolean_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  userTypeID?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "UserType" */
export enum UserType_Constraint {
  /** unique or primary key constraint */
  UserTypePkey = 'UserType_pkey'
}

/** input type for incrementing integer columne in table "UserType" */
export type UserType_Inc_Input = {
  userTypeID?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "UserType" */
export type UserType_Insert_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type UserType_Max_Fields = {
  __typename?: 'UserType_max_fields';
  type?: Maybe<Scalars['String']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "UserType" */
export type UserType_Max_Order_By = {
  type?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type UserType_Min_Fields = {
  __typename?: 'UserType_min_fields';
  type?: Maybe<Scalars['String']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "UserType" */
export type UserType_Min_Order_By = {
  type?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** response of any mutation on the table "UserType" */
export type UserType_Mutation_Response = {
  __typename?: 'UserType_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<UserType>;
};

/** input type for inserting object relation for remote table "UserType" */
export type UserType_Obj_Rel_Insert_Input = {
  data: UserType_Insert_Input;
  on_conflict?: Maybe<UserType_On_Conflict>;
};

/** on conflict condition type for table "UserType" */
export type UserType_On_Conflict = {
  constraint: UserType_Constraint;
  update_columns: Array<UserType_Update_Column>;
  where?: Maybe<UserType_Bool_Exp>;
};

/** ordering options when selecting data from "UserType" */
export type UserType_Order_By = {
  isDeleted?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  userTypeID?: Maybe<Order_By>;
};

/** select columns of table "UserType" */
export enum UserType_Select_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Type = 'type',
  /** column name */
  UserTypeId = 'userTypeID'
}

/** input type for updating data in table "UserType" */
export type UserType_Set_Input = {
  isDeleted?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  userTypeID?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type UserType_Stddev_Fields = {
  __typename?: 'UserType_stddev_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "UserType" */
export type UserType_Stddev_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type UserType_Stddev_Pop_Fields = {
  __typename?: 'UserType_stddev_pop_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "UserType" */
export type UserType_Stddev_Pop_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type UserType_Stddev_Samp_Fields = {
  __typename?: 'UserType_stddev_samp_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "UserType" */
export type UserType_Stddev_Samp_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type UserType_Sum_Fields = {
  __typename?: 'UserType_sum_fields';
  userTypeID?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "UserType" */
export type UserType_Sum_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** update columns of table "UserType" */
export enum UserType_Update_Column {
  /** column name */
  IsDeleted = 'isDeleted',
  /** column name */
  Type = 'type',
  /** column name */
  UserTypeId = 'userTypeID'
}

/** aggregate var_pop on columns */
export type UserType_Var_Pop_Fields = {
  __typename?: 'UserType_var_pop_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "UserType" */
export type UserType_Var_Pop_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type UserType_Var_Samp_Fields = {
  __typename?: 'UserType_var_samp_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "UserType" */
export type UserType_Var_Samp_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type UserType_Variance_Fields = {
  __typename?: 'UserType_variance_fields';
  userTypeID?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "UserType" */
export type UserType_Variance_Order_By = {
  userTypeID?: Maybe<Order_By>;
};

export type ControlUserMutationVariables = Exact<{
  controlUser: Array<User_Insert_Input>;
}>;


export type ControlUserMutation = (
  { __typename: 'mutation_root' }
  & { insert_User?: Maybe<(
    { __typename?: 'User_mutation_response' }
    & { returning: Array<(
      { __typename?: 'User' }
      & Pick<User, 'userID' | 'userTypeID'>
    )> }
  )> }
);

export type AddCompanyMutationVariables = Exact<{
  company: Array<Company_Insert_Input>;
}>;


export type AddCompanyMutation = (
  { __typename: 'mutation_root' }
  & { insert_Company?: Maybe<(
    { __typename?: 'Company_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Company' }
      & Pick<Company, 'companyID' | 'locationID'>
    )> }
  )> }
);

export type AddRestaurantMutationVariables = Exact<{
  resta: Array<Restaurant_Insert_Input>;
}>;


export type AddRestaurantMutation = (
  { __typename: 'mutation_root' }
  & { insert_Restaurant?: Maybe<(
    { __typename?: 'Restaurant_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Restaurant' }
      & Pick<Restaurant, 'restaurantID'>
    )> }
  )> }
);

export type AddFoodTypeMutationVariables = Exact<{
  foodType: Array<RestaurantFoodType_Insert_Input>;
}>;


export type AddFoodTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantFoodType?: Maybe<(
    { __typename?: 'RestaurantFoodType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantFoodType' }
      & Pick<RestaurantFoodType, 'restaurantFoodTypeID'>
    )> }
  )> }
);

export type AddFoodMutationVariables = Exact<{
  food: Array<RestaurantFood_Insert_Input>;
}>;


export type AddFoodMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantFood?: Maybe<(
    { __typename?: 'RestaurantFood_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantFood' }
      & Pick<RestaurantFood, 'restaurantFoodID'>
    )> }
  )> }
);

export type AddHotelMutationVariables = Exact<{
  hotel: Array<Hotel_Insert_Input>;
}>;


export type AddHotelMutation = (
  { __typename: 'mutation_root' }
  & { insert_Hotel?: Maybe<(
    { __typename?: 'Hotel_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Hotel' }
      & Pick<Hotel, 'hotelID'>
    )> }
  )> }
);

export type AddArchSiteTypeMutationVariables = Exact<{
  archSiteType: Array<ArchSiteType_Insert_Input>;
}>;


export type AddArchSiteTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSiteType?: Maybe<(
    { __typename?: 'ArchSiteType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSiteType' }
      & Pick<ArchSiteType, 'archSiteTypeID'>
    )> }
  )> }
);

export type AddRoomPropertyMutationVariables = Exact<{
  RoomProperty: Array<RoomProperty_Insert_Input>;
}>;


export type AddRoomPropertyMutation = (
  { __typename: 'mutation_root' }
  & { insert_RoomProperty?: Maybe<(
    { __typename?: 'RoomProperty_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RoomProperty' }
      & Pick<RoomProperty, 'roomPropertyID'>
    )> }
  )> }
);

export type AddRoomMutationVariables = Exact<{
  roomNo: Scalars['String'];
  roomPropRoom: Array<RoomPropertyRoom_Insert_Input>;
  hotelID: Scalars['Int'];
}>;


export type AddRoomMutation = (
  { __typename: 'mutation_root' }
  & { insert_Room?: Maybe<(
    { __typename?: 'Room_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Room' }
      & Pick<Room, 'roomID'>
    )> }
  )> }
);

export type AddHotelServicePropertyMutationVariables = Exact<{
  HotelServiceProperty: Array<HotelServiceProperty_Insert_Input>;
}>;


export type AddHotelServicePropertyMutation = (
  { __typename: 'mutation_root' }
  & { insert_HotelServiceProperty?: Maybe<(
    { __typename?: 'HotelServiceProperty_mutation_response' }
    & { returning: Array<(
      { __typename?: 'HotelServiceProperty' }
      & Pick<HotelServiceProperty, 'hotelServicePropertyID'>
    )> }
  )> }
);

export type AddHotelCommentMutationVariables = Exact<{
  HotelComment: Array<HotelComment_Insert_Input>;
}>;


export type AddHotelCommentMutation = (
  { __typename: 'mutation_root' }
  & { insert_HotelComment?: Maybe<(
    { __typename?: 'HotelComment_mutation_response' }
    & { returning: Array<(
      { __typename?: 'HotelComment' }
      & Pick<HotelComment, 'hotelCommentID'>
    )> }
  )> }
);

export type AddHotelRoomPriceMutationVariables = Exact<{
  RoomPrice: Array<RoomPrice_Insert_Input>;
}>;


export type AddHotelRoomPriceMutation = (
  { __typename: 'mutation_root' }
  & { insert_RoomPrice?: Maybe<(
    { __typename?: 'RoomPrice_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RoomPrice' }
      & Pick<RoomPrice, 'roomPriceID'>
    )> }
  )> }
);

export type AddArchSiteWorkingScheduleMutationVariables = Exact<{
  ArchSiteWorkingSchedule: Array<ArchSiteWorkingSchedule_Insert_Input>;
}>;


export type AddArchSiteWorkingScheduleMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSiteWorkingSchedule?: Maybe<(
    { __typename?: 'ArchSiteWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSiteWorkingSchedule' }
      & Pick<ArchSiteWorkingSchedule, 'archSiteWorkingScheduleID'>
    )> }
  )> }
);

export type AddArchSiteMutationVariables = Exact<{
  arch: Array<ArchSite_Insert_Input>;
}>;


export type AddArchSiteMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSite?: Maybe<(
    { __typename?: 'ArchSite_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSite' }
      & Pick<ArchSite, 'archSiteID'>
    )> }
  )> }
);

export type AddArchSiteCommentMutationVariables = Exact<{
  ArchSiteComment: Array<ArchSiteComment_Insert_Input>;
}>;


export type AddArchSiteCommentMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSiteComment?: Maybe<(
    { __typename?: 'ArchSiteComment_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSiteComment' }
      & Pick<ArchSiteComment, 'archSiteCommentID'>
    )> }
  )> }
);

export type AddArchSiteEntranceTypeMutationVariables = Exact<{
  ArchSiteEntranceType: Array<ArchSiteEntranceType_Insert_Input>;
}>;


export type AddArchSiteEntranceTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSiteEntranceType?: Maybe<(
    { __typename?: 'ArchSiteEntranceType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSiteEntranceType' }
      & Pick<ArchSiteEntranceType, 'archSiteEntranceTypeID'>
    )> }
  )> }
);

export type AddRestaurantCuisineTypeMutationVariables = Exact<{
  RestaurantCuisineType: Array<RestaurantCuisineType_Insert_Input>;
}>;


export type AddRestaurantCuisineTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantCuisineType?: Maybe<(
    { __typename?: 'RestaurantCuisineType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantCuisineType' }
      & Pick<RestaurantCuisineType, 'restaurantCuisineTypeID'>
    )> }
  )> }
);

export type AddTagMutationVariables = Exact<{
  Tag: Array<Tag_Insert_Input>;
}>;


export type AddTagMutation = (
  { __typename: 'mutation_root' }
  & { insert_Tag?: Maybe<(
    { __typename?: 'Tag_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Tag' }
      & Pick<Tag, 'tagID'>
    )> }
  )> }
);

export type AddRestaurantTypeMutationVariables = Exact<{
  RestaurantType: Array<RestaurantType_Insert_Input>;
}>;


export type AddRestaurantTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantType?: Maybe<(
    { __typename?: 'RestaurantType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantType' }
      & Pick<RestaurantType, 'restaurantTypeID'>
    )> }
  )> }
);

export type AddRestaurantCommentMutationVariables = Exact<{
  RestaurantComment: Array<RestaurantComment_Insert_Input>;
}>;


export type AddRestaurantCommentMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantComment?: Maybe<(
    { __typename?: 'RestaurantComment_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantComment' }
      & Pick<RestaurantComment, 'restaurantCommentID'>
    )> }
  )> }
);

export type AddMuseumTypeMutationVariables = Exact<{
  MuseumType: Array<MuseumType_Insert_Input>;
}>;


export type AddMuseumTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_MuseumType?: Maybe<(
    { __typename?: 'MuseumType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumType' }
      & Pick<MuseumType, 'museumTypeID'>
    )> }
  )> }
);

export type AddMuseumMutationVariables = Exact<{
  museum: Array<Museum_Insert_Input>;
}>;


export type AddMuseumMutation = (
  { __typename: 'mutation_root' }
  & { insert_Museum?: Maybe<(
    { __typename?: 'Museum_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Museum' }
      & Pick<Museum, 'museumID'>
    )> }
  )> }
);

export type AddMuseumCommentMutationVariables = Exact<{
  MuseumComment: Array<MuseumComment_Insert_Input>;
}>;


export type AddMuseumCommentMutation = (
  { __typename: 'mutation_root' }
  & { insert_MuseumComment?: Maybe<(
    { __typename?: 'MuseumComment_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumComment' }
      & Pick<MuseumComment, 'museumCommentID'>
    )> }
  )> }
);

export type AddMuseumEntranceTypeMutationVariables = Exact<{
  MuseumEntranceType: Array<MuseumEntranceType_Insert_Input>;
}>;


export type AddMuseumEntranceTypeMutation = (
  { __typename: 'mutation_root' }
  & { insert_MuseumEntranceType?: Maybe<(
    { __typename?: 'MuseumEntranceType_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumEntranceType' }
      & Pick<MuseumEntranceType, 'museumEntranceTypeID'>
    )> }
  )> }
);

export type AddMuseumWorkingScheduleMutationVariables = Exact<{
  MuseumWorkingSchedule: Array<MuseumWorkingSchedule_Insert_Input>;
}>;


export type AddMuseumWorkingScheduleMutation = (
  { __typename: 'mutation_root' }
  & { insert_MuseumWorkingSchedule?: Maybe<(
    { __typename?: 'MuseumWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumWorkingSchedule' }
      & Pick<MuseumWorkingSchedule, 'museumWorkingScheduleID'>
    )> }
  )> }
);

export type AddRestaurantWorkingScheduleMutationVariables = Exact<{
  RestaurantWorkingSchedule: Array<RestaurantWorkingSchedule_Insert_Input>;
}>;


export type AddRestaurantWorkingScheduleMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantWorkingSchedule?: Maybe<(
    { __typename?: 'RestaurantWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantWorkingSchedule' }
      & Pick<RestaurantWorkingSchedule, 'restaurantWorkingScheduleID'>
    )> }
  )> }
);

export type AddArchSitePriceMutationVariables = Exact<{
  ArchSitePrice: Array<ArchSitePrice_Insert_Input>;
}>;


export type AddArchSitePriceMutation = (
  { __typename: 'mutation_root' }
  & { insert_ArchSitePrice?: Maybe<(
    { __typename?: 'ArchSitePrice_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSitePrice' }
      & Pick<ArchSitePrice, 'archSitePriceID'>
    )> }
  )> }
);

export type AddMuseumPriceMutationVariables = Exact<{
  MuseumPrice: Array<MuseumPrice_Insert_Input>;
}>;


export type AddMuseumPriceMutation = (
  { __typename: 'mutation_root' }
  & { insert_MuseumPrice?: Maybe<(
    { __typename?: 'MuseumPrice_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumPrice' }
      & Pick<MuseumPrice, 'museumPriceID'>
    )> }
  )> }
);

export type AddTravelGuideMutationVariables = Exact<{
  travelGuide: Array<TravelGuide_Insert_Input>;
}>;


export type AddTravelGuideMutation = (
  { __typename: 'mutation_root' }
  & { insert_TravelGuide?: Maybe<(
    { __typename?: 'TravelGuide_mutation_response' }
    & { returning: Array<(
      { __typename?: 'TravelGuide' }
      & Pick<TravelGuide, 'travelGuideID'>
    )> }
  )> }
);

export type AddRestaurantMenuMutationVariables = Exact<{
  restaurantMenu: Array<RestaurantMenu_Insert_Input>;
}>;


export type AddRestaurantMenuMutation = (
  { __typename: 'mutation_root' }
  & { insert_RestaurantMenu?: Maybe<(
    { __typename?: 'RestaurantMenu_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantMenu' }
      & Pick<RestaurantMenu, 'restaurantMenuID'>
    )> }
  )> }
);

export type AddArticleMutationVariables = Exact<{
  addArticle: Array<Article_Insert_Input>;
}>;


export type AddArticleMutation = (
  { __typename: 'mutation_root' }
  & { insert_Article?: Maybe<(
    { __typename?: 'Article_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Article' }
      & Pick<Article, 'articleID'>
    )> }
  )> }
);

export type ControlLoginMailUserMutationVariables = Exact<{
  loginDate?: Maybe<Scalars['timestamptz']>;
  loginTypeID?: Maybe<Scalars['Int']>;
  loginIP?: Maybe<Scalars['inet']>;
  mail: Scalars['String'];
  password: Scalars['String'];
}>;


export type ControlLoginMailUserMutation = (
  { __typename: 'mutation_root' }
  & { update_User?: Maybe<(
    { __typename?: 'User_mutation_response' }
    & { returning: Array<(
      { __typename?: 'User' }
      & Pick<User, 'userID' | 'userTypeID'>
    )> }
  )> }
);

export type UpdateHotelMutationVariables = Exact<{
  hotelID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  addressID?: Maybe<Scalars['Int']>;
  hotel: Hotel_Set_Input;
  hotelLocation: Location_Set_Input;
  hotelAddress: Address_Set_Input;
}>;


export type UpdateHotelMutation = (
  { __typename: 'mutation_root' }
  & { update_Hotel?: Maybe<(
    { __typename?: 'Hotel_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Hotel' }
      & Pick<Hotel, 'hotelID'>
    )> }
  )>, update_Location?: Maybe<(
    { __typename?: 'Location_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Location' }
      & Pick<Location, 'locationID'>
    )> }
  )>, update_Address?: Maybe<(
    { __typename?: 'Address_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Address' }
      & Pick<Address, 'addressID'>
    )> }
  )> }
);

export type UpdateArticleMutationVariables = Exact<{
  articleID?: Maybe<Scalars['Int']>;
  article: Article_Set_Input;
}>;


export type UpdateArticleMutation = (
  { __typename: 'mutation_root' }
  & { update_Article?: Maybe<(
    { __typename?: 'Article_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Article' }
      & Pick<Article, 'articleID'>
    )> }
  )> }
);

export type UpdateMuseumMutationVariables = Exact<{
  museumID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  addressID?: Maybe<Scalars['Int']>;
  museum: Museum_Set_Input;
  museumLocation: Location_Set_Input;
  museumAddress: Address_Set_Input;
}>;


export type UpdateMuseumMutation = (
  { __typename: 'mutation_root' }
  & { update_Museum?: Maybe<(
    { __typename?: 'Museum_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Museum' }
      & Pick<Museum, 'museumID'>
    )> }
  )>, update_Location?: Maybe<(
    { __typename?: 'Location_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Location' }
      & Pick<Location, 'locationID'>
    )> }
  )>, update_Address?: Maybe<(
    { __typename?: 'Address_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Address' }
      & Pick<Address, 'addressID'>
    )> }
  )> }
);

export type UpdateArchSiteMutationVariables = Exact<{
  archSiteID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  addressID?: Maybe<Scalars['Int']>;
  archSite: ArchSite_Set_Input;
  archSiteLocation: Location_Set_Input;
  archSiteAddress: Address_Set_Input;
}>;


export type UpdateArchSiteMutation = (
  { __typename: 'mutation_root' }
  & { update_ArchSite?: Maybe<(
    { __typename?: 'ArchSite_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSite' }
      & Pick<ArchSite, 'archSiteID'>
    )> }
  )>, update_Location?: Maybe<(
    { __typename?: 'Location_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Location' }
      & Pick<Location, 'locationID'>
    )> }
  )>, update_Address?: Maybe<(
    { __typename?: 'Address_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Address' }
      & Pick<Address, 'addressID'>
    )> }
  )> }
);

export type UpdateRestaurantMutationVariables = Exact<{
  restaurantID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  addressID?: Maybe<Scalars['Int']>;
  restaurant: Restaurant_Set_Input;
  restaurantLocation: Location_Set_Input;
  restaurantAddress: Address_Set_Input;
}>;


export type UpdateRestaurantMutation = (
  { __typename: 'mutation_root' }
  & { update_Restaurant?: Maybe<(
    { __typename?: 'Restaurant_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Restaurant' }
      & Pick<Restaurant, 'restaurantID'>
    )> }
  )>, update_Location?: Maybe<(
    { __typename?: 'Location_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Location' }
      & Pick<Location, 'locationID'>
    )> }
  )>, update_Address?: Maybe<(
    { __typename?: 'Address_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Address' }
      & Pick<Address, 'addressID'>
    )> }
  )> }
);

export type DeleteHotelMutationVariables = Exact<{
  hotelID?: Maybe<Scalars['Int']>;
}>;


export type DeleteHotelMutation = (
  { __typename: 'mutation_root' }
  & { update_Hotel?: Maybe<(
    { __typename?: 'Hotel_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Hotel' }
      & Pick<Hotel, 'hotelID'>
    )> }
  )> }
);

export type DeleteArticleMutationVariables = Exact<{
  articleID?: Maybe<Scalars['Int']>;
}>;


export type DeleteArticleMutation = (
  { __typename: 'mutation_root' }
  & { update_Article?: Maybe<(
    { __typename?: 'Article_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Article' }
      & Pick<Article, 'articleID'>
    )> }
  )> }
);

export type DeleteMuseumMutationVariables = Exact<{
  museumID?: Maybe<Scalars['Int']>;
}>;


export type DeleteMuseumMutation = (
  { __typename: 'mutation_root' }
  & { update_Museum?: Maybe<(
    { __typename?: 'Museum_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Museum' }
      & Pick<Museum, 'museumID'>
    )> }
  )> }
);

export type DeleteArchSiteMutationVariables = Exact<{
  archSiteID?: Maybe<Scalars['Int']>;
}>;


export type DeleteArchSiteMutation = (
  { __typename: 'mutation_root' }
  & { update_ArchSite?: Maybe<(
    { __typename?: 'ArchSite_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSite' }
      & Pick<ArchSite, 'archSiteID'>
    )> }
  )> }
);

export type DeleteRestaurantMutationVariables = Exact<{
  restaurantID?: Maybe<Scalars['Int']>;
}>;


export type DeleteRestaurantMutation = (
  { __typename: 'mutation_root' }
  & { update_Restaurant?: Maybe<(
    { __typename?: 'Restaurant_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Restaurant' }
      & Pick<Restaurant, 'restaurantID'>
    )> }
  )> }
);

export type DeleteCompanyMutationVariables = Exact<{
  companyID?: Maybe<Scalars['Int']>;
}>;


export type DeleteCompanyMutation = (
  { __typename: 'mutation_root' }
  & { update_Company?: Maybe<(
    { __typename?: 'Company_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Company' }
      & Pick<Company, 'companyID'>
    )> }
  )> }
);

export type UpdateCompanyMutationVariables = Exact<{
  companyID?: Maybe<Scalars['Int']>;
  locationID?: Maybe<Scalars['Int']>;
  addressID?: Maybe<Scalars['Int']>;
  company: Company_Set_Input;
  companyLocation: Location_Set_Input;
  companyAddress: Address_Set_Input;
}>;


export type UpdateCompanyMutation = (
  { __typename: 'mutation_root' }
  & { update_Company?: Maybe<(
    { __typename?: 'Company_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Company' }
      & Pick<Company, 'companyID'>
    )> }
  )>, update_Location?: Maybe<(
    { __typename?: 'Location_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Location' }
      & Pick<Location, 'locationID'>
    )> }
  )>, update_Address?: Maybe<(
    { __typename?: 'Address_mutation_response' }
    & { returning: Array<(
      { __typename?: 'Address' }
      & Pick<Address, 'addressID'>
    )> }
  )> }
);

export type DeleteTravelGuideMutationVariables = Exact<{
  travelGuideID?: Maybe<Scalars['Int']>;
}>;


export type DeleteTravelGuideMutation = (
  { __typename: 'mutation_root' }
  & { update_TravelGuide?: Maybe<(
    { __typename?: 'TravelGuide_mutation_response' }
    & { returning: Array<(
      { __typename?: 'TravelGuide' }
      & Pick<TravelGuide, 'travelGuideID'>
    )> }
  )> }
);

export type UpdateUserMutationVariables = Exact<{
  updateUser?: Maybe<User_Set_Input>;
  mail?: Maybe<Scalars['String']>;
}>;


export type UpdateUserMutation = (
  { __typename: 'mutation_root' }
  & { update_User?: Maybe<(
    { __typename?: 'User_mutation_response' }
    & { returning: Array<(
      { __typename?: 'User' }
      & Pick<User, 'userID'>
    )> }
  )> }
);

export type DeleteRestaurantWorkingScMutationVariables = Exact<{
  restaurantWorkingScID?: Maybe<Scalars['Int']>;
}>;


export type DeleteRestaurantWorkingScMutation = (
  { __typename?: 'mutation_root' }
  & { update_RestaurantWorkingSchedule?: Maybe<(
    { __typename?: 'RestaurantWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'RestaurantWorkingSchedule' }
      & Pick<RestaurantWorkingSchedule, 'restaurantWorkingScheduleID'>
    )> }
  )> }
);

export type DeleteMuseumWorkingScMutationVariables = Exact<{
  museumWorkingScID?: Maybe<Scalars['Int']>;
}>;


export type DeleteMuseumWorkingScMutation = (
  { __typename?: 'mutation_root' }
  & { update_MuseumWorkingSchedule?: Maybe<(
    { __typename?: 'MuseumWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumWorkingSchedule' }
      & Pick<MuseumWorkingSchedule, 'museumWorkingScheduleID'>
    )> }
  )> }
);

export type DeleteArchSiteWorkingScMutationVariables = Exact<{
  archSiteWorkingScID?: Maybe<Scalars['Int']>;
}>;


export type DeleteArchSiteWorkingScMutation = (
  { __typename?: 'mutation_root' }
  & { update_ArchSiteWorkingSchedule?: Maybe<(
    { __typename?: 'ArchSiteWorkingSchedule_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSiteWorkingSchedule' }
      & Pick<ArchSiteWorkingSchedule, 'archSiteWorkingScheduleID'>
    )> }
  )> }
);

export type DeleteMuseumPriceMutationVariables = Exact<{
  museumPriceID?: Maybe<Scalars['Int']>;
}>;


export type DeleteMuseumPriceMutation = (
  { __typename?: 'mutation_root' }
  & { update_MuseumPrice?: Maybe<(
    { __typename?: 'MuseumPrice_mutation_response' }
    & { returning: Array<(
      { __typename?: 'MuseumPrice' }
      & Pick<MuseumPrice, 'museumPriceID'>
    )> }
  )> }
);

export type DeleteArchSitePriceMutationVariables = Exact<{
  archSitePriceID?: Maybe<Scalars['Int']>;
}>;


export type DeleteArchSitePriceMutation = (
  { __typename?: 'mutation_root' }
  & { update_ArchSitePrice?: Maybe<(
    { __typename?: 'ArchSitePrice_mutation_response' }
    & { returning: Array<(
      { __typename?: 'ArchSitePrice' }
      & Pick<ArchSitePrice, 'archSitePriceID'>
    )> }
  )> }
);

export type GetHotelLocationQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetHotelLocationQuery = (
  { __typename?: 'query_root' }
  & { Hotel: Array<(
    { __typename?: 'Hotel' }
    & Pick<Hotel, 'name' | 'locationID' | 'hotelID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address'>
      )> }
    ) }
  )> }
);

export type GetArchSiteLocationQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  archSiteEntranceTypeID?: Maybe<Scalars['Int']>;
  priceDate?: Maybe<Scalars['timestamptz']>;
  archSiteTypeIDs?: Maybe<Array<Scalars['Int']>>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetArchSiteLocationQuery = (
  { __typename?: 'query_root' }
  & { ArchSite: Array<(
    { __typename?: 'ArchSite' }
    & Pick<ArchSite, 'name' | 'locationID' | 'archSiteID' | 'age' | 'diameter' | 'averageTime'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address'>
      )> }
    ), ArchSitePrices: Array<(
      { __typename?: 'ArchSitePrice' }
      & Pick<ArchSitePrice, 'price' | 'finishDate' | 'archSiteEntranceTypeID'>
    )>, ArchSiteTypeArchSites: Array<(
      { __typename?: 'ArchSiteTypeArchSite' }
      & Pick<ArchSiteTypeArchSite, 'archSiteTypeID'>
    )> }
  )> }
);

export type GetMuseumLocationQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  museumEntranceTypeID?: Maybe<Scalars['Int']>;
  priceDate?: Maybe<Scalars['timestamptz']>;
  museumTypeIDs?: Maybe<Array<Scalars['Int']>>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetMuseumLocationQuery = (
  { __typename?: 'query_root' }
  & { Museum: Array<(
    { __typename?: 'Museum' }
    & Pick<Museum, 'name' | 'locationID' | 'museumID' | 'averageTime'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address'>
      )> }
    ), MuseumPrices: Array<(
      { __typename?: 'MuseumPrice' }
      & Pick<MuseumPrice, 'price' | 'finishDate' | 'entranceTypeID'>
    )> }
  )> }
);

export type GetRestaurantLocationQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetRestaurantLocationQuery = (
  { __typename?: 'query_root' }
  & { Restaurant: Array<(
    { __typename?: 'Restaurant' }
    & Pick<Restaurant, 'name' | 'locationID' | 'restaurantID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address'>
      )> }
    ) }
  )> }
);

export type GetDayQueryVariables = Exact<{ [key: string]: never; }>;


export type GetDayQuery = (
  { __typename: 'query_root' }
  & { Day: Array<(
    { __typename?: 'Day' }
    & Pick<Day, 'dayID' | 'name'>
  )> }
);

export type GetCitiesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCitiesQuery = (
  { __typename: 'query_root' }
  & { City: Array<(
    { __typename?: 'City' }
    & Pick<City, 'cityID' | 'city' | 'description' | 'imageUrl'>
    & { Location?: Maybe<(
      { __typename?: 'Location' }
      & Pick<Location, 'latitude' | 'longtitude'>
    )> }
  )> }
);

export type GetCityDistrictsQueryVariables = Exact<{
  cityID: Scalars['Int'];
}>;


export type GetCityDistrictsQuery = (
  { __typename: 'query_root' }
  & { District: Array<(
    { __typename?: 'District' }
    & Pick<District, 'district' | 'districtID'>
  )> }
);

export type GetHotelByIdQueryVariables = Exact<{
  hotelID?: Maybe<Scalars['Int']>;
}>;


export type GetHotelByIdQuery = (
  { __typename: 'query_root' }
  & { Hotel: Array<(
    { __typename?: 'Hotel' }
    & Pick<Hotel, 'description' | 'name' | 'star' | 'taxNumber' | 'locationID' | 'companyID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'addressID' | 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address' | 'cityID' | 'districtID'>
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ), Company: (
      { __typename?: 'Company' }
      & { CompanyPhones: Array<(
        { __typename?: 'CompanyPhone' }
        & { Phone: (
          { __typename?: 'Phone' }
          & Pick<Phone, 'phone'>
        ) }
      )> }
    ) }
  )> }
);

export type GetArticleByIdQueryVariables = Exact<{
  articleID?: Maybe<Scalars['Int']>;
}>;


export type GetArticleByIdQuery = (
  { __typename: 'query_root' }
  & { Article: Array<(
    { __typename?: 'Article' }
    & Pick<Article, 'articleID' | 'content' | 'title' | 'imageUrl'>
    & { ArticleTags: Array<(
      { __typename?: 'ArticleTag' }
      & { Tag: (
        { __typename?: 'Tag' }
        & Pick<Tag, 'name'>
      ) }
    )> }
  )> }
);

export type GetCompanyByIdQueryVariables = Exact<{
  companyID?: Maybe<Scalars['Int']>;
}>;


export type GetCompanyByIdQuery = (
  { __typename: 'query_root' }
  & { Company: Array<(
    { __typename?: 'Company' }
    & Pick<Company, 'name' | 'taxNumber' | 'mail' | 'registerDate' | 'logoUrl' | 'description' | 'locationID' | 'companyID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'addressID' | 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address' | 'cityID' | 'districtID'>
      )> }
    ), CompanyPhones: Array<(
      { __typename?: 'CompanyPhone' }
      & { Phone: (
        { __typename?: 'Phone' }
        & Pick<Phone, 'phone'>
      ) }
    )> }
  )> }
);

export type GetHotelByCityQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetHotelByCityQuery = (
  { __typename: 'query_root' }
  & { Hotel: Array<(
    { __typename?: 'Hotel' }
    & Pick<Hotel, 'description' | 'name' | 'star' | 'companyID' | 'hotelID'>
    & { Location: (
      { __typename?: 'Location' }
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ) }
  )> }
);

export type GetRestaurantByCityQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
  regionID?: Maybe<Scalars['Int']>;
}>;


export type GetRestaurantByCityQuery = (
  { __typename: 'query_root' }
  & { Restaurant: Array<(
    { __typename?: 'Restaurant' }
    & Pick<Restaurant, 'name' | 'star' | 'companyID' | 'restaurantID'>
    & { Location: (
      { __typename?: 'Location' }
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ), RestaurantType: (
      { __typename?: 'RestaurantType' }
      & Pick<RestaurantType, 'type'>
    ) }
  )> }
);

export type GetRestaurantByIdQueryVariables = Exact<{
  restaurantID?: Maybe<Scalars['Int']>;
}>;


export type GetRestaurantByIdQuery = (
  { __typename: 'query_root' }
  & { Restaurant: Array<(
    { __typename?: 'Restaurant' }
    & Pick<Restaurant, 'name' | 'star' | 'taxNumber' | 'locationID' | 'companyID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'addressID' | 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address' | 'cityID' | 'districtID'>
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ), Company: (
      { __typename?: 'Company' }
      & { CompanyPhones: Array<(
        { __typename?: 'CompanyPhone' }
        & { Phone: (
          { __typename?: 'Phone' }
          & Pick<Phone, 'phone'>
        ) }
      )> }
    ), RestaurantWorkingSchedules: Array<(
      { __typename?: 'RestaurantWorkingSchedule' }
      & Pick<RestaurantWorkingSchedule, 'startDate' | 'finishDate'>
      & { RestaurantWorkingDaySchedules: Array<(
        { __typename?: 'RestaurantWorkingDaySchedule' }
        & { RestaurantWorkingDay: (
          { __typename?: 'RestaurantWorkingDay' }
          & Pick<RestaurantWorkingDay, 'dayID' | 'openHour' | 'closeHour'>
        ) }
      )> }
    )> }
  )> }
);

export type GetRestaurantMenuByResIdQueryVariables = Exact<{
  restaurantID?: Maybe<Scalars['Int']>;
}>;


export type GetRestaurantMenuByResIdQuery = (
  { __typename: 'query_root' }
  & { RestaurantMenu: Array<(
    { __typename?: 'RestaurantMenu' }
    & Pick<RestaurantMenu, 'name' | 'price' | 'restaurantMenuID'>
    & { RestaurantMenuFoods: Array<(
      { __typename?: 'RestaurantMenuFood' }
      & { RestaurantFood: (
        { __typename?: 'RestaurantFood' }
        & Pick<RestaurantFood, 'name'>
      ) }
    )> }
  )> }
);

export type GetCityByIdQueryVariables = Exact<{
  cityID?: Maybe<Scalars['Int']>;
}>;


export type GetCityByIdQuery = (
  { __typename: 'query_root' }
  & { City: Array<(
    { __typename?: 'City' }
    & Pick<City, 'cityID' | 'city' | 'description' | 'imageUrl'>
  )> }
);

export type GetRegionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetRegionsQuery = (
  { __typename?: 'query_root' }
  & { Region: Array<(
    { __typename?: 'Region' }
    & Pick<Region, 'region' | 'regionID'>
  )> }
);

export type GetTravelGuideByIdQueryVariables = Exact<{
  travelGuideID?: Maybe<Scalars['Int']>;
}>;


export type GetTravelGuideByIdQuery = (
  { __typename?: 'query_root' }
  & { TravelGuide: Array<(
    { __typename?: 'TravelGuide' }
    & Pick<TravelGuide, 'cost' | 'title'>
    & { TravelGuideArchSites: Array<(
      { __typename?: 'TravelGuideArchSite' }
      & { ArchSite: (
        { __typename?: 'ArchSite' }
        & Pick<ArchSite, 'archSiteID' | 'name' | 'description' | 'averageTime'>
        & { Location: (
          { __typename?: 'Location' }
          & Pick<Location, 'longtitude' | 'latitude'>
        ) }
      ) }
    )>, TravelGuideHotels: Array<(
      { __typename?: 'TravelGuideHotel' }
      & { Hotel: (
        { __typename?: 'Hotel' }
        & Pick<Hotel, 'hotelID' | 'name' | 'description'>
        & { Location: (
          { __typename?: 'Location' }
          & Pick<Location, 'longtitude' | 'latitude'>
        ) }
      ) }
    )>, TravelGuideLocations: Array<(
      { __typename?: 'TravelGuideLocation' }
      & Pick<TravelGuideLocation, 'travelGuideID'>
      & { Location: (
        { __typename?: 'Location' }
        & Pick<Location, 'longtitude' | 'latitude'>
      ) }
    )>, TravelGuideMuseums: Array<(
      { __typename?: 'TravelGuideMuseum' }
      & { Museum: (
        { __typename?: 'Museum' }
        & Pick<Museum, 'museumID' | 'name' | 'averageTime'>
        & { Location: (
          { __typename?: 'Location' }
          & Pick<Location, 'latitude' | 'longtitude'>
        ) }
      ) }
    )>, TravelGuideRestaurants: Array<(
      { __typename?: 'TravelGuideRestaurant' }
      & { Restaurant: (
        { __typename?: 'Restaurant' }
        & Pick<Restaurant, 'restaurantID' | 'name'>
        & { Location: (
          { __typename?: 'Location' }
          & Pick<Location, 'longtitude' | 'latitude'>
        ) }
      ) }
    )> }
  )> }
);

export type GetUserInfoQueryVariables = Exact<{
  userID: Scalars['Int'];
}>;


export type GetUserInfoQuery = (
  { __typename?: 'query_root' }
  & { User: Array<(
    { __typename?: 'User' }
    & Pick<User, 'name' | 'mail' | 'surname' | 'birthDate' | 'profileImageUrl'>
    & { Phone?: Maybe<(
      { __typename?: 'Phone' }
      & Pick<Phone, 'phone'>
    )> }
  )> }
);

export type GetArticleListSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetArticleListSubscription = (
  { __typename?: 'subscription_root' }
  & { Article: Array<(
    { __typename?: 'Article' }
    & Pick<Article, 'articleID' | 'content' | 'publishDate' | 'title' | 'imageUrl'>
  )> }
);

export type GetUserArchSiteSubscriptionVariables = Exact<{
  userID?: Maybe<Scalars['Int']>;
}>;


export type GetUserArchSiteSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSite: Array<(
    { __typename?: 'ArchSite' }
    & Pick<ArchSite, 'description' | 'name' | 'archSiteID'>
    & { Company: (
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    ) }
  )> }
);

export type GetFoodTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetFoodTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { RestaurantFoodType: Array<(
    { __typename?: 'RestaurantFoodType' }
    & Pick<RestaurantFoodType, 'type' | 'restaurantFoodTypeID'>
  )> }
);

export type GetRestaurantTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetRestaurantTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { RestaurantType: Array<(
    { __typename?: 'RestaurantType' }
    & Pick<RestaurantType, 'type' | 'restaurantTypeID'>
  )> }
);

export type GetUserCompanySubscriptionVariables = Exact<{
  userID?: Maybe<Scalars['Int']>;
}>;


export type GetUserCompanySubscription = (
  { __typename?: 'subscription_root' }
  & { Company: Array<(
    { __typename?: 'Company' }
    & Pick<Company, 'companyID' | 'name' | 'description' | 'faxNumber' | 'taxNumber' | 'mail' | 'registerDate'>
  )> }
);

export type GetRoomPropertySubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetRoomPropertySubscription = (
  { __typename?: 'subscription_root' }
  & { RoomProperty: Array<(
    { __typename?: 'RoomProperty' }
    & Pick<RoomProperty, 'content' | 'roomPropertyID'>
  )> }
);

export type GetUserHotelSubscriptionVariables = Exact<{
  userID: Scalars['Int'];
}>;


export type GetUserHotelSubscription = (
  { __typename?: 'subscription_root' }
  & { Hotel: Array<(
    { __typename?: 'Hotel' }
    & Pick<Hotel, 'hotelID' | 'name' | 'description' | 'star'>
    & { Company: (
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    ) }
  )> }
);

export type GetUserArticleSubscriptionVariables = Exact<{
  userID?: Maybe<Scalars['Int']>;
}>;


export type GetUserArticleSubscription = (
  { __typename?: 'subscription_root' }
  & { Article: Array<(
    { __typename?: 'Article' }
    & Pick<Article, 'articleID' | 'content' | 'title'>
  )> }
);

export type GetHotelServicePropertySubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetHotelServicePropertySubscription = (
  { __typename?: 'subscription_root' }
  & { HotelServiceProperty: Array<(
    { __typename?: 'HotelServiceProperty' }
    & Pick<HotelServiceProperty, 'content' | 'hotelServicePropertyID'>
  )> }
);

export type GetHotelRoomSubscriptionVariables = Exact<{
  hotelID: Scalars['Int'];
}>;


export type GetHotelRoomSubscription = (
  { __typename?: 'subscription_root' }
  & { HotelRoom: Array<(
    { __typename?: 'HotelRoom' }
    & Pick<HotelRoom, 'roomID'>
    & { Room: (
      { __typename?: 'Room' }
      & Pick<Room, 'roomNo'>
    ) }
  )> }
);

export type GetArchSiteTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetArchSiteTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSiteType: Array<(
    { __typename?: 'ArchSiteType' }
    & Pick<ArchSiteType, 'name' | 'archSiteTypeID'>
  )> }
);

export type GetCuisineTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetCuisineTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { RestaurantCuisineType: Array<(
    { __typename?: 'RestaurantCuisineType' }
    & Pick<RestaurantCuisineType, 'name' | 'restaurantCuisineTypeID'>
  )> }
);

export type GetMuseumTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetMuseumTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { MuseumType: Array<(
    { __typename?: 'MuseumType' }
    & Pick<MuseumType, 'museumTypeID' | 'type'>
  )> }
);

export type GetUserMuseumSubscriptionVariables = Exact<{
  userID?: Maybe<Scalars['Int']>;
}>;


export type GetUserMuseumSubscription = (
  { __typename?: 'subscription_root' }
  & { Museum: Array<(
    { __typename?: 'Museum' }
    & Pick<Museum, 'description' | 'name' | 'museumID'>
    & { Company: (
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    ) }
  )> }
);

export type GetUserRestaurantSubscriptionVariables = Exact<{
  userID?: Maybe<Scalars['Int']>;
}>;


export type GetUserRestaurantSubscription = (
  { __typename?: 'subscription_root' }
  & { Restaurant: Array<(
    { __typename?: 'Restaurant' }
    & Pick<Restaurant, 'restaurantID' | 'name' | 'star'>
    & { Company: (
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    ) }
  )> }
);

export type GetArchSiteEntranceTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetArchSiteEntranceTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSiteEntranceType: Array<(
    { __typename?: 'ArchSiteEntranceType' }
    & Pick<ArchSiteEntranceType, 'archSiteEntranceTypeID' | 'content'>
  )> }
);

export type GetMuseumEntranceTypesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetMuseumEntranceTypesSubscription = (
  { __typename?: 'subscription_root' }
  & { MuseumEntranceType: Array<(
    { __typename?: 'MuseumEntranceType' }
    & Pick<MuseumEntranceType, 'content' | 'museumEntranceTypeID'>
  )> }
);

export type GetFoodSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetFoodSubscription = (
  { __typename?: 'subscription_root' }
  & { RestaurantFood: Array<(
    { __typename?: 'RestaurantFood' }
    & Pick<RestaurantFood, 'name' | 'restaurantFoodID'>
  )> }
);

export type GetTagsSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetTagsSubscription = (
  { __typename?: 'subscription_root' }
  & { Tag: Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'name' | 'tagID'>
  )> }
);

export type GetHotelListInfoSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type GetHotelListInfoSubscription = (
  { __typename?: 'subscription_root' }
  & { Hotel: Array<(
    { __typename?: 'Hotel' }
    & Pick<Hotel, 'description' | 'name' | 'star'>
    & { Company: (
      { __typename?: 'Company' }
      & Pick<Company, 'name'>
    ) }
  )> }
);

export type GetHotelServicesSubscriptionVariables = Exact<{
  hotelID?: Maybe<Scalars['Int']>;
}>;


export type GetHotelServicesSubscription = (
  { __typename?: 'subscription_root' }
  & { HotelService: Array<(
    { __typename?: 'HotelService' }
    & { HotelServiceProperty: (
      { __typename?: 'HotelServiceProperty' }
      & Pick<HotelServiceProperty, 'content'>
    ) }
  )> }
);

export type GetHotelRoomsSubscriptionVariables = Exact<{
  hotelID?: Maybe<Scalars['Int']>;
}>;


export type GetHotelRoomsSubscription = (
  { __typename?: 'subscription_root' }
  & { HotelRoom: Array<(
    { __typename?: 'HotelRoom' }
    & { Room: (
      { __typename?: 'Room' }
      & Pick<Room, 'roomNo' | 'roomID'>
      & { RoomPrices: Array<(
        { __typename?: 'RoomPrice' }
        & Pick<RoomPrice, 'price'>
      )>, RoomPropertyRooms: Array<(
        { __typename?: 'RoomPropertyRoom' }
        & { RoomProperty: (
          { __typename?: 'RoomProperty' }
          & Pick<RoomProperty, 'content'>
        ) }
      )> }
    ) }
  )> }
);

export type GetUserTravelGuideSubscriptionVariables = Exact<{
  userID: Scalars['Int'];
}>;


export type GetUserTravelGuideSubscription = (
  { __typename?: 'subscription_root' }
  & { TravelGuide: Array<(
    { __typename?: 'TravelGuide' }
    & Pick<TravelGuide, 'title' | 'travelGuideID' | 'cost' | 'creationDate'>
  )> }
);

export type GetRestaurantWorkingScheduleListSubscriptionVariables = Exact<{
  restaurantID?: Maybe<Scalars['Int']>;
}>;


export type GetRestaurantWorkingScheduleListSubscription = (
  { __typename?: 'subscription_root' }
  & { RestaurantWorkingSchedule: Array<(
    { __typename?: 'RestaurantWorkingSchedule' }
    & Pick<RestaurantWorkingSchedule, 'startDate' | 'finishDate' | 'restaurantWorkingScheduleID'>
    & { RestaurantWorkingDaySchedules: Array<(
      { __typename?: 'RestaurantWorkingDaySchedule' }
      & { RestaurantWorkingDay: (
        { __typename?: 'RestaurantWorkingDay' }
        & Pick<RestaurantWorkingDay, 'openHour' | 'closeHour'>
        & { Day: (
          { __typename?: 'Day' }
          & Pick<Day, 'name'>
        ) }
      ) }
    )> }
  )> }
);

export type GetMuseumWorkingScheduleListSubscriptionVariables = Exact<{
  museumID?: Maybe<Scalars['Int']>;
}>;


export type GetMuseumWorkingScheduleListSubscription = (
  { __typename?: 'subscription_root' }
  & { MuseumWorkingSchedule: Array<(
    { __typename?: 'MuseumWorkingSchedule' }
    & Pick<MuseumWorkingSchedule, 'startDate' | 'finishDate' | 'museumWorkingScheduleID'>
    & { MuseumWorkingDaySchedules: Array<(
      { __typename?: 'MuseumWorkingDaySchedule' }
      & { MuseumWorkingDay: (
        { __typename?: 'MuseumWorkingDay' }
        & Pick<MuseumWorkingDay, 'openHour' | 'closeHour'>
        & { Day: (
          { __typename?: 'Day' }
          & Pick<Day, 'name'>
        ) }
      ) }
    )> }
  )> }
);

export type GetArchSiteWorkingScheduleListSubscriptionVariables = Exact<{
  archSiteID?: Maybe<Scalars['Int']>;
}>;


export type GetArchSiteWorkingScheduleListSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSiteWorkingSchedule: Array<(
    { __typename?: 'ArchSiteWorkingSchedule' }
    & Pick<ArchSiteWorkingSchedule, 'startDate' | 'finishDate' | 'archSiteWorkingScheduleID'>
    & { ArchSiteWorkingDaySchedules: Array<(
      { __typename?: 'ArchSiteWorkingDaySchedule' }
      & { ArchSiteWorkingDay: (
        { __typename?: 'ArchSiteWorkingDay' }
        & Pick<ArchSiteWorkingDay, 'openHour' | 'closeHour'>
        & { Day: (
          { __typename?: 'Day' }
          & Pick<Day, 'name'>
        ) }
      ) }
    )> }
  )> }
);

export type GetArchSitePriceListSubscriptionVariables = Exact<{
  archSiteID?: Maybe<Scalars['Int']>;
}>;


export type GetArchSitePriceListSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSitePrice: Array<(
    { __typename?: 'ArchSitePrice' }
    & Pick<ArchSitePrice, 'startDate' | 'finishDate' | 'price' | 'archSitePriceID'>
    & { ArchSiteEntranceType: (
      { __typename?: 'ArchSiteEntranceType' }
      & Pick<ArchSiteEntranceType, 'content'>
    ) }
  )> }
);

export type GetMuseumPriceListSubscriptionVariables = Exact<{
  museumID?: Maybe<Scalars['Int']>;
}>;


export type GetMuseumPriceListSubscription = (
  { __typename?: 'subscription_root' }
  & { MuseumPrice: Array<(
    { __typename?: 'MuseumPrice' }
    & Pick<MuseumPrice, 'startDate' | 'finishDate' | 'price' | 'museumPriceID'>
    & { MuseumEntranceType: (
      { __typename?: 'MuseumEntranceType' }
      & Pick<MuseumEntranceType, 'content'>
    ) }
  )> }
);

export type GetMuseumByIdSubscriptionVariables = Exact<{
  museumID?: Maybe<Scalars['Int']>;
}>;


export type GetMuseumByIdSubscription = (
  { __typename?: 'subscription_root' }
  & { Museum: Array<(
    { __typename?: 'Museum' }
    & Pick<Museum, 'description' | 'name' | 'locationID' | 'companyID'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'addressID' | 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address' | 'cityID' | 'districtID'>
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ), Company: (
      { __typename?: 'Company' }
      & { CompanyPhones: Array<(
        { __typename?: 'CompanyPhone' }
        & { Phone: (
          { __typename?: 'Phone' }
          & Pick<Phone, 'phone'>
        ) }
      )> }
    ), MuseumPrices: Array<(
      { __typename?: 'MuseumPrice' }
      & Pick<MuseumPrice, 'startDate' | 'price' | 'finishDate'>
      & { MuseumEntranceType: (
        { __typename?: 'MuseumEntranceType' }
        & Pick<MuseumEntranceType, 'content'>
      ) }
    )>, MuseumWorkingSchedules: Array<(
      { __typename?: 'MuseumWorkingSchedule' }
      & Pick<MuseumWorkingSchedule, 'startDate' | 'finishDate'>
      & { MuseumWorkingDaySchedules: Array<(
        { __typename?: 'MuseumWorkingDaySchedule' }
        & { MuseumWorkingDay: (
          { __typename?: 'MuseumWorkingDay' }
          & Pick<MuseumWorkingDay, 'dayID' | 'openHour' | 'closeHour'>
        ) }
      )> }
    )> }
  )> }
);

export type GetArchSiteByIdSubscriptionVariables = Exact<{
  archSiteID?: Maybe<Scalars['Int']>;
}>;


export type GetArchSiteByIdSubscription = (
  { __typename?: 'subscription_root' }
  & { ArchSite: Array<(
    { __typename?: 'ArchSite' }
    & Pick<ArchSite, 'description' | 'name' | 'locationID' | 'companyID' | 'age' | 'altitude' | 'destruction' | 'diameter' | 'period'>
    & { Location: (
      { __typename?: 'Location' }
      & Pick<Location, 'addressID' | 'latitude' | 'longtitude'>
      & { Address?: Maybe<(
        { __typename?: 'Address' }
        & Pick<Address, 'address' | 'cityID' | 'districtID'>
        & { City: (
          { __typename?: 'City' }
          & Pick<City, 'city'>
        ), District: (
          { __typename?: 'District' }
          & Pick<District, 'district'>
        ) }
      )> }
    ), Company: (
      { __typename?: 'Company' }
      & { CompanyPhones: Array<(
        { __typename?: 'CompanyPhone' }
        & { Phone: (
          { __typename?: 'Phone' }
          & Pick<Phone, 'phone'>
        ) }
      )> }
    ), ArchSitePrices: Array<(
      { __typename?: 'ArchSitePrice' }
      & Pick<ArchSitePrice, 'startDate' | 'price' | 'finishDate'>
      & { ArchSiteEntranceType: (
        { __typename?: 'ArchSiteEntranceType' }
        & Pick<ArchSiteEntranceType, 'content'>
      ) }
    )>, ArchSiteWorkingSchedules: Array<(
      { __typename?: 'ArchSiteWorkingSchedule' }
      & Pick<ArchSiteWorkingSchedule, 'startDate' | 'finishDate'>
      & { ArchSiteWorkingDaySchedules: Array<(
        { __typename?: 'ArchSiteWorkingDaySchedule' }
        & { ArchSiteWorkingDay: (
          { __typename?: 'ArchSiteWorkingDay' }
          & Pick<ArchSiteWorkingDay, 'dayID' | 'openHour' | 'closeHour'>
        ) }
      )> }
    )> }
  )> }
);


export const ControlUserDocument = gql`
    mutation controlUser($controlUser: [User_insert_input!]!) {
  __typename
  insert_User(objects: $controlUser, on_conflict: {constraint: User_mail_key, update_columns: loginDate, where: {}}) {
    returning {
      userID
      userTypeID
    }
  }
}
    `;
export type ControlUserMutationFn = ApolloReactCommon.MutationFunction<ControlUserMutation, ControlUserMutationVariables>;
export type ControlUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ControlUserMutation, ControlUserMutationVariables>, 'mutation'>;

    export const ControlUserComponent = (props: ControlUserComponentProps) => (
      <ApolloReactComponents.Mutation<ControlUserMutation, ControlUserMutationVariables> mutation={ControlUserDocument} {...props} />
    );
    
export type ControlUserProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<ControlUserMutation, ControlUserMutationVariables>
    } & TChildProps;
export function withControlUser<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ControlUserMutation,
  ControlUserMutationVariables,
  ControlUserProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, ControlUserMutation, ControlUserMutationVariables, ControlUserProps<TChildProps, TDataName>>(ControlUserDocument, {
      alias: 'controlUser',
      ...operationOptions
    });
};
export type ControlUserMutationResult = ApolloReactCommon.MutationResult<ControlUserMutation>;
export type ControlUserMutationOptions = ApolloReactCommon.BaseMutationOptions<ControlUserMutation, ControlUserMutationVariables>;
export const AddCompanyDocument = gql`
    mutation addCompany($company: [Company_insert_input!]!) {
  __typename
  insert_Company(objects: $company) {
    returning {
      companyID
      locationID
    }
  }
}
    `;
export type AddCompanyMutationFn = ApolloReactCommon.MutationFunction<AddCompanyMutation, AddCompanyMutationVariables>;
export type AddCompanyComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddCompanyMutation, AddCompanyMutationVariables>, 'mutation'>;

    export const AddCompanyComponent = (props: AddCompanyComponentProps) => (
      <ApolloReactComponents.Mutation<AddCompanyMutation, AddCompanyMutationVariables> mutation={AddCompanyDocument} {...props} />
    );
    
export type AddCompanyProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddCompanyMutation, AddCompanyMutationVariables>
    } & TChildProps;
export function withAddCompany<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddCompanyMutation,
  AddCompanyMutationVariables,
  AddCompanyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddCompanyMutation, AddCompanyMutationVariables, AddCompanyProps<TChildProps, TDataName>>(AddCompanyDocument, {
      alias: 'addCompany',
      ...operationOptions
    });
};
export type AddCompanyMutationResult = ApolloReactCommon.MutationResult<AddCompanyMutation>;
export type AddCompanyMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCompanyMutation, AddCompanyMutationVariables>;
export const AddRestaurantDocument = gql`
    mutation addRestaurant($resta: [Restaurant_insert_input!]!) {
  __typename
  insert_Restaurant(objects: $resta) {
    returning {
      restaurantID
    }
  }
}
    `;
export type AddRestaurantMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantMutation, AddRestaurantMutationVariables>;
export type AddRestaurantComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantMutation, AddRestaurantMutationVariables>, 'mutation'>;

    export const AddRestaurantComponent = (props: AddRestaurantComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantMutation, AddRestaurantMutationVariables> mutation={AddRestaurantDocument} {...props} />
    );
    
export type AddRestaurantProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantMutation, AddRestaurantMutationVariables>
    } & TChildProps;
export function withAddRestaurant<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantMutation,
  AddRestaurantMutationVariables,
  AddRestaurantProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantMutation, AddRestaurantMutationVariables, AddRestaurantProps<TChildProps, TDataName>>(AddRestaurantDocument, {
      alias: 'addRestaurant',
      ...operationOptions
    });
};
export type AddRestaurantMutationResult = ApolloReactCommon.MutationResult<AddRestaurantMutation>;
export type AddRestaurantMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantMutation, AddRestaurantMutationVariables>;
export const AddFoodTypeDocument = gql`
    mutation addFoodType($foodType: [RestaurantFoodType_insert_input!]!) {
  __typename
  insert_RestaurantFoodType(objects: $foodType) {
    returning {
      restaurantFoodTypeID
    }
  }
}
    `;
export type AddFoodTypeMutationFn = ApolloReactCommon.MutationFunction<AddFoodTypeMutation, AddFoodTypeMutationVariables>;
export type AddFoodTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddFoodTypeMutation, AddFoodTypeMutationVariables>, 'mutation'>;

    export const AddFoodTypeComponent = (props: AddFoodTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddFoodTypeMutation, AddFoodTypeMutationVariables> mutation={AddFoodTypeDocument} {...props} />
    );
    
export type AddFoodTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddFoodTypeMutation, AddFoodTypeMutationVariables>
    } & TChildProps;
export function withAddFoodType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddFoodTypeMutation,
  AddFoodTypeMutationVariables,
  AddFoodTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddFoodTypeMutation, AddFoodTypeMutationVariables, AddFoodTypeProps<TChildProps, TDataName>>(AddFoodTypeDocument, {
      alias: 'addFoodType',
      ...operationOptions
    });
};
export type AddFoodTypeMutationResult = ApolloReactCommon.MutationResult<AddFoodTypeMutation>;
export type AddFoodTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddFoodTypeMutation, AddFoodTypeMutationVariables>;
export const AddFoodDocument = gql`
    mutation addFood($food: [RestaurantFood_insert_input!]!) {
  __typename
  insert_RestaurantFood(objects: $food) {
    returning {
      restaurantFoodID
    }
  }
}
    `;
export type AddFoodMutationFn = ApolloReactCommon.MutationFunction<AddFoodMutation, AddFoodMutationVariables>;
export type AddFoodComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddFoodMutation, AddFoodMutationVariables>, 'mutation'>;

    export const AddFoodComponent = (props: AddFoodComponentProps) => (
      <ApolloReactComponents.Mutation<AddFoodMutation, AddFoodMutationVariables> mutation={AddFoodDocument} {...props} />
    );
    
export type AddFoodProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddFoodMutation, AddFoodMutationVariables>
    } & TChildProps;
export function withAddFood<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddFoodMutation,
  AddFoodMutationVariables,
  AddFoodProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddFoodMutation, AddFoodMutationVariables, AddFoodProps<TChildProps, TDataName>>(AddFoodDocument, {
      alias: 'addFood',
      ...operationOptions
    });
};
export type AddFoodMutationResult = ApolloReactCommon.MutationResult<AddFoodMutation>;
export type AddFoodMutationOptions = ApolloReactCommon.BaseMutationOptions<AddFoodMutation, AddFoodMutationVariables>;
export const AddHotelDocument = gql`
    mutation addHotel($hotel: [Hotel_insert_input!]!) {
  __typename
  insert_Hotel(objects: $hotel) {
    returning {
      hotelID
    }
  }
}
    `;
export type AddHotelMutationFn = ApolloReactCommon.MutationFunction<AddHotelMutation, AddHotelMutationVariables>;
export type AddHotelComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddHotelMutation, AddHotelMutationVariables>, 'mutation'>;

    export const AddHotelComponent = (props: AddHotelComponentProps) => (
      <ApolloReactComponents.Mutation<AddHotelMutation, AddHotelMutationVariables> mutation={AddHotelDocument} {...props} />
    );
    
export type AddHotelProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddHotelMutation, AddHotelMutationVariables>
    } & TChildProps;
export function withAddHotel<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddHotelMutation,
  AddHotelMutationVariables,
  AddHotelProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddHotelMutation, AddHotelMutationVariables, AddHotelProps<TChildProps, TDataName>>(AddHotelDocument, {
      alias: 'addHotel',
      ...operationOptions
    });
};
export type AddHotelMutationResult = ApolloReactCommon.MutationResult<AddHotelMutation>;
export type AddHotelMutationOptions = ApolloReactCommon.BaseMutationOptions<AddHotelMutation, AddHotelMutationVariables>;
export const AddArchSiteTypeDocument = gql`
    mutation addArchSiteType($archSiteType: [ArchSiteType_insert_input!]!) {
  __typename
  insert_ArchSiteType(objects: $archSiteType) {
    returning {
      archSiteTypeID
    }
  }
}
    `;
export type AddArchSiteTypeMutationFn = ApolloReactCommon.MutationFunction<AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables>;
export type AddArchSiteTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables>, 'mutation'>;

    export const AddArchSiteTypeComponent = (props: AddArchSiteTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables> mutation={AddArchSiteTypeDocument} {...props} />
    );
    
export type AddArchSiteTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables>
    } & TChildProps;
export function withAddArchSiteType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSiteTypeMutation,
  AddArchSiteTypeMutationVariables,
  AddArchSiteTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables, AddArchSiteTypeProps<TChildProps, TDataName>>(AddArchSiteTypeDocument, {
      alias: 'addArchSiteType',
      ...operationOptions
    });
};
export type AddArchSiteTypeMutationResult = ApolloReactCommon.MutationResult<AddArchSiteTypeMutation>;
export type AddArchSiteTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSiteTypeMutation, AddArchSiteTypeMutationVariables>;
export const AddRoomPropertyDocument = gql`
    mutation addRoomProperty($RoomProperty: [RoomProperty_insert_input!]!) {
  __typename
  insert_RoomProperty(objects: $RoomProperty) {
    returning {
      roomPropertyID
    }
  }
}
    `;
export type AddRoomPropertyMutationFn = ApolloReactCommon.MutationFunction<AddRoomPropertyMutation, AddRoomPropertyMutationVariables>;
export type AddRoomPropertyComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRoomPropertyMutation, AddRoomPropertyMutationVariables>, 'mutation'>;

    export const AddRoomPropertyComponent = (props: AddRoomPropertyComponentProps) => (
      <ApolloReactComponents.Mutation<AddRoomPropertyMutation, AddRoomPropertyMutationVariables> mutation={AddRoomPropertyDocument} {...props} />
    );
    
export type AddRoomPropertyProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRoomPropertyMutation, AddRoomPropertyMutationVariables>
    } & TChildProps;
export function withAddRoomProperty<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRoomPropertyMutation,
  AddRoomPropertyMutationVariables,
  AddRoomPropertyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRoomPropertyMutation, AddRoomPropertyMutationVariables, AddRoomPropertyProps<TChildProps, TDataName>>(AddRoomPropertyDocument, {
      alias: 'addRoomProperty',
      ...operationOptions
    });
};
export type AddRoomPropertyMutationResult = ApolloReactCommon.MutationResult<AddRoomPropertyMutation>;
export type AddRoomPropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRoomPropertyMutation, AddRoomPropertyMutationVariables>;
export const AddRoomDocument = gql`
    mutation addRoom($roomNo: String!, $roomPropRoom: [RoomPropertyRoom_insert_input!]!, $hotelID: Int!) {
  __typename
  insert_Room(objects: {roomNo: $roomNo, RoomPropertyRooms: {data: $roomPropRoom}, HotelRooms: {data: {hotelID: $hotelID}}}) {
    returning {
      roomID
    }
  }
}
    `;
export type AddRoomMutationFn = ApolloReactCommon.MutationFunction<AddRoomMutation, AddRoomMutationVariables>;
export type AddRoomComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRoomMutation, AddRoomMutationVariables>, 'mutation'>;

    export const AddRoomComponent = (props: AddRoomComponentProps) => (
      <ApolloReactComponents.Mutation<AddRoomMutation, AddRoomMutationVariables> mutation={AddRoomDocument} {...props} />
    );
    
export type AddRoomProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRoomMutation, AddRoomMutationVariables>
    } & TChildProps;
export function withAddRoom<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRoomMutation,
  AddRoomMutationVariables,
  AddRoomProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRoomMutation, AddRoomMutationVariables, AddRoomProps<TChildProps, TDataName>>(AddRoomDocument, {
      alias: 'addRoom',
      ...operationOptions
    });
};
export type AddRoomMutationResult = ApolloReactCommon.MutationResult<AddRoomMutation>;
export type AddRoomMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRoomMutation, AddRoomMutationVariables>;
export const AddHotelServicePropertyDocument = gql`
    mutation addHotelServiceProperty($HotelServiceProperty: [HotelServiceProperty_insert_input!]!) {
  __typename
  insert_HotelServiceProperty(objects: $HotelServiceProperty) {
    returning {
      hotelServicePropertyID
    }
  }
}
    `;
export type AddHotelServicePropertyMutationFn = ApolloReactCommon.MutationFunction<AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables>;
export type AddHotelServicePropertyComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables>, 'mutation'>;

    export const AddHotelServicePropertyComponent = (props: AddHotelServicePropertyComponentProps) => (
      <ApolloReactComponents.Mutation<AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables> mutation={AddHotelServicePropertyDocument} {...props} />
    );
    
export type AddHotelServicePropertyProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables>
    } & TChildProps;
export function withAddHotelServiceProperty<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddHotelServicePropertyMutation,
  AddHotelServicePropertyMutationVariables,
  AddHotelServicePropertyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables, AddHotelServicePropertyProps<TChildProps, TDataName>>(AddHotelServicePropertyDocument, {
      alias: 'addHotelServiceProperty',
      ...operationOptions
    });
};
export type AddHotelServicePropertyMutationResult = ApolloReactCommon.MutationResult<AddHotelServicePropertyMutation>;
export type AddHotelServicePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<AddHotelServicePropertyMutation, AddHotelServicePropertyMutationVariables>;
export const AddHotelCommentDocument = gql`
    mutation addHotelComment($HotelComment: [HotelComment_insert_input!]!) {
  __typename
  insert_HotelComment(objects: $HotelComment) {
    returning {
      hotelCommentID
    }
  }
}
    `;
export type AddHotelCommentMutationFn = ApolloReactCommon.MutationFunction<AddHotelCommentMutation, AddHotelCommentMutationVariables>;
export type AddHotelCommentComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddHotelCommentMutation, AddHotelCommentMutationVariables>, 'mutation'>;

    export const AddHotelCommentComponent = (props: AddHotelCommentComponentProps) => (
      <ApolloReactComponents.Mutation<AddHotelCommentMutation, AddHotelCommentMutationVariables> mutation={AddHotelCommentDocument} {...props} />
    );
    
export type AddHotelCommentProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddHotelCommentMutation, AddHotelCommentMutationVariables>
    } & TChildProps;
export function withAddHotelComment<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddHotelCommentMutation,
  AddHotelCommentMutationVariables,
  AddHotelCommentProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddHotelCommentMutation, AddHotelCommentMutationVariables, AddHotelCommentProps<TChildProps, TDataName>>(AddHotelCommentDocument, {
      alias: 'addHotelComment',
      ...operationOptions
    });
};
export type AddHotelCommentMutationResult = ApolloReactCommon.MutationResult<AddHotelCommentMutation>;
export type AddHotelCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddHotelCommentMutation, AddHotelCommentMutationVariables>;
export const AddHotelRoomPriceDocument = gql`
    mutation addHotelRoomPrice($RoomPrice: [RoomPrice_insert_input!]!) {
  __typename
  insert_RoomPrice(objects: $RoomPrice) {
    returning {
      roomPriceID
    }
  }
}
    `;
export type AddHotelRoomPriceMutationFn = ApolloReactCommon.MutationFunction<AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables>;
export type AddHotelRoomPriceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables>, 'mutation'>;

    export const AddHotelRoomPriceComponent = (props: AddHotelRoomPriceComponentProps) => (
      <ApolloReactComponents.Mutation<AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables> mutation={AddHotelRoomPriceDocument} {...props} />
    );
    
export type AddHotelRoomPriceProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables>
    } & TChildProps;
export function withAddHotelRoomPrice<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddHotelRoomPriceMutation,
  AddHotelRoomPriceMutationVariables,
  AddHotelRoomPriceProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables, AddHotelRoomPriceProps<TChildProps, TDataName>>(AddHotelRoomPriceDocument, {
      alias: 'addHotelRoomPrice',
      ...operationOptions
    });
};
export type AddHotelRoomPriceMutationResult = ApolloReactCommon.MutationResult<AddHotelRoomPriceMutation>;
export type AddHotelRoomPriceMutationOptions = ApolloReactCommon.BaseMutationOptions<AddHotelRoomPriceMutation, AddHotelRoomPriceMutationVariables>;
export const AddArchSiteWorkingScheduleDocument = gql`
    mutation addArchSiteWorkingSchedule($ArchSiteWorkingSchedule: [ArchSiteWorkingSchedule_insert_input!]!) {
  __typename
  insert_ArchSiteWorkingSchedule(objects: $ArchSiteWorkingSchedule) {
    returning {
      archSiteWorkingScheduleID
    }
  }
}
    `;
export type AddArchSiteWorkingScheduleMutationFn = ApolloReactCommon.MutationFunction<AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables>;
export type AddArchSiteWorkingScheduleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables>, 'mutation'>;

    export const AddArchSiteWorkingScheduleComponent = (props: AddArchSiteWorkingScheduleComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables> mutation={AddArchSiteWorkingScheduleDocument} {...props} />
    );
    
export type AddArchSiteWorkingScheduleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables>
    } & TChildProps;
export function withAddArchSiteWorkingSchedule<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSiteWorkingScheduleMutation,
  AddArchSiteWorkingScheduleMutationVariables,
  AddArchSiteWorkingScheduleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables, AddArchSiteWorkingScheduleProps<TChildProps, TDataName>>(AddArchSiteWorkingScheduleDocument, {
      alias: 'addArchSiteWorkingSchedule',
      ...operationOptions
    });
};
export type AddArchSiteWorkingScheduleMutationResult = ApolloReactCommon.MutationResult<AddArchSiteWorkingScheduleMutation>;
export type AddArchSiteWorkingScheduleMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSiteWorkingScheduleMutation, AddArchSiteWorkingScheduleMutationVariables>;
export const AddArchSiteDocument = gql`
    mutation addArchSite($arch: [ArchSite_insert_input!]!) {
  __typename
  insert_ArchSite(objects: $arch) {
    returning {
      archSiteID
    }
  }
}
    `;
export type AddArchSiteMutationFn = ApolloReactCommon.MutationFunction<AddArchSiteMutation, AddArchSiteMutationVariables>;
export type AddArchSiteComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSiteMutation, AddArchSiteMutationVariables>, 'mutation'>;

    export const AddArchSiteComponent = (props: AddArchSiteComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSiteMutation, AddArchSiteMutationVariables> mutation={AddArchSiteDocument} {...props} />
    );
    
export type AddArchSiteProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSiteMutation, AddArchSiteMutationVariables>
    } & TChildProps;
export function withAddArchSite<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSiteMutation,
  AddArchSiteMutationVariables,
  AddArchSiteProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSiteMutation, AddArchSiteMutationVariables, AddArchSiteProps<TChildProps, TDataName>>(AddArchSiteDocument, {
      alias: 'addArchSite',
      ...operationOptions
    });
};
export type AddArchSiteMutationResult = ApolloReactCommon.MutationResult<AddArchSiteMutation>;
export type AddArchSiteMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSiteMutation, AddArchSiteMutationVariables>;
export const AddArchSiteCommentDocument = gql`
    mutation addArchSiteComment($ArchSiteComment: [ArchSiteComment_insert_input!]!) {
  __typename
  insert_ArchSiteComment(objects: $ArchSiteComment) {
    returning {
      archSiteCommentID
    }
  }
}
    `;
export type AddArchSiteCommentMutationFn = ApolloReactCommon.MutationFunction<AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables>;
export type AddArchSiteCommentComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables>, 'mutation'>;

    export const AddArchSiteCommentComponent = (props: AddArchSiteCommentComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables> mutation={AddArchSiteCommentDocument} {...props} />
    );
    
export type AddArchSiteCommentProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables>
    } & TChildProps;
export function withAddArchSiteComment<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSiteCommentMutation,
  AddArchSiteCommentMutationVariables,
  AddArchSiteCommentProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables, AddArchSiteCommentProps<TChildProps, TDataName>>(AddArchSiteCommentDocument, {
      alias: 'addArchSiteComment',
      ...operationOptions
    });
};
export type AddArchSiteCommentMutationResult = ApolloReactCommon.MutationResult<AddArchSiteCommentMutation>;
export type AddArchSiteCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSiteCommentMutation, AddArchSiteCommentMutationVariables>;
export const AddArchSiteEntranceTypeDocument = gql`
    mutation addArchSiteEntranceType($ArchSiteEntranceType: [ArchSiteEntranceType_insert_input!]!) {
  __typename
  insert_ArchSiteEntranceType(objects: $ArchSiteEntranceType) {
    returning {
      archSiteEntranceTypeID
    }
  }
}
    `;
export type AddArchSiteEntranceTypeMutationFn = ApolloReactCommon.MutationFunction<AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables>;
export type AddArchSiteEntranceTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables>, 'mutation'>;

    export const AddArchSiteEntranceTypeComponent = (props: AddArchSiteEntranceTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables> mutation={AddArchSiteEntranceTypeDocument} {...props} />
    );
    
export type AddArchSiteEntranceTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables>
    } & TChildProps;
export function withAddArchSiteEntranceType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSiteEntranceTypeMutation,
  AddArchSiteEntranceTypeMutationVariables,
  AddArchSiteEntranceTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables, AddArchSiteEntranceTypeProps<TChildProps, TDataName>>(AddArchSiteEntranceTypeDocument, {
      alias: 'addArchSiteEntranceType',
      ...operationOptions
    });
};
export type AddArchSiteEntranceTypeMutationResult = ApolloReactCommon.MutationResult<AddArchSiteEntranceTypeMutation>;
export type AddArchSiteEntranceTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSiteEntranceTypeMutation, AddArchSiteEntranceTypeMutationVariables>;
export const AddRestaurantCuisineTypeDocument = gql`
    mutation addRestaurantCuisineType($RestaurantCuisineType: [RestaurantCuisineType_insert_input!]!) {
  __typename
  insert_RestaurantCuisineType(objects: $RestaurantCuisineType) {
    returning {
      restaurantCuisineTypeID
    }
  }
}
    `;
export type AddRestaurantCuisineTypeMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables>;
export type AddRestaurantCuisineTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables>, 'mutation'>;

    export const AddRestaurantCuisineTypeComponent = (props: AddRestaurantCuisineTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables> mutation={AddRestaurantCuisineTypeDocument} {...props} />
    );
    
export type AddRestaurantCuisineTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables>
    } & TChildProps;
export function withAddRestaurantCuisineType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantCuisineTypeMutation,
  AddRestaurantCuisineTypeMutationVariables,
  AddRestaurantCuisineTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables, AddRestaurantCuisineTypeProps<TChildProps, TDataName>>(AddRestaurantCuisineTypeDocument, {
      alias: 'addRestaurantCuisineType',
      ...operationOptions
    });
};
export type AddRestaurantCuisineTypeMutationResult = ApolloReactCommon.MutationResult<AddRestaurantCuisineTypeMutation>;
export type AddRestaurantCuisineTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantCuisineTypeMutation, AddRestaurantCuisineTypeMutationVariables>;
export const AddTagDocument = gql`
    mutation addTag($Tag: [Tag_insert_input!]!) {
  __typename
  insert_Tag(objects: $Tag) {
    returning {
      tagID
    }
  }
}
    `;
export type AddTagMutationFn = ApolloReactCommon.MutationFunction<AddTagMutation, AddTagMutationVariables>;
export type AddTagComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddTagMutation, AddTagMutationVariables>, 'mutation'>;

    export const AddTagComponent = (props: AddTagComponentProps) => (
      <ApolloReactComponents.Mutation<AddTagMutation, AddTagMutationVariables> mutation={AddTagDocument} {...props} />
    );
    
export type AddTagProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddTagMutation, AddTagMutationVariables>
    } & TChildProps;
export function withAddTag<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddTagMutation,
  AddTagMutationVariables,
  AddTagProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddTagMutation, AddTagMutationVariables, AddTagProps<TChildProps, TDataName>>(AddTagDocument, {
      alias: 'addTag',
      ...operationOptions
    });
};
export type AddTagMutationResult = ApolloReactCommon.MutationResult<AddTagMutation>;
export type AddTagMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTagMutation, AddTagMutationVariables>;
export const AddRestaurantTypeDocument = gql`
    mutation addRestaurantType($RestaurantType: [RestaurantType_insert_input!]!) {
  __typename
  insert_RestaurantType(objects: $RestaurantType) {
    returning {
      restaurantTypeID
    }
  }
}
    `;
export type AddRestaurantTypeMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables>;
export type AddRestaurantTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables>, 'mutation'>;

    export const AddRestaurantTypeComponent = (props: AddRestaurantTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables> mutation={AddRestaurantTypeDocument} {...props} />
    );
    
export type AddRestaurantTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables>
    } & TChildProps;
export function withAddRestaurantType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantTypeMutation,
  AddRestaurantTypeMutationVariables,
  AddRestaurantTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables, AddRestaurantTypeProps<TChildProps, TDataName>>(AddRestaurantTypeDocument, {
      alias: 'addRestaurantType',
      ...operationOptions
    });
};
export type AddRestaurantTypeMutationResult = ApolloReactCommon.MutationResult<AddRestaurantTypeMutation>;
export type AddRestaurantTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantTypeMutation, AddRestaurantTypeMutationVariables>;
export const AddRestaurantCommentDocument = gql`
    mutation addRestaurantComment($RestaurantComment: [RestaurantComment_insert_input!]!) {
  __typename
  insert_RestaurantComment(objects: $RestaurantComment) {
    returning {
      restaurantCommentID
    }
  }
}
    `;
export type AddRestaurantCommentMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables>;
export type AddRestaurantCommentComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables>, 'mutation'>;

    export const AddRestaurantCommentComponent = (props: AddRestaurantCommentComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables> mutation={AddRestaurantCommentDocument} {...props} />
    );
    
export type AddRestaurantCommentProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables>
    } & TChildProps;
export function withAddRestaurantComment<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantCommentMutation,
  AddRestaurantCommentMutationVariables,
  AddRestaurantCommentProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables, AddRestaurantCommentProps<TChildProps, TDataName>>(AddRestaurantCommentDocument, {
      alias: 'addRestaurantComment',
      ...operationOptions
    });
};
export type AddRestaurantCommentMutationResult = ApolloReactCommon.MutationResult<AddRestaurantCommentMutation>;
export type AddRestaurantCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantCommentMutation, AddRestaurantCommentMutationVariables>;
export const AddMuseumTypeDocument = gql`
    mutation addMuseumType($MuseumType: [MuseumType_insert_input!]!) {
  __typename
  insert_MuseumType(objects: $MuseumType) {
    returning {
      museumTypeID
    }
  }
}
    `;
export type AddMuseumTypeMutationFn = ApolloReactCommon.MutationFunction<AddMuseumTypeMutation, AddMuseumTypeMutationVariables>;
export type AddMuseumTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumTypeMutation, AddMuseumTypeMutationVariables>, 'mutation'>;

    export const AddMuseumTypeComponent = (props: AddMuseumTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumTypeMutation, AddMuseumTypeMutationVariables> mutation={AddMuseumTypeDocument} {...props} />
    );
    
export type AddMuseumTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumTypeMutation, AddMuseumTypeMutationVariables>
    } & TChildProps;
export function withAddMuseumType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumTypeMutation,
  AddMuseumTypeMutationVariables,
  AddMuseumTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumTypeMutation, AddMuseumTypeMutationVariables, AddMuseumTypeProps<TChildProps, TDataName>>(AddMuseumTypeDocument, {
      alias: 'addMuseumType',
      ...operationOptions
    });
};
export type AddMuseumTypeMutationResult = ApolloReactCommon.MutationResult<AddMuseumTypeMutation>;
export type AddMuseumTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumTypeMutation, AddMuseumTypeMutationVariables>;
export const AddMuseumDocument = gql`
    mutation addMuseum($museum: [Museum_insert_input!]!) {
  __typename
  insert_Museum(objects: $museum) {
    returning {
      museumID
    }
  }
}
    `;
export type AddMuseumMutationFn = ApolloReactCommon.MutationFunction<AddMuseumMutation, AddMuseumMutationVariables>;
export type AddMuseumComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumMutation, AddMuseumMutationVariables>, 'mutation'>;

    export const AddMuseumComponent = (props: AddMuseumComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumMutation, AddMuseumMutationVariables> mutation={AddMuseumDocument} {...props} />
    );
    
export type AddMuseumProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumMutation, AddMuseumMutationVariables>
    } & TChildProps;
export function withAddMuseum<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumMutation,
  AddMuseumMutationVariables,
  AddMuseumProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumMutation, AddMuseumMutationVariables, AddMuseumProps<TChildProps, TDataName>>(AddMuseumDocument, {
      alias: 'addMuseum',
      ...operationOptions
    });
};
export type AddMuseumMutationResult = ApolloReactCommon.MutationResult<AddMuseumMutation>;
export type AddMuseumMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumMutation, AddMuseumMutationVariables>;
export const AddMuseumCommentDocument = gql`
    mutation addMuseumComment($MuseumComment: [MuseumComment_insert_input!]!) {
  __typename
  insert_MuseumComment(objects: $MuseumComment) {
    returning {
      museumCommentID
    }
  }
}
    `;
export type AddMuseumCommentMutationFn = ApolloReactCommon.MutationFunction<AddMuseumCommentMutation, AddMuseumCommentMutationVariables>;
export type AddMuseumCommentComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumCommentMutation, AddMuseumCommentMutationVariables>, 'mutation'>;

    export const AddMuseumCommentComponent = (props: AddMuseumCommentComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumCommentMutation, AddMuseumCommentMutationVariables> mutation={AddMuseumCommentDocument} {...props} />
    );
    
export type AddMuseumCommentProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumCommentMutation, AddMuseumCommentMutationVariables>
    } & TChildProps;
export function withAddMuseumComment<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumCommentMutation,
  AddMuseumCommentMutationVariables,
  AddMuseumCommentProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumCommentMutation, AddMuseumCommentMutationVariables, AddMuseumCommentProps<TChildProps, TDataName>>(AddMuseumCommentDocument, {
      alias: 'addMuseumComment',
      ...operationOptions
    });
};
export type AddMuseumCommentMutationResult = ApolloReactCommon.MutationResult<AddMuseumCommentMutation>;
export type AddMuseumCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumCommentMutation, AddMuseumCommentMutationVariables>;
export const AddMuseumEntranceTypeDocument = gql`
    mutation addMuseumEntranceType($MuseumEntranceType: [MuseumEntranceType_insert_input!]!) {
  __typename
  insert_MuseumEntranceType(objects: $MuseumEntranceType) {
    returning {
      museumEntranceTypeID
    }
  }
}
    `;
export type AddMuseumEntranceTypeMutationFn = ApolloReactCommon.MutationFunction<AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables>;
export type AddMuseumEntranceTypeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables>, 'mutation'>;

    export const AddMuseumEntranceTypeComponent = (props: AddMuseumEntranceTypeComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables> mutation={AddMuseumEntranceTypeDocument} {...props} />
    );
    
export type AddMuseumEntranceTypeProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables>
    } & TChildProps;
export function withAddMuseumEntranceType<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumEntranceTypeMutation,
  AddMuseumEntranceTypeMutationVariables,
  AddMuseumEntranceTypeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables, AddMuseumEntranceTypeProps<TChildProps, TDataName>>(AddMuseumEntranceTypeDocument, {
      alias: 'addMuseumEntranceType',
      ...operationOptions
    });
};
export type AddMuseumEntranceTypeMutationResult = ApolloReactCommon.MutationResult<AddMuseumEntranceTypeMutation>;
export type AddMuseumEntranceTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumEntranceTypeMutation, AddMuseumEntranceTypeMutationVariables>;
export const AddMuseumWorkingScheduleDocument = gql`
    mutation addMuseumWorkingSchedule($MuseumWorkingSchedule: [MuseumWorkingSchedule_insert_input!]!) {
  __typename
  insert_MuseumWorkingSchedule(objects: $MuseumWorkingSchedule) {
    returning {
      museumWorkingScheduleID
    }
  }
}
    `;
export type AddMuseumWorkingScheduleMutationFn = ApolloReactCommon.MutationFunction<AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables>;
export type AddMuseumWorkingScheduleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables>, 'mutation'>;

    export const AddMuseumWorkingScheduleComponent = (props: AddMuseumWorkingScheduleComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables> mutation={AddMuseumWorkingScheduleDocument} {...props} />
    );
    
export type AddMuseumWorkingScheduleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables>
    } & TChildProps;
export function withAddMuseumWorkingSchedule<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumWorkingScheduleMutation,
  AddMuseumWorkingScheduleMutationVariables,
  AddMuseumWorkingScheduleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables, AddMuseumWorkingScheduleProps<TChildProps, TDataName>>(AddMuseumWorkingScheduleDocument, {
      alias: 'addMuseumWorkingSchedule',
      ...operationOptions
    });
};
export type AddMuseumWorkingScheduleMutationResult = ApolloReactCommon.MutationResult<AddMuseumWorkingScheduleMutation>;
export type AddMuseumWorkingScheduleMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumWorkingScheduleMutation, AddMuseumWorkingScheduleMutationVariables>;
export const AddRestaurantWorkingScheduleDocument = gql`
    mutation addRestaurantWorkingSchedule($RestaurantWorkingSchedule: [RestaurantWorkingSchedule_insert_input!]!) {
  __typename
  insert_RestaurantWorkingSchedule(objects: $RestaurantWorkingSchedule) {
    returning {
      restaurantWorkingScheduleID
    }
  }
}
    `;
export type AddRestaurantWorkingScheduleMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables>;
export type AddRestaurantWorkingScheduleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables>, 'mutation'>;

    export const AddRestaurantWorkingScheduleComponent = (props: AddRestaurantWorkingScheduleComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables> mutation={AddRestaurantWorkingScheduleDocument} {...props} />
    );
    
export type AddRestaurantWorkingScheduleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables>
    } & TChildProps;
export function withAddRestaurantWorkingSchedule<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantWorkingScheduleMutation,
  AddRestaurantWorkingScheduleMutationVariables,
  AddRestaurantWorkingScheduleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables, AddRestaurantWorkingScheduleProps<TChildProps, TDataName>>(AddRestaurantWorkingScheduleDocument, {
      alias: 'addRestaurantWorkingSchedule',
      ...operationOptions
    });
};
export type AddRestaurantWorkingScheduleMutationResult = ApolloReactCommon.MutationResult<AddRestaurantWorkingScheduleMutation>;
export type AddRestaurantWorkingScheduleMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantWorkingScheduleMutation, AddRestaurantWorkingScheduleMutationVariables>;
export const AddArchSitePriceDocument = gql`
    mutation addArchSitePrice($ArchSitePrice: [ArchSitePrice_insert_input!]!) {
  __typename
  insert_ArchSitePrice(objects: $ArchSitePrice) {
    returning {
      archSitePriceID
    }
  }
}
    `;
export type AddArchSitePriceMutationFn = ApolloReactCommon.MutationFunction<AddArchSitePriceMutation, AddArchSitePriceMutationVariables>;
export type AddArchSitePriceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArchSitePriceMutation, AddArchSitePriceMutationVariables>, 'mutation'>;

    export const AddArchSitePriceComponent = (props: AddArchSitePriceComponentProps) => (
      <ApolloReactComponents.Mutation<AddArchSitePriceMutation, AddArchSitePriceMutationVariables> mutation={AddArchSitePriceDocument} {...props} />
    );
    
export type AddArchSitePriceProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArchSitePriceMutation, AddArchSitePriceMutationVariables>
    } & TChildProps;
export function withAddArchSitePrice<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArchSitePriceMutation,
  AddArchSitePriceMutationVariables,
  AddArchSitePriceProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArchSitePriceMutation, AddArchSitePriceMutationVariables, AddArchSitePriceProps<TChildProps, TDataName>>(AddArchSitePriceDocument, {
      alias: 'addArchSitePrice',
      ...operationOptions
    });
};
export type AddArchSitePriceMutationResult = ApolloReactCommon.MutationResult<AddArchSitePriceMutation>;
export type AddArchSitePriceMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArchSitePriceMutation, AddArchSitePriceMutationVariables>;
export const AddMuseumPriceDocument = gql`
    mutation addMuseumPrice($MuseumPrice: [MuseumPrice_insert_input!]!) {
  __typename
  insert_MuseumPrice(objects: $MuseumPrice) {
    returning {
      museumPriceID
    }
  }
}
    `;
export type AddMuseumPriceMutationFn = ApolloReactCommon.MutationFunction<AddMuseumPriceMutation, AddMuseumPriceMutationVariables>;
export type AddMuseumPriceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddMuseumPriceMutation, AddMuseumPriceMutationVariables>, 'mutation'>;

    export const AddMuseumPriceComponent = (props: AddMuseumPriceComponentProps) => (
      <ApolloReactComponents.Mutation<AddMuseumPriceMutation, AddMuseumPriceMutationVariables> mutation={AddMuseumPriceDocument} {...props} />
    );
    
export type AddMuseumPriceProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddMuseumPriceMutation, AddMuseumPriceMutationVariables>
    } & TChildProps;
export function withAddMuseumPrice<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddMuseumPriceMutation,
  AddMuseumPriceMutationVariables,
  AddMuseumPriceProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddMuseumPriceMutation, AddMuseumPriceMutationVariables, AddMuseumPriceProps<TChildProps, TDataName>>(AddMuseumPriceDocument, {
      alias: 'addMuseumPrice',
      ...operationOptions
    });
};
export type AddMuseumPriceMutationResult = ApolloReactCommon.MutationResult<AddMuseumPriceMutation>;
export type AddMuseumPriceMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMuseumPriceMutation, AddMuseumPriceMutationVariables>;
export const AddTravelGuideDocument = gql`
    mutation addTravelGuide($travelGuide: [TravelGuide_insert_input!]!) {
  __typename
  insert_TravelGuide(objects: $travelGuide) {
    returning {
      travelGuideID
    }
  }
}
    `;
export type AddTravelGuideMutationFn = ApolloReactCommon.MutationFunction<AddTravelGuideMutation, AddTravelGuideMutationVariables>;
export type AddTravelGuideComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddTravelGuideMutation, AddTravelGuideMutationVariables>, 'mutation'>;

    export const AddTravelGuideComponent = (props: AddTravelGuideComponentProps) => (
      <ApolloReactComponents.Mutation<AddTravelGuideMutation, AddTravelGuideMutationVariables> mutation={AddTravelGuideDocument} {...props} />
    );
    
export type AddTravelGuideProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddTravelGuideMutation, AddTravelGuideMutationVariables>
    } & TChildProps;
export function withAddTravelGuide<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddTravelGuideMutation,
  AddTravelGuideMutationVariables,
  AddTravelGuideProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddTravelGuideMutation, AddTravelGuideMutationVariables, AddTravelGuideProps<TChildProps, TDataName>>(AddTravelGuideDocument, {
      alias: 'addTravelGuide',
      ...operationOptions
    });
};
export type AddTravelGuideMutationResult = ApolloReactCommon.MutationResult<AddTravelGuideMutation>;
export type AddTravelGuideMutationOptions = ApolloReactCommon.BaseMutationOptions<AddTravelGuideMutation, AddTravelGuideMutationVariables>;
export const AddRestaurantMenuDocument = gql`
    mutation addRestaurantMenu($restaurantMenu: [RestaurantMenu_insert_input!]!) {
  __typename
  insert_RestaurantMenu(objects: $restaurantMenu) {
    returning {
      restaurantMenuID
    }
  }
}
    `;
export type AddRestaurantMenuMutationFn = ApolloReactCommon.MutationFunction<AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables>;
export type AddRestaurantMenuComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables>, 'mutation'>;

    export const AddRestaurantMenuComponent = (props: AddRestaurantMenuComponentProps) => (
      <ApolloReactComponents.Mutation<AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables> mutation={AddRestaurantMenuDocument} {...props} />
    );
    
export type AddRestaurantMenuProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables>
    } & TChildProps;
export function withAddRestaurantMenu<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddRestaurantMenuMutation,
  AddRestaurantMenuMutationVariables,
  AddRestaurantMenuProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables, AddRestaurantMenuProps<TChildProps, TDataName>>(AddRestaurantMenuDocument, {
      alias: 'addRestaurantMenu',
      ...operationOptions
    });
};
export type AddRestaurantMenuMutationResult = ApolloReactCommon.MutationResult<AddRestaurantMenuMutation>;
export type AddRestaurantMenuMutationOptions = ApolloReactCommon.BaseMutationOptions<AddRestaurantMenuMutation, AddRestaurantMenuMutationVariables>;
export const AddArticleDocument = gql`
    mutation addArticle($addArticle: [Article_insert_input!]!) {
  __typename
  insert_Article(objects: $addArticle) {
    returning {
      articleID
    }
  }
}
    `;
export type AddArticleMutationFn = ApolloReactCommon.MutationFunction<AddArticleMutation, AddArticleMutationVariables>;
export type AddArticleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<AddArticleMutation, AddArticleMutationVariables>, 'mutation'>;

    export const AddArticleComponent = (props: AddArticleComponentProps) => (
      <ApolloReactComponents.Mutation<AddArticleMutation, AddArticleMutationVariables> mutation={AddArticleDocument} {...props} />
    );
    
export type AddArticleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<AddArticleMutation, AddArticleMutationVariables>
    } & TChildProps;
export function withAddArticle<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  AddArticleMutation,
  AddArticleMutationVariables,
  AddArticleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, AddArticleMutation, AddArticleMutationVariables, AddArticleProps<TChildProps, TDataName>>(AddArticleDocument, {
      alias: 'addArticle',
      ...operationOptions
    });
};
export type AddArticleMutationResult = ApolloReactCommon.MutationResult<AddArticleMutation>;
export type AddArticleMutationOptions = ApolloReactCommon.BaseMutationOptions<AddArticleMutation, AddArticleMutationVariables>;
export const ControlLoginMailUserDocument = gql`
    mutation controlLoginMailUser($loginDate: timestamptz, $loginTypeID: Int, $loginIP: inet, $mail: String!, $password: String!) {
  __typename
  update_User(where: {mail: {_eq: $mail}, password: {_eq: $password}}, _set: {loginDate: $loginDate, loginIP: $loginIP, loginTypeID: $loginTypeID}) {
    returning {
      userID
      userTypeID
    }
  }
}
    `;
export type ControlLoginMailUserMutationFn = ApolloReactCommon.MutationFunction<ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables>;
export type ControlLoginMailUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables>, 'mutation'>;

    export const ControlLoginMailUserComponent = (props: ControlLoginMailUserComponentProps) => (
      <ApolloReactComponents.Mutation<ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables> mutation={ControlLoginMailUserDocument} {...props} />
    );
    
export type ControlLoginMailUserProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables>
    } & TChildProps;
export function withControlLoginMailUser<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  ControlLoginMailUserMutation,
  ControlLoginMailUserMutationVariables,
  ControlLoginMailUserProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables, ControlLoginMailUserProps<TChildProps, TDataName>>(ControlLoginMailUserDocument, {
      alias: 'controlLoginMailUser',
      ...operationOptions
    });
};
export type ControlLoginMailUserMutationResult = ApolloReactCommon.MutationResult<ControlLoginMailUserMutation>;
export type ControlLoginMailUserMutationOptions = ApolloReactCommon.BaseMutationOptions<ControlLoginMailUserMutation, ControlLoginMailUserMutationVariables>;
export const UpdateHotelDocument = gql`
    mutation updateHotel($hotelID: Int, $locationID: Int, $addressID: Int, $hotel: Hotel_set_input!, $hotelLocation: Location_set_input!, $hotelAddress: Address_set_input!) {
  __typename
  update_Hotel(where: {hotelID: {_eq: $hotelID}}, _set: $hotel) {
    returning {
      hotelID
    }
  }
  update_Location(where: {locationID: {_eq: $locationID}}, _set: $hotelLocation) {
    returning {
      locationID
    }
  }
  update_Address(where: {addressID: {_eq: $addressID}}, _set: $hotelAddress) {
    returning {
      addressID
    }
  }
}
    `;
export type UpdateHotelMutationFn = ApolloReactCommon.MutationFunction<UpdateHotelMutation, UpdateHotelMutationVariables>;
export type UpdateHotelComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateHotelMutation, UpdateHotelMutationVariables>, 'mutation'>;

    export const UpdateHotelComponent = (props: UpdateHotelComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateHotelMutation, UpdateHotelMutationVariables> mutation={UpdateHotelDocument} {...props} />
    );
    
export type UpdateHotelProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateHotelMutation, UpdateHotelMutationVariables>
    } & TChildProps;
export function withUpdateHotel<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateHotelMutation,
  UpdateHotelMutationVariables,
  UpdateHotelProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateHotelMutation, UpdateHotelMutationVariables, UpdateHotelProps<TChildProps, TDataName>>(UpdateHotelDocument, {
      alias: 'updateHotel',
      ...operationOptions
    });
};
export type UpdateHotelMutationResult = ApolloReactCommon.MutationResult<UpdateHotelMutation>;
export type UpdateHotelMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateHotelMutation, UpdateHotelMutationVariables>;
export const UpdateArticleDocument = gql`
    mutation updateArticle($articleID: Int, $article: Article_set_input!) {
  __typename
  update_Article(where: {articleID: {_eq: $articleID}}, _set: $article) {
    returning {
      articleID
    }
  }
}
    `;
export type UpdateArticleMutationFn = ApolloReactCommon.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;
export type UpdateArticleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateArticleMutation, UpdateArticleMutationVariables>, 'mutation'>;

    export const UpdateArticleComponent = (props: UpdateArticleComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateArticleMutation, UpdateArticleMutationVariables> mutation={UpdateArticleDocument} {...props} />
    );
    
export type UpdateArticleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>
    } & TChildProps;
export function withUpdateArticle<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateArticleMutation,
  UpdateArticleMutationVariables,
  UpdateArticleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateArticleMutation, UpdateArticleMutationVariables, UpdateArticleProps<TChildProps, TDataName>>(UpdateArticleDocument, {
      alias: 'updateArticle',
      ...operationOptions
    });
};
export type UpdateArticleMutationResult = ApolloReactCommon.MutationResult<UpdateArticleMutation>;
export type UpdateArticleMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;
export const UpdateMuseumDocument = gql`
    mutation updateMuseum($museumID: Int, $locationID: Int, $addressID: Int, $museum: Museum_set_input!, $museumLocation: Location_set_input!, $museumAddress: Address_set_input!) {
  __typename
  update_Museum(where: {museumID: {_eq: $museumID}}, _set: $museum) {
    returning {
      museumID
    }
  }
  update_Location(where: {locationID: {_eq: $locationID}}, _set: $museumLocation) {
    returning {
      locationID
    }
  }
  update_Address(where: {addressID: {_eq: $addressID}}, _set: $museumAddress) {
    returning {
      addressID
    }
  }
}
    `;
export type UpdateMuseumMutationFn = ApolloReactCommon.MutationFunction<UpdateMuseumMutation, UpdateMuseumMutationVariables>;
export type UpdateMuseumComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateMuseumMutation, UpdateMuseumMutationVariables>, 'mutation'>;

    export const UpdateMuseumComponent = (props: UpdateMuseumComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateMuseumMutation, UpdateMuseumMutationVariables> mutation={UpdateMuseumDocument} {...props} />
    );
    
export type UpdateMuseumProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateMuseumMutation, UpdateMuseumMutationVariables>
    } & TChildProps;
export function withUpdateMuseum<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateMuseumMutation,
  UpdateMuseumMutationVariables,
  UpdateMuseumProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateMuseumMutation, UpdateMuseumMutationVariables, UpdateMuseumProps<TChildProps, TDataName>>(UpdateMuseumDocument, {
      alias: 'updateMuseum',
      ...operationOptions
    });
};
export type UpdateMuseumMutationResult = ApolloReactCommon.MutationResult<UpdateMuseumMutation>;
export type UpdateMuseumMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMuseumMutation, UpdateMuseumMutationVariables>;
export const UpdateArchSiteDocument = gql`
    mutation updateArchSite($archSiteID: Int, $locationID: Int, $addressID: Int, $archSite: ArchSite_set_input!, $archSiteLocation: Location_set_input!, $archSiteAddress: Address_set_input!) {
  __typename
  update_ArchSite(where: {archSiteID: {_eq: $archSiteID}}, _set: $archSite) {
    returning {
      archSiteID
    }
  }
  update_Location(where: {locationID: {_eq: $locationID}}, _set: $archSiteLocation) {
    returning {
      locationID
    }
  }
  update_Address(where: {addressID: {_eq: $addressID}}, _set: $archSiteAddress) {
    returning {
      addressID
    }
  }
}
    `;
export type UpdateArchSiteMutationFn = ApolloReactCommon.MutationFunction<UpdateArchSiteMutation, UpdateArchSiteMutationVariables>;
export type UpdateArchSiteComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateArchSiteMutation, UpdateArchSiteMutationVariables>, 'mutation'>;

    export const UpdateArchSiteComponent = (props: UpdateArchSiteComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateArchSiteMutation, UpdateArchSiteMutationVariables> mutation={UpdateArchSiteDocument} {...props} />
    );
    
export type UpdateArchSiteProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateArchSiteMutation, UpdateArchSiteMutationVariables>
    } & TChildProps;
export function withUpdateArchSite<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateArchSiteMutation,
  UpdateArchSiteMutationVariables,
  UpdateArchSiteProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateArchSiteMutation, UpdateArchSiteMutationVariables, UpdateArchSiteProps<TChildProps, TDataName>>(UpdateArchSiteDocument, {
      alias: 'updateArchSite',
      ...operationOptions
    });
};
export type UpdateArchSiteMutationResult = ApolloReactCommon.MutationResult<UpdateArchSiteMutation>;
export type UpdateArchSiteMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateArchSiteMutation, UpdateArchSiteMutationVariables>;
export const UpdateRestaurantDocument = gql`
    mutation updateRestaurant($restaurantID: Int, $locationID: Int, $addressID: Int, $restaurant: Restaurant_set_input!, $restaurantLocation: Location_set_input!, $restaurantAddress: Address_set_input!) {
  __typename
  update_Restaurant(where: {restaurantID: {_eq: $restaurantID}}, _set: $restaurant) {
    returning {
      restaurantID
    }
  }
  update_Location(where: {locationID: {_eq: $locationID}}, _set: $restaurantLocation) {
    returning {
      locationID
    }
  }
  update_Address(where: {addressID: {_eq: $addressID}}, _set: $restaurantAddress) {
    returning {
      addressID
    }
  }
}
    `;
export type UpdateRestaurantMutationFn = ApolloReactCommon.MutationFunction<UpdateRestaurantMutation, UpdateRestaurantMutationVariables>;
export type UpdateRestaurantComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateRestaurantMutation, UpdateRestaurantMutationVariables>, 'mutation'>;

    export const UpdateRestaurantComponent = (props: UpdateRestaurantComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateRestaurantMutation, UpdateRestaurantMutationVariables> mutation={UpdateRestaurantDocument} {...props} />
    );
    
export type UpdateRestaurantProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateRestaurantMutation, UpdateRestaurantMutationVariables>
    } & TChildProps;
export function withUpdateRestaurant<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateRestaurantMutation,
  UpdateRestaurantMutationVariables,
  UpdateRestaurantProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateRestaurantMutation, UpdateRestaurantMutationVariables, UpdateRestaurantProps<TChildProps, TDataName>>(UpdateRestaurantDocument, {
      alias: 'updateRestaurant',
      ...operationOptions
    });
};
export type UpdateRestaurantMutationResult = ApolloReactCommon.MutationResult<UpdateRestaurantMutation>;
export type UpdateRestaurantMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateRestaurantMutation, UpdateRestaurantMutationVariables>;
export const DeleteHotelDocument = gql`
    mutation deleteHotel($hotelID: Int) {
  __typename
  update_Hotel(where: {hotelID: {_eq: $hotelID}}, _set: {isDeleted: true}) {
    returning {
      hotelID
    }
  }
}
    `;
export type DeleteHotelMutationFn = ApolloReactCommon.MutationFunction<DeleteHotelMutation, DeleteHotelMutationVariables>;
export type DeleteHotelComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteHotelMutation, DeleteHotelMutationVariables>, 'mutation'>;

    export const DeleteHotelComponent = (props: DeleteHotelComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteHotelMutation, DeleteHotelMutationVariables> mutation={DeleteHotelDocument} {...props} />
    );
    
export type DeleteHotelProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteHotelMutation, DeleteHotelMutationVariables>
    } & TChildProps;
export function withDeleteHotel<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteHotelMutation,
  DeleteHotelMutationVariables,
  DeleteHotelProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteHotelMutation, DeleteHotelMutationVariables, DeleteHotelProps<TChildProps, TDataName>>(DeleteHotelDocument, {
      alias: 'deleteHotel',
      ...operationOptions
    });
};
export type DeleteHotelMutationResult = ApolloReactCommon.MutationResult<DeleteHotelMutation>;
export type DeleteHotelMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteHotelMutation, DeleteHotelMutationVariables>;
export const DeleteArticleDocument = gql`
    mutation deleteArticle($articleID: Int) {
  __typename
  update_Article(where: {articleID: {_eq: $articleID}}, _set: {isDeleted: true}) {
    returning {
      articleID
    }
  }
}
    `;
export type DeleteArticleMutationFn = ApolloReactCommon.MutationFunction<DeleteArticleMutation, DeleteArticleMutationVariables>;
export type DeleteArticleComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteArticleMutation, DeleteArticleMutationVariables>, 'mutation'>;

    export const DeleteArticleComponent = (props: DeleteArticleComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteArticleMutation, DeleteArticleMutationVariables> mutation={DeleteArticleDocument} {...props} />
    );
    
export type DeleteArticleProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteArticleMutation, DeleteArticleMutationVariables>
    } & TChildProps;
export function withDeleteArticle<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteArticleMutation,
  DeleteArticleMutationVariables,
  DeleteArticleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteArticleMutation, DeleteArticleMutationVariables, DeleteArticleProps<TChildProps, TDataName>>(DeleteArticleDocument, {
      alias: 'deleteArticle',
      ...operationOptions
    });
};
export type DeleteArticleMutationResult = ApolloReactCommon.MutationResult<DeleteArticleMutation>;
export type DeleteArticleMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteArticleMutation, DeleteArticleMutationVariables>;
export const DeleteMuseumDocument = gql`
    mutation deleteMuseum($museumID: Int) {
  __typename
  update_Museum(where: {museumID: {_eq: $museumID}}, _set: {isDeleted: true}) {
    returning {
      museumID
    }
  }
}
    `;
export type DeleteMuseumMutationFn = ApolloReactCommon.MutationFunction<DeleteMuseumMutation, DeleteMuseumMutationVariables>;
export type DeleteMuseumComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteMuseumMutation, DeleteMuseumMutationVariables>, 'mutation'>;

    export const DeleteMuseumComponent = (props: DeleteMuseumComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteMuseumMutation, DeleteMuseumMutationVariables> mutation={DeleteMuseumDocument} {...props} />
    );
    
export type DeleteMuseumProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteMuseumMutation, DeleteMuseumMutationVariables>
    } & TChildProps;
export function withDeleteMuseum<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteMuseumMutation,
  DeleteMuseumMutationVariables,
  DeleteMuseumProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteMuseumMutation, DeleteMuseumMutationVariables, DeleteMuseumProps<TChildProps, TDataName>>(DeleteMuseumDocument, {
      alias: 'deleteMuseum',
      ...operationOptions
    });
};
export type DeleteMuseumMutationResult = ApolloReactCommon.MutationResult<DeleteMuseumMutation>;
export type DeleteMuseumMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteMuseumMutation, DeleteMuseumMutationVariables>;
export const DeleteArchSiteDocument = gql`
    mutation deleteArchSite($archSiteID: Int) {
  __typename
  update_ArchSite(where: {archSiteID: {_eq: $archSiteID}}, _set: {isDeleted: true}) {
    returning {
      archSiteID
    }
  }
}
    `;
export type DeleteArchSiteMutationFn = ApolloReactCommon.MutationFunction<DeleteArchSiteMutation, DeleteArchSiteMutationVariables>;
export type DeleteArchSiteComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteArchSiteMutation, DeleteArchSiteMutationVariables>, 'mutation'>;

    export const DeleteArchSiteComponent = (props: DeleteArchSiteComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteArchSiteMutation, DeleteArchSiteMutationVariables> mutation={DeleteArchSiteDocument} {...props} />
    );
    
export type DeleteArchSiteProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteArchSiteMutation, DeleteArchSiteMutationVariables>
    } & TChildProps;
export function withDeleteArchSite<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteArchSiteMutation,
  DeleteArchSiteMutationVariables,
  DeleteArchSiteProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteArchSiteMutation, DeleteArchSiteMutationVariables, DeleteArchSiteProps<TChildProps, TDataName>>(DeleteArchSiteDocument, {
      alias: 'deleteArchSite',
      ...operationOptions
    });
};
export type DeleteArchSiteMutationResult = ApolloReactCommon.MutationResult<DeleteArchSiteMutation>;
export type DeleteArchSiteMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteArchSiteMutation, DeleteArchSiteMutationVariables>;
export const DeleteRestaurantDocument = gql`
    mutation deleteRestaurant($restaurantID: Int) {
  __typename
  update_Restaurant(where: {restaurantID: {_eq: $restaurantID}}, _set: {isDeleted: true}) {
    returning {
      restaurantID
    }
  }
}
    `;
export type DeleteRestaurantMutationFn = ApolloReactCommon.MutationFunction<DeleteRestaurantMutation, DeleteRestaurantMutationVariables>;
export type DeleteRestaurantComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteRestaurantMutation, DeleteRestaurantMutationVariables>, 'mutation'>;

    export const DeleteRestaurantComponent = (props: DeleteRestaurantComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteRestaurantMutation, DeleteRestaurantMutationVariables> mutation={DeleteRestaurantDocument} {...props} />
    );
    
export type DeleteRestaurantProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteRestaurantMutation, DeleteRestaurantMutationVariables>
    } & TChildProps;
export function withDeleteRestaurant<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteRestaurantMutation,
  DeleteRestaurantMutationVariables,
  DeleteRestaurantProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteRestaurantMutation, DeleteRestaurantMutationVariables, DeleteRestaurantProps<TChildProps, TDataName>>(DeleteRestaurantDocument, {
      alias: 'deleteRestaurant',
      ...operationOptions
    });
};
export type DeleteRestaurantMutationResult = ApolloReactCommon.MutationResult<DeleteRestaurantMutation>;
export type DeleteRestaurantMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteRestaurantMutation, DeleteRestaurantMutationVariables>;
export const DeleteCompanyDocument = gql`
    mutation deleteCompany($companyID: Int) {
  __typename
  update_Company(where: {companyID: {_eq: $companyID}}, _set: {isDeleted: true}) {
    returning {
      companyID
    }
  }
}
    `;
export type DeleteCompanyMutationFn = ApolloReactCommon.MutationFunction<DeleteCompanyMutation, DeleteCompanyMutationVariables>;
export type DeleteCompanyComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteCompanyMutation, DeleteCompanyMutationVariables>, 'mutation'>;

    export const DeleteCompanyComponent = (props: DeleteCompanyComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteCompanyMutation, DeleteCompanyMutationVariables> mutation={DeleteCompanyDocument} {...props} />
    );
    
export type DeleteCompanyProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteCompanyMutation, DeleteCompanyMutationVariables>
    } & TChildProps;
export function withDeleteCompany<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteCompanyMutation,
  DeleteCompanyMutationVariables,
  DeleteCompanyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteCompanyMutation, DeleteCompanyMutationVariables, DeleteCompanyProps<TChildProps, TDataName>>(DeleteCompanyDocument, {
      alias: 'deleteCompany',
      ...operationOptions
    });
};
export type DeleteCompanyMutationResult = ApolloReactCommon.MutationResult<DeleteCompanyMutation>;
export type DeleteCompanyMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteCompanyMutation, DeleteCompanyMutationVariables>;
export const UpdateCompanyDocument = gql`
    mutation updateCompany($companyID: Int, $locationID: Int, $addressID: Int, $company: Company_set_input!, $companyLocation: Location_set_input!, $companyAddress: Address_set_input!) {
  __typename
  update_Company(where: {companyID: {_eq: $companyID}}, _set: $company) {
    returning {
      companyID
    }
  }
  update_Location(where: {locationID: {_eq: $locationID}}, _set: $companyLocation) {
    returning {
      locationID
    }
  }
  update_Address(where: {addressID: {_eq: $addressID}}, _set: $companyAddress) {
    returning {
      addressID
    }
  }
}
    `;
export type UpdateCompanyMutationFn = ApolloReactCommon.MutationFunction<UpdateCompanyMutation, UpdateCompanyMutationVariables>;
export type UpdateCompanyComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateCompanyMutation, UpdateCompanyMutationVariables>, 'mutation'>;

    export const UpdateCompanyComponent = (props: UpdateCompanyComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateCompanyMutation, UpdateCompanyMutationVariables> mutation={UpdateCompanyDocument} {...props} />
    );
    
export type UpdateCompanyProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateCompanyMutation, UpdateCompanyMutationVariables>
    } & TChildProps;
export function withUpdateCompany<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateCompanyMutation,
  UpdateCompanyMutationVariables,
  UpdateCompanyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateCompanyMutation, UpdateCompanyMutationVariables, UpdateCompanyProps<TChildProps, TDataName>>(UpdateCompanyDocument, {
      alias: 'updateCompany',
      ...operationOptions
    });
};
export type UpdateCompanyMutationResult = ApolloReactCommon.MutationResult<UpdateCompanyMutation>;
export type UpdateCompanyMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCompanyMutation, UpdateCompanyMutationVariables>;
export const DeleteTravelGuideDocument = gql`
    mutation deleteTravelGuide($travelGuideID: Int) {
  __typename
  update_TravelGuide(where: {travelGuideID: {_eq: $travelGuideID}}, _set: {isDeleted: true}) {
    returning {
      travelGuideID
    }
  }
}
    `;
export type DeleteTravelGuideMutationFn = ApolloReactCommon.MutationFunction<DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables>;
export type DeleteTravelGuideComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables>, 'mutation'>;

    export const DeleteTravelGuideComponent = (props: DeleteTravelGuideComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables> mutation={DeleteTravelGuideDocument} {...props} />
    );
    
export type DeleteTravelGuideProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables>
    } & TChildProps;
export function withDeleteTravelGuide<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteTravelGuideMutation,
  DeleteTravelGuideMutationVariables,
  DeleteTravelGuideProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables, DeleteTravelGuideProps<TChildProps, TDataName>>(DeleteTravelGuideDocument, {
      alias: 'deleteTravelGuide',
      ...operationOptions
    });
};
export type DeleteTravelGuideMutationResult = ApolloReactCommon.MutationResult<DeleteTravelGuideMutation>;
export type DeleteTravelGuideMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTravelGuideMutation, DeleteTravelGuideMutationVariables>;
export const UpdateUserDocument = gql`
    mutation updateUser($updateUser: User_set_input, $mail: String) {
  __typename
  update_User(where: {mail: {_eq: $mail}}, _set: $updateUser) {
    returning {
      userID
    }
  }
}
    `;
export type UpdateUserMutationFn = ApolloReactCommon.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;
export type UpdateUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateUserMutation, UpdateUserMutationVariables>, 'mutation'>;

    export const UpdateUserComponent = (props: UpdateUserComponentProps) => (
      <ApolloReactComponents.Mutation<UpdateUserMutation, UpdateUserMutationVariables> mutation={UpdateUserDocument} {...props} />
    );
    
export type UpdateUserProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>
    } & TChildProps;
export function withUpdateUser<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  UpdateUserMutation,
  UpdateUserMutationVariables,
  UpdateUserProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, UpdateUserMutation, UpdateUserMutationVariables, UpdateUserProps<TChildProps, TDataName>>(UpdateUserDocument, {
      alias: 'updateUser',
      ...operationOptions
    });
};
export type UpdateUserMutationResult = ApolloReactCommon.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const DeleteRestaurantWorkingScDocument = gql`
    mutation deleteRestaurantWorkingSc($restaurantWorkingScID: Int) {
  update_RestaurantWorkingSchedule(where: {restaurantWorkingScheduleID: {_eq: $restaurantWorkingScID}}, _set: {isDeleted: true}) {
    returning {
      restaurantWorkingScheduleID
    }
  }
}
    `;
export type DeleteRestaurantWorkingScMutationFn = ApolloReactCommon.MutationFunction<DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables>;
export type DeleteRestaurantWorkingScComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables>, 'mutation'>;

    export const DeleteRestaurantWorkingScComponent = (props: DeleteRestaurantWorkingScComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables> mutation={DeleteRestaurantWorkingScDocument} {...props} />
    );
    
export type DeleteRestaurantWorkingScProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables>
    } & TChildProps;
export function withDeleteRestaurantWorkingSc<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteRestaurantWorkingScMutation,
  DeleteRestaurantWorkingScMutationVariables,
  DeleteRestaurantWorkingScProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables, DeleteRestaurantWorkingScProps<TChildProps, TDataName>>(DeleteRestaurantWorkingScDocument, {
      alias: 'deleteRestaurantWorkingSc',
      ...operationOptions
    });
};
export type DeleteRestaurantWorkingScMutationResult = ApolloReactCommon.MutationResult<DeleteRestaurantWorkingScMutation>;
export type DeleteRestaurantWorkingScMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteRestaurantWorkingScMutation, DeleteRestaurantWorkingScMutationVariables>;
export const DeleteMuseumWorkingScDocument = gql`
    mutation deleteMuseumWorkingSc($museumWorkingScID: Int) {
  update_MuseumWorkingSchedule(where: {museumWorkingScheduleID: {_eq: $museumWorkingScID}}, _set: {isDeleted: true}) {
    returning {
      museumWorkingScheduleID
    }
  }
}
    `;
export type DeleteMuseumWorkingScMutationFn = ApolloReactCommon.MutationFunction<DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables>;
export type DeleteMuseumWorkingScComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables>, 'mutation'>;

    export const DeleteMuseumWorkingScComponent = (props: DeleteMuseumWorkingScComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables> mutation={DeleteMuseumWorkingScDocument} {...props} />
    );
    
export type DeleteMuseumWorkingScProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables>
    } & TChildProps;
export function withDeleteMuseumWorkingSc<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteMuseumWorkingScMutation,
  DeleteMuseumWorkingScMutationVariables,
  DeleteMuseumWorkingScProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables, DeleteMuseumWorkingScProps<TChildProps, TDataName>>(DeleteMuseumWorkingScDocument, {
      alias: 'deleteMuseumWorkingSc',
      ...operationOptions
    });
};
export type DeleteMuseumWorkingScMutationResult = ApolloReactCommon.MutationResult<DeleteMuseumWorkingScMutation>;
export type DeleteMuseumWorkingScMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteMuseumWorkingScMutation, DeleteMuseumWorkingScMutationVariables>;
export const DeleteArchSiteWorkingScDocument = gql`
    mutation deleteArchSiteWorkingSc($archSiteWorkingScID: Int) {
  update_ArchSiteWorkingSchedule(where: {archSiteWorkingScheduleID: {_eq: $archSiteWorkingScID}}, _set: {isDeleted: true}) {
    returning {
      archSiteWorkingScheduleID
    }
  }
}
    `;
export type DeleteArchSiteWorkingScMutationFn = ApolloReactCommon.MutationFunction<DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables>;
export type DeleteArchSiteWorkingScComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables>, 'mutation'>;

    export const DeleteArchSiteWorkingScComponent = (props: DeleteArchSiteWorkingScComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables> mutation={DeleteArchSiteWorkingScDocument} {...props} />
    );
    
export type DeleteArchSiteWorkingScProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables>
    } & TChildProps;
export function withDeleteArchSiteWorkingSc<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteArchSiteWorkingScMutation,
  DeleteArchSiteWorkingScMutationVariables,
  DeleteArchSiteWorkingScProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables, DeleteArchSiteWorkingScProps<TChildProps, TDataName>>(DeleteArchSiteWorkingScDocument, {
      alias: 'deleteArchSiteWorkingSc',
      ...operationOptions
    });
};
export type DeleteArchSiteWorkingScMutationResult = ApolloReactCommon.MutationResult<DeleteArchSiteWorkingScMutation>;
export type DeleteArchSiteWorkingScMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteArchSiteWorkingScMutation, DeleteArchSiteWorkingScMutationVariables>;
export const DeleteMuseumPriceDocument = gql`
    mutation deleteMuseumPrice($museumPriceID: Int) {
  update_MuseumPrice(where: {museumPriceID: {_eq: $museumPriceID}}, _set: {isDeleted: true}) {
    returning {
      museumPriceID
    }
  }
}
    `;
export type DeleteMuseumPriceMutationFn = ApolloReactCommon.MutationFunction<DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables>;
export type DeleteMuseumPriceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables>, 'mutation'>;

    export const DeleteMuseumPriceComponent = (props: DeleteMuseumPriceComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables> mutation={DeleteMuseumPriceDocument} {...props} />
    );
    
export type DeleteMuseumPriceProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables>
    } & TChildProps;
export function withDeleteMuseumPrice<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteMuseumPriceMutation,
  DeleteMuseumPriceMutationVariables,
  DeleteMuseumPriceProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables, DeleteMuseumPriceProps<TChildProps, TDataName>>(DeleteMuseumPriceDocument, {
      alias: 'deleteMuseumPrice',
      ...operationOptions
    });
};
export type DeleteMuseumPriceMutationResult = ApolloReactCommon.MutationResult<DeleteMuseumPriceMutation>;
export type DeleteMuseumPriceMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteMuseumPriceMutation, DeleteMuseumPriceMutationVariables>;
export const DeleteArchSitePriceDocument = gql`
    mutation deleteArchSitePrice($archSitePriceID: Int) {
  update_ArchSitePrice(where: {archSitePriceID: {_eq: $archSitePriceID}}, _set: {isDeleted: true}) {
    returning {
      archSitePriceID
    }
  }
}
    `;
export type DeleteArchSitePriceMutationFn = ApolloReactCommon.MutationFunction<DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables>;
export type DeleteArchSitePriceComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables>, 'mutation'>;

    export const DeleteArchSitePriceComponent = (props: DeleteArchSitePriceComponentProps) => (
      <ApolloReactComponents.Mutation<DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables> mutation={DeleteArchSitePriceDocument} {...props} />
    );
    
export type DeleteArchSitePriceProps<TChildProps = {}, TDataName extends string = 'mutate'> = {
      [key in TDataName]: ApolloReactCommon.MutationFunction<DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables>
    } & TChildProps;
export function withDeleteArchSitePrice<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  DeleteArchSitePriceMutation,
  DeleteArchSitePriceMutationVariables,
  DeleteArchSitePriceProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withMutation<TProps, DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables, DeleteArchSitePriceProps<TChildProps, TDataName>>(DeleteArchSitePriceDocument, {
      alias: 'deleteArchSitePrice',
      ...operationOptions
    });
};
export type DeleteArchSitePriceMutationResult = ApolloReactCommon.MutationResult<DeleteArchSitePriceMutation>;
export type DeleteArchSitePriceMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteArchSitePriceMutation, DeleteArchSitePriceMutationVariables>;
export const GetHotelLocationDocument = gql`
    query getHotelLocation($cityID: Int, $regionID: Int) {
  Hotel(where: {isDeleted: {_eq: false}, Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}}) {
    Location {
      latitude
      longtitude
      Address {
        address
      }
    }
    name
    locationID
    hotelID
  }
}
    `;
export type GetHotelLocationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetHotelLocationQuery, GetHotelLocationQueryVariables>, 'query'>;

    export const GetHotelLocationComponent = (props: GetHotelLocationComponentProps) => (
      <ApolloReactComponents.Query<GetHotelLocationQuery, GetHotelLocationQueryVariables> query={GetHotelLocationDocument} {...props} />
    );
    
export type GetHotelLocationProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelLocationQuery, GetHotelLocationQueryVariables>
    } & TChildProps;
export function withGetHotelLocation<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelLocationQuery,
  GetHotelLocationQueryVariables,
  GetHotelLocationProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetHotelLocationQuery, GetHotelLocationQueryVariables, GetHotelLocationProps<TChildProps, TDataName>>(GetHotelLocationDocument, {
      alias: 'getHotelLocation',
      ...operationOptions
    });
};
export type GetHotelLocationQueryResult = ApolloReactCommon.QueryResult<GetHotelLocationQuery, GetHotelLocationQueryVariables>;
export const GetArchSiteLocationDocument = gql`
    query getArchSiteLocation($cityID: Int, $archSiteEntranceTypeID: Int, $priceDate: timestamptz, $archSiteTypeIDs: [Int!], $regionID: Int) {
  ArchSite(where: {Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}, ArchSitePrices: {archSiteEntranceTypeID: {_eq: $archSiteEntranceTypeID}, finishDate: {_gte: $priceDate}}, ArchSiteTypeArchSites: {archSiteTypeID: {_in: $archSiteTypeIDs}}, isDeleted: {_eq: false}}) {
    Location {
      latitude
      longtitude
      Address {
        address
      }
    }
    name
    locationID
    archSiteID
    age
    ArchSitePrices {
      price
      finishDate
      archSiteEntranceTypeID
    }
    ArchSiteTypeArchSites {
      archSiteTypeID
    }
    diameter
    averageTime
  }
}
    `;
export type GetArchSiteLocationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetArchSiteLocationQuery, GetArchSiteLocationQueryVariables>, 'query'>;

    export const GetArchSiteLocationComponent = (props: GetArchSiteLocationComponentProps) => (
      <ApolloReactComponents.Query<GetArchSiteLocationQuery, GetArchSiteLocationQueryVariables> query={GetArchSiteLocationDocument} {...props} />
    );
    
export type GetArchSiteLocationProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSiteLocationQuery, GetArchSiteLocationQueryVariables>
    } & TChildProps;
export function withGetArchSiteLocation<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSiteLocationQuery,
  GetArchSiteLocationQueryVariables,
  GetArchSiteLocationProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetArchSiteLocationQuery, GetArchSiteLocationQueryVariables, GetArchSiteLocationProps<TChildProps, TDataName>>(GetArchSiteLocationDocument, {
      alias: 'getArchSiteLocation',
      ...operationOptions
    });
};
export type GetArchSiteLocationQueryResult = ApolloReactCommon.QueryResult<GetArchSiteLocationQuery, GetArchSiteLocationQueryVariables>;
export const GetMuseumLocationDocument = gql`
    query getMuseumLocation($cityID: Int, $museumEntranceTypeID: Int, $priceDate: timestamptz, $museumTypeIDs: [Int!], $regionID: Int) {
  Museum(where: {Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}, MuseumPrices: {entranceTypeID: {_eq: $museumEntranceTypeID}, finishDate: {_gte: $priceDate}}, MuseumTypeMuseums: {museumTypeID: {_in: $museumTypeIDs}}, isDeleted: {_eq: false}}) {
    Location {
      latitude
      longtitude
      Address {
        address
      }
    }
    MuseumPrices {
      price
      finishDate
      entranceTypeID
    }
    name
    locationID
    museumID
    averageTime
  }
}
    `;
export type GetMuseumLocationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetMuseumLocationQuery, GetMuseumLocationQueryVariables>, 'query'>;

    export const GetMuseumLocationComponent = (props: GetMuseumLocationComponentProps) => (
      <ApolloReactComponents.Query<GetMuseumLocationQuery, GetMuseumLocationQueryVariables> query={GetMuseumLocationDocument} {...props} />
    );
    
export type GetMuseumLocationProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumLocationQuery, GetMuseumLocationQueryVariables>
    } & TChildProps;
export function withGetMuseumLocation<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumLocationQuery,
  GetMuseumLocationQueryVariables,
  GetMuseumLocationProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetMuseumLocationQuery, GetMuseumLocationQueryVariables, GetMuseumLocationProps<TChildProps, TDataName>>(GetMuseumLocationDocument, {
      alias: 'getMuseumLocation',
      ...operationOptions
    });
};
export type GetMuseumLocationQueryResult = ApolloReactCommon.QueryResult<GetMuseumLocationQuery, GetMuseumLocationQueryVariables>;
export const GetRestaurantLocationDocument = gql`
    query getRestaurantLocation($cityID: Int, $regionID: Int) {
  Restaurant(where: {isDeleted: {_eq: false}, Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}}) {
    Location {
      latitude
      longtitude
      Address {
        address
      }
    }
    name
    locationID
    restaurantID
  }
}
    `;
export type GetRestaurantLocationComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetRestaurantLocationQuery, GetRestaurantLocationQueryVariables>, 'query'>;

    export const GetRestaurantLocationComponent = (props: GetRestaurantLocationComponentProps) => (
      <ApolloReactComponents.Query<GetRestaurantLocationQuery, GetRestaurantLocationQueryVariables> query={GetRestaurantLocationDocument} {...props} />
    );
    
export type GetRestaurantLocationProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantLocationQuery, GetRestaurantLocationQueryVariables>
    } & TChildProps;
export function withGetRestaurantLocation<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantLocationQuery,
  GetRestaurantLocationQueryVariables,
  GetRestaurantLocationProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetRestaurantLocationQuery, GetRestaurantLocationQueryVariables, GetRestaurantLocationProps<TChildProps, TDataName>>(GetRestaurantLocationDocument, {
      alias: 'getRestaurantLocation',
      ...operationOptions
    });
};
export type GetRestaurantLocationQueryResult = ApolloReactCommon.QueryResult<GetRestaurantLocationQuery, GetRestaurantLocationQueryVariables>;
export const GetDayDocument = gql`
    query getDay {
  __typename
  Day {
    dayID
    name
  }
}
    `;
export type GetDayComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetDayQuery, GetDayQueryVariables>, 'query'>;

    export const GetDayComponent = (props: GetDayComponentProps) => (
      <ApolloReactComponents.Query<GetDayQuery, GetDayQueryVariables> query={GetDayDocument} {...props} />
    );
    
export type GetDayProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetDayQuery, GetDayQueryVariables>
    } & TChildProps;
export function withGetDay<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetDayQuery,
  GetDayQueryVariables,
  GetDayProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetDayQuery, GetDayQueryVariables, GetDayProps<TChildProps, TDataName>>(GetDayDocument, {
      alias: 'getDay',
      ...operationOptions
    });
};
export type GetDayQueryResult = ApolloReactCommon.QueryResult<GetDayQuery, GetDayQueryVariables>;
export const GetCitiesDocument = gql`
    query getCities {
  __typename
  City(where: {Country: {countryID: {_eq: 1}}}) {
    cityID
    city
    description
    imageUrl
    Location {
      latitude
      longtitude
    }
  }
}
    `;
export type GetCitiesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCitiesQuery, GetCitiesQueryVariables>, 'query'>;

    export const GetCitiesComponent = (props: GetCitiesComponentProps) => (
      <ApolloReactComponents.Query<GetCitiesQuery, GetCitiesQueryVariables> query={GetCitiesDocument} {...props} />
    );
    
export type GetCitiesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetCitiesQuery, GetCitiesQueryVariables>
    } & TChildProps;
export function withGetCities<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetCitiesQuery,
  GetCitiesQueryVariables,
  GetCitiesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetCitiesQuery, GetCitiesQueryVariables, GetCitiesProps<TChildProps, TDataName>>(GetCitiesDocument, {
      alias: 'getCities',
      ...operationOptions
    });
};
export type GetCitiesQueryResult = ApolloReactCommon.QueryResult<GetCitiesQuery, GetCitiesQueryVariables>;
export const GetCityDistrictsDocument = gql`
    query getCityDistricts($cityID: Int!) {
  __typename
  District(where: {cityID: {_eq: $cityID}}) {
    district
    districtID
  }
}
    `;
export type GetCityDistrictsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCityDistrictsQuery, GetCityDistrictsQueryVariables>, 'query'> & ({ variables: GetCityDistrictsQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GetCityDistrictsComponent = (props: GetCityDistrictsComponentProps) => (
      <ApolloReactComponents.Query<GetCityDistrictsQuery, GetCityDistrictsQueryVariables> query={GetCityDistrictsDocument} {...props} />
    );
    
export type GetCityDistrictsProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetCityDistrictsQuery, GetCityDistrictsQueryVariables>
    } & TChildProps;
export function withGetCityDistricts<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetCityDistrictsQuery,
  GetCityDistrictsQueryVariables,
  GetCityDistrictsProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetCityDistrictsQuery, GetCityDistrictsQueryVariables, GetCityDistrictsProps<TChildProps, TDataName>>(GetCityDistrictsDocument, {
      alias: 'getCityDistricts',
      ...operationOptions
    });
};
export type GetCityDistrictsQueryResult = ApolloReactCommon.QueryResult<GetCityDistrictsQuery, GetCityDistrictsQueryVariables>;
export const GetHotelByIdDocument = gql`
    query getHotelByID($hotelID: Int) {
  __typename
  Hotel(where: {hotelID: {_eq: $hotelID}, isDeleted: {_eq: false}}) {
    description
    name
    star
    taxNumber
    locationID
    Location {
      addressID
      Address {
        City {
          city
        }
        District {
          district
        }
        address
        cityID
        districtID
      }
      latitude
      longtitude
    }
    companyID
    Company {
      CompanyPhones {
        Phone {
          phone
        }
      }
    }
  }
}
    `;
export type GetHotelByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetHotelByIdQuery, GetHotelByIdQueryVariables>, 'query'>;

    export const GetHotelByIdComponent = (props: GetHotelByIdComponentProps) => (
      <ApolloReactComponents.Query<GetHotelByIdQuery, GetHotelByIdQueryVariables> query={GetHotelByIdDocument} {...props} />
    );
    
export type GetHotelByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelByIdQuery, GetHotelByIdQueryVariables>
    } & TChildProps;
export function withGetHotelById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelByIdQuery,
  GetHotelByIdQueryVariables,
  GetHotelByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetHotelByIdQuery, GetHotelByIdQueryVariables, GetHotelByIdProps<TChildProps, TDataName>>(GetHotelByIdDocument, {
      alias: 'getHotelById',
      ...operationOptions
    });
};
export type GetHotelByIdQueryResult = ApolloReactCommon.QueryResult<GetHotelByIdQuery, GetHotelByIdQueryVariables>;
export const GetArticleByIdDocument = gql`
    query getArticleByID($articleID: Int) {
  __typename
  Article(where: {articleID: {_eq: $articleID}, isDeleted: {_eq: false}}) {
    articleID
    content
    title
    imageUrl
    ArticleTags {
      Tag {
        name
      }
    }
  }
}
    `;
export type GetArticleByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetArticleByIdQuery, GetArticleByIdQueryVariables>, 'query'>;

    export const GetArticleByIdComponent = (props: GetArticleByIdComponentProps) => (
      <ApolloReactComponents.Query<GetArticleByIdQuery, GetArticleByIdQueryVariables> query={GetArticleByIdDocument} {...props} />
    );
    
export type GetArticleByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArticleByIdQuery, GetArticleByIdQueryVariables>
    } & TChildProps;
export function withGetArticleById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArticleByIdQuery,
  GetArticleByIdQueryVariables,
  GetArticleByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetArticleByIdQuery, GetArticleByIdQueryVariables, GetArticleByIdProps<TChildProps, TDataName>>(GetArticleByIdDocument, {
      alias: 'getArticleById',
      ...operationOptions
    });
};
export type GetArticleByIdQueryResult = ApolloReactCommon.QueryResult<GetArticleByIdQuery, GetArticleByIdQueryVariables>;
export const GetCompanyByIdDocument = gql`
    query getCompanyByID($companyID: Int) {
  __typename
  Company(where: {companyID: {_eq: $companyID}, isDeleted: {_eq: false}}) {
    name
    taxNumber
    mail
    registerDate
    logoUrl
    description
    locationID
    Location {
      addressID
      Address {
        address
        cityID
        districtID
      }
      latitude
      longtitude
    }
    companyID
    CompanyPhones {
      Phone {
        phone
      }
    }
  }
}
    `;
export type GetCompanyByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCompanyByIdQuery, GetCompanyByIdQueryVariables>, 'query'>;

    export const GetCompanyByIdComponent = (props: GetCompanyByIdComponentProps) => (
      <ApolloReactComponents.Query<GetCompanyByIdQuery, GetCompanyByIdQueryVariables> query={GetCompanyByIdDocument} {...props} />
    );
    
export type GetCompanyByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetCompanyByIdQuery, GetCompanyByIdQueryVariables>
    } & TChildProps;
export function withGetCompanyById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetCompanyByIdQuery,
  GetCompanyByIdQueryVariables,
  GetCompanyByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetCompanyByIdQuery, GetCompanyByIdQueryVariables, GetCompanyByIdProps<TChildProps, TDataName>>(GetCompanyByIdDocument, {
      alias: 'getCompanyById',
      ...operationOptions
    });
};
export type GetCompanyByIdQueryResult = ApolloReactCommon.QueryResult<GetCompanyByIdQuery, GetCompanyByIdQueryVariables>;
export const GetHotelByCityDocument = gql`
    query getHotelByCity($cityID: Int, $regionID: Int) {
  __typename
  Hotel(where: {Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}, isDeleted: {_eq: false}}) {
    description
    name
    star
    Location {
      Address {
        City {
          city
        }
        District {
          district
        }
      }
    }
    companyID
    hotelID
  }
}
    `;
export type GetHotelByCityComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetHotelByCityQuery, GetHotelByCityQueryVariables>, 'query'>;

    export const GetHotelByCityComponent = (props: GetHotelByCityComponentProps) => (
      <ApolloReactComponents.Query<GetHotelByCityQuery, GetHotelByCityQueryVariables> query={GetHotelByCityDocument} {...props} />
    );
    
export type GetHotelByCityProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelByCityQuery, GetHotelByCityQueryVariables>
    } & TChildProps;
export function withGetHotelByCity<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelByCityQuery,
  GetHotelByCityQueryVariables,
  GetHotelByCityProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetHotelByCityQuery, GetHotelByCityQueryVariables, GetHotelByCityProps<TChildProps, TDataName>>(GetHotelByCityDocument, {
      alias: 'getHotelByCity',
      ...operationOptions
    });
};
export type GetHotelByCityQueryResult = ApolloReactCommon.QueryResult<GetHotelByCityQuery, GetHotelByCityQueryVariables>;
export const GetRestaurantByCityDocument = gql`
    query getRestaurantByCity($cityID: Int, $regionID: Int) {
  __typename
  Restaurant(where: {Location: {Address: {City: {cityID: {_eq: $cityID}, regionID: {_eq: $regionID}}}}, isDeleted: {_eq: false}}) {
    name
    star
    Location {
      Address {
        City {
          city
        }
        District {
          district
        }
      }
    }
    companyID
    RestaurantType {
      type
    }
    restaurantID
  }
}
    `;
export type GetRestaurantByCityComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetRestaurantByCityQuery, GetRestaurantByCityQueryVariables>, 'query'>;

    export const GetRestaurantByCityComponent = (props: GetRestaurantByCityComponentProps) => (
      <ApolloReactComponents.Query<GetRestaurantByCityQuery, GetRestaurantByCityQueryVariables> query={GetRestaurantByCityDocument} {...props} />
    );
    
export type GetRestaurantByCityProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantByCityQuery, GetRestaurantByCityQueryVariables>
    } & TChildProps;
export function withGetRestaurantByCity<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantByCityQuery,
  GetRestaurantByCityQueryVariables,
  GetRestaurantByCityProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetRestaurantByCityQuery, GetRestaurantByCityQueryVariables, GetRestaurantByCityProps<TChildProps, TDataName>>(GetRestaurantByCityDocument, {
      alias: 'getRestaurantByCity',
      ...operationOptions
    });
};
export type GetRestaurantByCityQueryResult = ApolloReactCommon.QueryResult<GetRestaurantByCityQuery, GetRestaurantByCityQueryVariables>;
export const GetRestaurantByIdDocument = gql`
    query getRestaurantByID($restaurantID: Int) {
  __typename
  Restaurant(where: {restaurantID: {_eq: $restaurantID}, isDeleted: {_eq: false}}) {
    name
    star
    taxNumber
    locationID
    Location {
      addressID
      Address {
        City {
          city
        }
        District {
          district
        }
        address
        cityID
        districtID
      }
      latitude
      longtitude
    }
    companyID
    Company {
      CompanyPhones {
        Phone {
          phone
        }
      }
    }
    RestaurantWorkingSchedules {
      startDate
      finishDate
      RestaurantWorkingDaySchedules {
        RestaurantWorkingDay {
          dayID
          openHour
          closeHour
        }
      }
    }
  }
}
    `;
export type GetRestaurantByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetRestaurantByIdQuery, GetRestaurantByIdQueryVariables>, 'query'>;

    export const GetRestaurantByIdComponent = (props: GetRestaurantByIdComponentProps) => (
      <ApolloReactComponents.Query<GetRestaurantByIdQuery, GetRestaurantByIdQueryVariables> query={GetRestaurantByIdDocument} {...props} />
    );
    
export type GetRestaurantByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantByIdQuery, GetRestaurantByIdQueryVariables>
    } & TChildProps;
export function withGetRestaurantById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantByIdQuery,
  GetRestaurantByIdQueryVariables,
  GetRestaurantByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetRestaurantByIdQuery, GetRestaurantByIdQueryVariables, GetRestaurantByIdProps<TChildProps, TDataName>>(GetRestaurantByIdDocument, {
      alias: 'getRestaurantById',
      ...operationOptions
    });
};
export type GetRestaurantByIdQueryResult = ApolloReactCommon.QueryResult<GetRestaurantByIdQuery, GetRestaurantByIdQueryVariables>;
export const GetRestaurantMenuByResIdDocument = gql`
    query getRestaurantMenuByResId($restaurantID: Int) {
  __typename
  RestaurantMenu(where: {restaurantID: {_eq: $restaurantID}, isDeleted: {_eq: false}}) {
    name
    price
    RestaurantMenuFoods {
      RestaurantFood {
        name
      }
    }
    restaurantMenuID
  }
}
    `;
export type GetRestaurantMenuByResIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetRestaurantMenuByResIdQuery, GetRestaurantMenuByResIdQueryVariables>, 'query'>;

    export const GetRestaurantMenuByResIdComponent = (props: GetRestaurantMenuByResIdComponentProps) => (
      <ApolloReactComponents.Query<GetRestaurantMenuByResIdQuery, GetRestaurantMenuByResIdQueryVariables> query={GetRestaurantMenuByResIdDocument} {...props} />
    );
    
export type GetRestaurantMenuByResIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantMenuByResIdQuery, GetRestaurantMenuByResIdQueryVariables>
    } & TChildProps;
export function withGetRestaurantMenuByResId<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantMenuByResIdQuery,
  GetRestaurantMenuByResIdQueryVariables,
  GetRestaurantMenuByResIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetRestaurantMenuByResIdQuery, GetRestaurantMenuByResIdQueryVariables, GetRestaurantMenuByResIdProps<TChildProps, TDataName>>(GetRestaurantMenuByResIdDocument, {
      alias: 'getRestaurantMenuByResId',
      ...operationOptions
    });
};
export type GetRestaurantMenuByResIdQueryResult = ApolloReactCommon.QueryResult<GetRestaurantMenuByResIdQuery, GetRestaurantMenuByResIdQueryVariables>;
export const GetCityByIdDocument = gql`
    query getCityByID($cityID: Int) {
  __typename
  City(where: {cityID: {_eq: $cityID}}) {
    cityID
    city
    description
    imageUrl
  }
}
    `;
export type GetCityByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCityByIdQuery, GetCityByIdQueryVariables>, 'query'>;

    export const GetCityByIdComponent = (props: GetCityByIdComponentProps) => (
      <ApolloReactComponents.Query<GetCityByIdQuery, GetCityByIdQueryVariables> query={GetCityByIdDocument} {...props} />
    );
    
export type GetCityByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetCityByIdQuery, GetCityByIdQueryVariables>
    } & TChildProps;
export function withGetCityById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetCityByIdQuery,
  GetCityByIdQueryVariables,
  GetCityByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetCityByIdQuery, GetCityByIdQueryVariables, GetCityByIdProps<TChildProps, TDataName>>(GetCityByIdDocument, {
      alias: 'getCityById',
      ...operationOptions
    });
};
export type GetCityByIdQueryResult = ApolloReactCommon.QueryResult<GetCityByIdQuery, GetCityByIdQueryVariables>;
export const GetRegionsDocument = gql`
    query getRegions {
  Region {
    region
    regionID
  }
}
    `;
export type GetRegionsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetRegionsQuery, GetRegionsQueryVariables>, 'query'>;

    export const GetRegionsComponent = (props: GetRegionsComponentProps) => (
      <ApolloReactComponents.Query<GetRegionsQuery, GetRegionsQueryVariables> query={GetRegionsDocument} {...props} />
    );
    
export type GetRegionsProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRegionsQuery, GetRegionsQueryVariables>
    } & TChildProps;
export function withGetRegions<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRegionsQuery,
  GetRegionsQueryVariables,
  GetRegionsProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetRegionsQuery, GetRegionsQueryVariables, GetRegionsProps<TChildProps, TDataName>>(GetRegionsDocument, {
      alias: 'getRegions',
      ...operationOptions
    });
};
export type GetRegionsQueryResult = ApolloReactCommon.QueryResult<GetRegionsQuery, GetRegionsQueryVariables>;
export const GetTravelGuideByIdDocument = gql`
    query getTravelGuideByID($travelGuideID: Int) {
  TravelGuide(where: {travelGuideID: {_eq: $travelGuideID}, isDeleted: {_eq: false}}) {
    cost
    title
    TravelGuideArchSites(where: {isDeleted: {_eq: false}}) {
      ArchSite {
        archSiteID
        name
        description
        Location {
          longtitude
          latitude
        }
        averageTime
      }
    }
    TravelGuideHotels(where: {isDeleted: {_eq: false}}) {
      Hotel {
        hotelID
        name
        description
        Location {
          longtitude
          latitude
        }
      }
    }
    TravelGuideLocations {
      travelGuideID
      Location {
        longtitude
        latitude
      }
    }
    TravelGuideMuseums(where: {isDeleted: {_eq: false}}) {
      Museum {
        museumID
        name
        Location {
          latitude
          longtitude
        }
        averageTime
      }
    }
    TravelGuideRestaurants(where: {isDeleted: {_eq: false}}) {
      Restaurant {
        restaurantID
        name
        Location {
          longtitude
          latitude
        }
      }
    }
  }
}
    `;
export type GetTravelGuideByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTravelGuideByIdQuery, GetTravelGuideByIdQueryVariables>, 'query'>;

    export const GetTravelGuideByIdComponent = (props: GetTravelGuideByIdComponentProps) => (
      <ApolloReactComponents.Query<GetTravelGuideByIdQuery, GetTravelGuideByIdQueryVariables> query={GetTravelGuideByIdDocument} {...props} />
    );
    
export type GetTravelGuideByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetTravelGuideByIdQuery, GetTravelGuideByIdQueryVariables>
    } & TChildProps;
export function withGetTravelGuideById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetTravelGuideByIdQuery,
  GetTravelGuideByIdQueryVariables,
  GetTravelGuideByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetTravelGuideByIdQuery, GetTravelGuideByIdQueryVariables, GetTravelGuideByIdProps<TChildProps, TDataName>>(GetTravelGuideByIdDocument, {
      alias: 'getTravelGuideById',
      ...operationOptions
    });
};
export type GetTravelGuideByIdQueryResult = ApolloReactCommon.QueryResult<GetTravelGuideByIdQuery, GetTravelGuideByIdQueryVariables>;
export const GetUserInfoDocument = gql`
    query getUserInfo($userID: Int!) {
  User(where: {userID: {_eq: $userID}}) {
    name
    mail
    surname
    birthDate
    profileImageUrl
    Phone {
      phone
    }
  }
}
    `;
export type GetUserInfoComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetUserInfoQuery, GetUserInfoQueryVariables>, 'query'> & ({ variables: GetUserInfoQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const GetUserInfoComponent = (props: GetUserInfoComponentProps) => (
      <ApolloReactComponents.Query<GetUserInfoQuery, GetUserInfoQueryVariables> query={GetUserInfoDocument} {...props} />
    );
    
export type GetUserInfoProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserInfoQuery, GetUserInfoQueryVariables>
    } & TChildProps;
export function withGetUserInfo<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserInfoQuery,
  GetUserInfoQueryVariables,
  GetUserInfoProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, GetUserInfoQuery, GetUserInfoQueryVariables, GetUserInfoProps<TChildProps, TDataName>>(GetUserInfoDocument, {
      alias: 'getUserInfo',
      ...operationOptions
    });
};
export type GetUserInfoQueryResult = ApolloReactCommon.QueryResult<GetUserInfoQuery, GetUserInfoQueryVariables>;
export const GetArticleListDocument = gql`
    subscription getArticleList {
  Article(where: {isDeleted: {_eq: false}}) {
    articleID
    content
    publishDate
    title
    imageUrl
  }
}
    `;
export type GetArticleListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArticleListSubscription, GetArticleListSubscriptionVariables>, 'subscription'>;

    export const GetArticleListComponent = (props: GetArticleListComponentProps) => (
      <ApolloReactComponents.Subscription<GetArticleListSubscription, GetArticleListSubscriptionVariables> subscription={GetArticleListDocument} {...props} />
    );
    
export type GetArticleListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArticleListSubscription, GetArticleListSubscriptionVariables>
    } & TChildProps;
export function withGetArticleList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArticleListSubscription,
  GetArticleListSubscriptionVariables,
  GetArticleListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArticleListSubscription, GetArticleListSubscriptionVariables, GetArticleListProps<TChildProps, TDataName>>(GetArticleListDocument, {
      alias: 'getArticleList',
      ...operationOptions
    });
};
export type GetArticleListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArticleListSubscription>;
export const GetUserArchSiteDocument = gql`
    subscription getUserArchSite($userID: Int) {
  ArchSite(where: {isDeleted: {_eq: false}, Company: {CompanyUsers: {userID: {_eq: $userID}}}}) {
    Company {
      name
    }
    description
    name
    archSiteID
  }
}
    `;
export type GetUserArchSiteComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserArchSiteSubscription, GetUserArchSiteSubscriptionVariables>, 'subscription'>;

    export const GetUserArchSiteComponent = (props: GetUserArchSiteComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserArchSiteSubscription, GetUserArchSiteSubscriptionVariables> subscription={GetUserArchSiteDocument} {...props} />
    );
    
export type GetUserArchSiteProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserArchSiteSubscription, GetUserArchSiteSubscriptionVariables>
    } & TChildProps;
export function withGetUserArchSite<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserArchSiteSubscription,
  GetUserArchSiteSubscriptionVariables,
  GetUserArchSiteProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserArchSiteSubscription, GetUserArchSiteSubscriptionVariables, GetUserArchSiteProps<TChildProps, TDataName>>(GetUserArchSiteDocument, {
      alias: 'getUserArchSite',
      ...operationOptions
    });
};
export type GetUserArchSiteSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserArchSiteSubscription>;
export const GetFoodTypesDocument = gql`
    subscription getFoodTypes {
  RestaurantFoodType(where: {isDeleted: {_eq: false}}) {
    type
    restaurantFoodTypeID
  }
}
    `;
export type GetFoodTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetFoodTypesSubscription, GetFoodTypesSubscriptionVariables>, 'subscription'>;

    export const GetFoodTypesComponent = (props: GetFoodTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetFoodTypesSubscription, GetFoodTypesSubscriptionVariables> subscription={GetFoodTypesDocument} {...props} />
    );
    
export type GetFoodTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetFoodTypesSubscription, GetFoodTypesSubscriptionVariables>
    } & TChildProps;
export function withGetFoodTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetFoodTypesSubscription,
  GetFoodTypesSubscriptionVariables,
  GetFoodTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetFoodTypesSubscription, GetFoodTypesSubscriptionVariables, GetFoodTypesProps<TChildProps, TDataName>>(GetFoodTypesDocument, {
      alias: 'getFoodTypes',
      ...operationOptions
    });
};
export type GetFoodTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetFoodTypesSubscription>;
export const GetRestaurantTypesDocument = gql`
    subscription getRestaurantTypes {
  RestaurantType(where: {isDeleted: {_eq: false}}) {
    type
    restaurantTypeID
  }
}
    `;
export type GetRestaurantTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetRestaurantTypesSubscription, GetRestaurantTypesSubscriptionVariables>, 'subscription'>;

    export const GetRestaurantTypesComponent = (props: GetRestaurantTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetRestaurantTypesSubscription, GetRestaurantTypesSubscriptionVariables> subscription={GetRestaurantTypesDocument} {...props} />
    );
    
export type GetRestaurantTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantTypesSubscription, GetRestaurantTypesSubscriptionVariables>
    } & TChildProps;
export function withGetRestaurantTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantTypesSubscription,
  GetRestaurantTypesSubscriptionVariables,
  GetRestaurantTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetRestaurantTypesSubscription, GetRestaurantTypesSubscriptionVariables, GetRestaurantTypesProps<TChildProps, TDataName>>(GetRestaurantTypesDocument, {
      alias: 'getRestaurantTypes',
      ...operationOptions
    });
};
export type GetRestaurantTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetRestaurantTypesSubscription>;
export const GetUserCompanyDocument = gql`
    subscription getUserCompany($userID: Int) {
  Company(where: {isDeleted: {_eq: false}, CompanyUsers: {userID: {_eq: $userID}}}) {
    companyID
    name
    description
    faxNumber
    taxNumber
    mail
    registerDate
  }
}
    `;
export type GetUserCompanyComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserCompanySubscription, GetUserCompanySubscriptionVariables>, 'subscription'>;

    export const GetUserCompanyComponent = (props: GetUserCompanyComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserCompanySubscription, GetUserCompanySubscriptionVariables> subscription={GetUserCompanyDocument} {...props} />
    );
    
export type GetUserCompanyProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserCompanySubscription, GetUserCompanySubscriptionVariables>
    } & TChildProps;
export function withGetUserCompany<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserCompanySubscription,
  GetUserCompanySubscriptionVariables,
  GetUserCompanyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserCompanySubscription, GetUserCompanySubscriptionVariables, GetUserCompanyProps<TChildProps, TDataName>>(GetUserCompanyDocument, {
      alias: 'getUserCompany',
      ...operationOptions
    });
};
export type GetUserCompanySubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserCompanySubscription>;
export const GetRoomPropertyDocument = gql`
    subscription getRoomProperty {
  RoomProperty(where: {isDeleted: {_eq: false}}) {
    content
    roomPropertyID
  }
}
    `;
export type GetRoomPropertyComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetRoomPropertySubscription, GetRoomPropertySubscriptionVariables>, 'subscription'>;

    export const GetRoomPropertyComponent = (props: GetRoomPropertyComponentProps) => (
      <ApolloReactComponents.Subscription<GetRoomPropertySubscription, GetRoomPropertySubscriptionVariables> subscription={GetRoomPropertyDocument} {...props} />
    );
    
export type GetRoomPropertyProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRoomPropertySubscription, GetRoomPropertySubscriptionVariables>
    } & TChildProps;
export function withGetRoomProperty<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRoomPropertySubscription,
  GetRoomPropertySubscriptionVariables,
  GetRoomPropertyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetRoomPropertySubscription, GetRoomPropertySubscriptionVariables, GetRoomPropertyProps<TChildProps, TDataName>>(GetRoomPropertyDocument, {
      alias: 'getRoomProperty',
      ...operationOptions
    });
};
export type GetRoomPropertySubscriptionResult = ApolloReactCommon.SubscriptionResult<GetRoomPropertySubscription>;
export const GetUserHotelDocument = gql`
    subscription getUserHotel($userID: Int!) {
  Hotel(where: {isDeleted: {_eq: false}, Company: {CompanyUsers: {userID: {_eq: $userID}}}}) {
    hotelID
    name
    description
    star
    Company {
      name
    }
  }
}
    `;
export type GetUserHotelComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserHotelSubscription, GetUserHotelSubscriptionVariables>, 'subscription'>;

    export const GetUserHotelComponent = (props: GetUserHotelComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserHotelSubscription, GetUserHotelSubscriptionVariables> subscription={GetUserHotelDocument} {...props} />
    );
    
export type GetUserHotelProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserHotelSubscription, GetUserHotelSubscriptionVariables>
    } & TChildProps;
export function withGetUserHotel<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserHotelSubscription,
  GetUserHotelSubscriptionVariables,
  GetUserHotelProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserHotelSubscription, GetUserHotelSubscriptionVariables, GetUserHotelProps<TChildProps, TDataName>>(GetUserHotelDocument, {
      alias: 'getUserHotel',
      ...operationOptions
    });
};
export type GetUserHotelSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserHotelSubscription>;
export const GetUserArticleDocument = gql`
    subscription getUserArticle($userID: Int) {
  Article(where: {isDeleted: {_eq: false}, ArticleUsers: {userID: {_eq: $userID}}}) {
    articleID
    content
    title
  }
}
    `;
export type GetUserArticleComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserArticleSubscription, GetUserArticleSubscriptionVariables>, 'subscription'>;

    export const GetUserArticleComponent = (props: GetUserArticleComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserArticleSubscription, GetUserArticleSubscriptionVariables> subscription={GetUserArticleDocument} {...props} />
    );
    
export type GetUserArticleProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserArticleSubscription, GetUserArticleSubscriptionVariables>
    } & TChildProps;
export function withGetUserArticle<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserArticleSubscription,
  GetUserArticleSubscriptionVariables,
  GetUserArticleProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserArticleSubscription, GetUserArticleSubscriptionVariables, GetUserArticleProps<TChildProps, TDataName>>(GetUserArticleDocument, {
      alias: 'getUserArticle',
      ...operationOptions
    });
};
export type GetUserArticleSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserArticleSubscription>;
export const GetHotelServicePropertyDocument = gql`
    subscription getHotelServiceProperty {
  HotelServiceProperty(where: {isDeleted: {_eq: false}}) {
    content
    hotelServicePropertyID
  }
}
    `;
export type GetHotelServicePropertyComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetHotelServicePropertySubscription, GetHotelServicePropertySubscriptionVariables>, 'subscription'>;

    export const GetHotelServicePropertyComponent = (props: GetHotelServicePropertyComponentProps) => (
      <ApolloReactComponents.Subscription<GetHotelServicePropertySubscription, GetHotelServicePropertySubscriptionVariables> subscription={GetHotelServicePropertyDocument} {...props} />
    );
    
export type GetHotelServicePropertyProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelServicePropertySubscription, GetHotelServicePropertySubscriptionVariables>
    } & TChildProps;
export function withGetHotelServiceProperty<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelServicePropertySubscription,
  GetHotelServicePropertySubscriptionVariables,
  GetHotelServicePropertyProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetHotelServicePropertySubscription, GetHotelServicePropertySubscriptionVariables, GetHotelServicePropertyProps<TChildProps, TDataName>>(GetHotelServicePropertyDocument, {
      alias: 'getHotelServiceProperty',
      ...operationOptions
    });
};
export type GetHotelServicePropertySubscriptionResult = ApolloReactCommon.SubscriptionResult<GetHotelServicePropertySubscription>;
export const GetHotelRoomDocument = gql`
    subscription getHotelRoom($hotelID: Int!) {
  HotelRoom(where: {hotelID: {_eq: $hotelID}, isDeleted: {_eq: false}}) {
    roomID
    Room {
      roomNo
    }
  }
}
    `;
export type GetHotelRoomComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetHotelRoomSubscription, GetHotelRoomSubscriptionVariables>, 'subscription'>;

    export const GetHotelRoomComponent = (props: GetHotelRoomComponentProps) => (
      <ApolloReactComponents.Subscription<GetHotelRoomSubscription, GetHotelRoomSubscriptionVariables> subscription={GetHotelRoomDocument} {...props} />
    );
    
export type GetHotelRoomProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelRoomSubscription, GetHotelRoomSubscriptionVariables>
    } & TChildProps;
export function withGetHotelRoom<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelRoomSubscription,
  GetHotelRoomSubscriptionVariables,
  GetHotelRoomProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetHotelRoomSubscription, GetHotelRoomSubscriptionVariables, GetHotelRoomProps<TChildProps, TDataName>>(GetHotelRoomDocument, {
      alias: 'getHotelRoom',
      ...operationOptions
    });
};
export type GetHotelRoomSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetHotelRoomSubscription>;
export const GetArchSiteTypesDocument = gql`
    subscription GetArchSiteTypes {
  ArchSiteType(where: {isDeleted: {_eq: false}}) {
    name
    archSiteTypeID
  }
}
    `;
export type GetArchSiteTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArchSiteTypesSubscription, GetArchSiteTypesSubscriptionVariables>, 'subscription'>;

    export const GetArchSiteTypesComponent = (props: GetArchSiteTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetArchSiteTypesSubscription, GetArchSiteTypesSubscriptionVariables> subscription={GetArchSiteTypesDocument} {...props} />
    );
    
export type GetArchSiteTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSiteTypesSubscription, GetArchSiteTypesSubscriptionVariables>
    } & TChildProps;
export function withGetArchSiteTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSiteTypesSubscription,
  GetArchSiteTypesSubscriptionVariables,
  GetArchSiteTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArchSiteTypesSubscription, GetArchSiteTypesSubscriptionVariables, GetArchSiteTypesProps<TChildProps, TDataName>>(GetArchSiteTypesDocument, {
      alias: 'getArchSiteTypes',
      ...operationOptions
    });
};
export type GetArchSiteTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArchSiteTypesSubscription>;
export const GetCuisineTypesDocument = gql`
    subscription getCuisineTypes {
  RestaurantCuisineType(where: {isDeleted: {_eq: false}}) {
    name
    restaurantCuisineTypeID
  }
}
    `;
export type GetCuisineTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetCuisineTypesSubscription, GetCuisineTypesSubscriptionVariables>, 'subscription'>;

    export const GetCuisineTypesComponent = (props: GetCuisineTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetCuisineTypesSubscription, GetCuisineTypesSubscriptionVariables> subscription={GetCuisineTypesDocument} {...props} />
    );
    
export type GetCuisineTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetCuisineTypesSubscription, GetCuisineTypesSubscriptionVariables>
    } & TChildProps;
export function withGetCuisineTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetCuisineTypesSubscription,
  GetCuisineTypesSubscriptionVariables,
  GetCuisineTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetCuisineTypesSubscription, GetCuisineTypesSubscriptionVariables, GetCuisineTypesProps<TChildProps, TDataName>>(GetCuisineTypesDocument, {
      alias: 'getCuisineTypes',
      ...operationOptions
    });
};
export type GetCuisineTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetCuisineTypesSubscription>;
export const GetMuseumTypesDocument = gql`
    subscription getMuseumTypes {
  MuseumType(where: {isDeleted: {_eq: false}}) {
    museumTypeID
    type
  }
}
    `;
export type GetMuseumTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetMuseumTypesSubscription, GetMuseumTypesSubscriptionVariables>, 'subscription'>;

    export const GetMuseumTypesComponent = (props: GetMuseumTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetMuseumTypesSubscription, GetMuseumTypesSubscriptionVariables> subscription={GetMuseumTypesDocument} {...props} />
    );
    
export type GetMuseumTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumTypesSubscription, GetMuseumTypesSubscriptionVariables>
    } & TChildProps;
export function withGetMuseumTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumTypesSubscription,
  GetMuseumTypesSubscriptionVariables,
  GetMuseumTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetMuseumTypesSubscription, GetMuseumTypesSubscriptionVariables, GetMuseumTypesProps<TChildProps, TDataName>>(GetMuseumTypesDocument, {
      alias: 'getMuseumTypes',
      ...operationOptions
    });
};
export type GetMuseumTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetMuseumTypesSubscription>;
export const GetUserMuseumDocument = gql`
    subscription getUserMuseum($userID: Int) {
  Museum(where: {isDeleted: {_eq: false}, Company: {CompanyUsers: {userID: {_eq: $userID}}}}) {
    Company {
      name
    }
    description
    name
    museumID
  }
}
    `;
export type GetUserMuseumComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserMuseumSubscription, GetUserMuseumSubscriptionVariables>, 'subscription'>;

    export const GetUserMuseumComponent = (props: GetUserMuseumComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserMuseumSubscription, GetUserMuseumSubscriptionVariables> subscription={GetUserMuseumDocument} {...props} />
    );
    
export type GetUserMuseumProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserMuseumSubscription, GetUserMuseumSubscriptionVariables>
    } & TChildProps;
export function withGetUserMuseum<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserMuseumSubscription,
  GetUserMuseumSubscriptionVariables,
  GetUserMuseumProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserMuseumSubscription, GetUserMuseumSubscriptionVariables, GetUserMuseumProps<TChildProps, TDataName>>(GetUserMuseumDocument, {
      alias: 'getUserMuseum',
      ...operationOptions
    });
};
export type GetUserMuseumSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserMuseumSubscription>;
export const GetUserRestaurantDocument = gql`
    subscription getUserRestaurant($userID: Int) {
  Restaurant(where: {isDeleted: {_eq: false}, Company: {CompanyUsers: {userID: {_eq: $userID}}}}) {
    restaurantID
    name
    star
    Company {
      name
    }
  }
}
    `;
export type GetUserRestaurantComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserRestaurantSubscription, GetUserRestaurantSubscriptionVariables>, 'subscription'>;

    export const GetUserRestaurantComponent = (props: GetUserRestaurantComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserRestaurantSubscription, GetUserRestaurantSubscriptionVariables> subscription={GetUserRestaurantDocument} {...props} />
    );
    
export type GetUserRestaurantProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserRestaurantSubscription, GetUserRestaurantSubscriptionVariables>
    } & TChildProps;
export function withGetUserRestaurant<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserRestaurantSubscription,
  GetUserRestaurantSubscriptionVariables,
  GetUserRestaurantProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserRestaurantSubscription, GetUserRestaurantSubscriptionVariables, GetUserRestaurantProps<TChildProps, TDataName>>(GetUserRestaurantDocument, {
      alias: 'getUserRestaurant',
      ...operationOptions
    });
};
export type GetUserRestaurantSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserRestaurantSubscription>;
export const GetArchSiteEntranceTypesDocument = gql`
    subscription getArchSiteEntranceTypes {
  ArchSiteEntranceType(where: {isDeleted: {_eq: false}}) {
    archSiteEntranceTypeID
    content
  }
}
    `;
export type GetArchSiteEntranceTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArchSiteEntranceTypesSubscription, GetArchSiteEntranceTypesSubscriptionVariables>, 'subscription'>;

    export const GetArchSiteEntranceTypesComponent = (props: GetArchSiteEntranceTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetArchSiteEntranceTypesSubscription, GetArchSiteEntranceTypesSubscriptionVariables> subscription={GetArchSiteEntranceTypesDocument} {...props} />
    );
    
export type GetArchSiteEntranceTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSiteEntranceTypesSubscription, GetArchSiteEntranceTypesSubscriptionVariables>
    } & TChildProps;
export function withGetArchSiteEntranceTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSiteEntranceTypesSubscription,
  GetArchSiteEntranceTypesSubscriptionVariables,
  GetArchSiteEntranceTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArchSiteEntranceTypesSubscription, GetArchSiteEntranceTypesSubscriptionVariables, GetArchSiteEntranceTypesProps<TChildProps, TDataName>>(GetArchSiteEntranceTypesDocument, {
      alias: 'getArchSiteEntranceTypes',
      ...operationOptions
    });
};
export type GetArchSiteEntranceTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArchSiteEntranceTypesSubscription>;
export const GetMuseumEntranceTypesDocument = gql`
    subscription getMuseumEntranceTypes {
  MuseumEntranceType(where: {isDeleted: {_eq: false}}) {
    content
    museumEntranceTypeID
  }
}
    `;
export type GetMuseumEntranceTypesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetMuseumEntranceTypesSubscription, GetMuseumEntranceTypesSubscriptionVariables>, 'subscription'>;

    export const GetMuseumEntranceTypesComponent = (props: GetMuseumEntranceTypesComponentProps) => (
      <ApolloReactComponents.Subscription<GetMuseumEntranceTypesSubscription, GetMuseumEntranceTypesSubscriptionVariables> subscription={GetMuseumEntranceTypesDocument} {...props} />
    );
    
export type GetMuseumEntranceTypesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumEntranceTypesSubscription, GetMuseumEntranceTypesSubscriptionVariables>
    } & TChildProps;
export function withGetMuseumEntranceTypes<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumEntranceTypesSubscription,
  GetMuseumEntranceTypesSubscriptionVariables,
  GetMuseumEntranceTypesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetMuseumEntranceTypesSubscription, GetMuseumEntranceTypesSubscriptionVariables, GetMuseumEntranceTypesProps<TChildProps, TDataName>>(GetMuseumEntranceTypesDocument, {
      alias: 'getMuseumEntranceTypes',
      ...operationOptions
    });
};
export type GetMuseumEntranceTypesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetMuseumEntranceTypesSubscription>;
export const GetFoodDocument = gql`
    subscription getFood {
  RestaurantFood(where: {isDeleted: {_eq: false}}) {
    name
    restaurantFoodID
  }
}
    `;
export type GetFoodComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetFoodSubscription, GetFoodSubscriptionVariables>, 'subscription'>;

    export const GetFoodComponent = (props: GetFoodComponentProps) => (
      <ApolloReactComponents.Subscription<GetFoodSubscription, GetFoodSubscriptionVariables> subscription={GetFoodDocument} {...props} />
    );
    
export type GetFoodProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetFoodSubscription, GetFoodSubscriptionVariables>
    } & TChildProps;
export function withGetFood<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetFoodSubscription,
  GetFoodSubscriptionVariables,
  GetFoodProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetFoodSubscription, GetFoodSubscriptionVariables, GetFoodProps<TChildProps, TDataName>>(GetFoodDocument, {
      alias: 'getFood',
      ...operationOptions
    });
};
export type GetFoodSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetFoodSubscription>;
export const GetTagsDocument = gql`
    subscription getTags {
  Tag {
    name
    tagID
  }
}
    `;
export type GetTagsComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetTagsSubscription, GetTagsSubscriptionVariables>, 'subscription'>;

    export const GetTagsComponent = (props: GetTagsComponentProps) => (
      <ApolloReactComponents.Subscription<GetTagsSubscription, GetTagsSubscriptionVariables> subscription={GetTagsDocument} {...props} />
    );
    
export type GetTagsProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetTagsSubscription, GetTagsSubscriptionVariables>
    } & TChildProps;
export function withGetTags<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetTagsSubscription,
  GetTagsSubscriptionVariables,
  GetTagsProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetTagsSubscription, GetTagsSubscriptionVariables, GetTagsProps<TChildProps, TDataName>>(GetTagsDocument, {
      alias: 'getTags',
      ...operationOptions
    });
};
export type GetTagsSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetTagsSubscription>;
export const GetHotelListInfoDocument = gql`
    subscription getHotelListInfo {
  Hotel(where: {isDeleted: {_eq: false}}) {
    description
    name
    star
    Company {
      name
    }
  }
}
    `;
export type GetHotelListInfoComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetHotelListInfoSubscription, GetHotelListInfoSubscriptionVariables>, 'subscription'>;

    export const GetHotelListInfoComponent = (props: GetHotelListInfoComponentProps) => (
      <ApolloReactComponents.Subscription<GetHotelListInfoSubscription, GetHotelListInfoSubscriptionVariables> subscription={GetHotelListInfoDocument} {...props} />
    );
    
export type GetHotelListInfoProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelListInfoSubscription, GetHotelListInfoSubscriptionVariables>
    } & TChildProps;
export function withGetHotelListInfo<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelListInfoSubscription,
  GetHotelListInfoSubscriptionVariables,
  GetHotelListInfoProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetHotelListInfoSubscription, GetHotelListInfoSubscriptionVariables, GetHotelListInfoProps<TChildProps, TDataName>>(GetHotelListInfoDocument, {
      alias: 'getHotelListInfo',
      ...operationOptions
    });
};
export type GetHotelListInfoSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetHotelListInfoSubscription>;
export const GetHotelServicesDocument = gql`
    subscription getHotelServices($hotelID: Int) {
  HotelService(where: {hotelID: {_eq: $hotelID}, isDeleted: {_eq: false}}) {
    HotelServiceProperty {
      content
    }
  }
}
    `;
export type GetHotelServicesComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetHotelServicesSubscription, GetHotelServicesSubscriptionVariables>, 'subscription'>;

    export const GetHotelServicesComponent = (props: GetHotelServicesComponentProps) => (
      <ApolloReactComponents.Subscription<GetHotelServicesSubscription, GetHotelServicesSubscriptionVariables> subscription={GetHotelServicesDocument} {...props} />
    );
    
export type GetHotelServicesProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelServicesSubscription, GetHotelServicesSubscriptionVariables>
    } & TChildProps;
export function withGetHotelServices<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelServicesSubscription,
  GetHotelServicesSubscriptionVariables,
  GetHotelServicesProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetHotelServicesSubscription, GetHotelServicesSubscriptionVariables, GetHotelServicesProps<TChildProps, TDataName>>(GetHotelServicesDocument, {
      alias: 'getHotelServices',
      ...operationOptions
    });
};
export type GetHotelServicesSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetHotelServicesSubscription>;
export const GetHotelRoomsDocument = gql`
    subscription getHotelRooms($hotelID: Int) {
  HotelRoom(where: {hotelID: {_eq: $hotelID}, isDeleted: {_eq: false}}) {
    Room {
      roomNo
      RoomPrices {
        price
      }
      RoomPropertyRooms {
        RoomProperty {
          content
        }
      }
      roomID
    }
  }
}
    `;
export type GetHotelRoomsComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetHotelRoomsSubscription, GetHotelRoomsSubscriptionVariables>, 'subscription'>;

    export const GetHotelRoomsComponent = (props: GetHotelRoomsComponentProps) => (
      <ApolloReactComponents.Subscription<GetHotelRoomsSubscription, GetHotelRoomsSubscriptionVariables> subscription={GetHotelRoomsDocument} {...props} />
    );
    
export type GetHotelRoomsProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetHotelRoomsSubscription, GetHotelRoomsSubscriptionVariables>
    } & TChildProps;
export function withGetHotelRooms<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetHotelRoomsSubscription,
  GetHotelRoomsSubscriptionVariables,
  GetHotelRoomsProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetHotelRoomsSubscription, GetHotelRoomsSubscriptionVariables, GetHotelRoomsProps<TChildProps, TDataName>>(GetHotelRoomsDocument, {
      alias: 'getHotelRooms',
      ...operationOptions
    });
};
export type GetHotelRoomsSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetHotelRoomsSubscription>;
export const GetUserTravelGuideDocument = gql`
    subscription getUserTravelGuide($userID: Int!) {
  TravelGuide(where: {userID: {_eq: $userID}, isDeleted: {_eq: false}}) {
    title
    travelGuideID
    cost
    creationDate
  }
}
    `;
export type GetUserTravelGuideComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetUserTravelGuideSubscription, GetUserTravelGuideSubscriptionVariables>, 'subscription'>;

    export const GetUserTravelGuideComponent = (props: GetUserTravelGuideComponentProps) => (
      <ApolloReactComponents.Subscription<GetUserTravelGuideSubscription, GetUserTravelGuideSubscriptionVariables> subscription={GetUserTravelGuideDocument} {...props} />
    );
    
export type GetUserTravelGuideProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetUserTravelGuideSubscription, GetUserTravelGuideSubscriptionVariables>
    } & TChildProps;
export function withGetUserTravelGuide<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetUserTravelGuideSubscription,
  GetUserTravelGuideSubscriptionVariables,
  GetUserTravelGuideProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetUserTravelGuideSubscription, GetUserTravelGuideSubscriptionVariables, GetUserTravelGuideProps<TChildProps, TDataName>>(GetUserTravelGuideDocument, {
      alias: 'getUserTravelGuide',
      ...operationOptions
    });
};
export type GetUserTravelGuideSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetUserTravelGuideSubscription>;
export const GetRestaurantWorkingScheduleListDocument = gql`
    subscription getRestaurantWorkingScheduleList($restaurantID: Int) {
  RestaurantWorkingSchedule(where: {isDeleted: {_eq: false}, restaurantID: {_eq: $restaurantID}}) {
    startDate
    finishDate
    RestaurantWorkingDaySchedules {
      RestaurantWorkingDay {
        Day {
          name
        }
        openHour
        closeHour
      }
    }
    restaurantWorkingScheduleID
  }
}
    `;
export type GetRestaurantWorkingScheduleListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetRestaurantWorkingScheduleListSubscription, GetRestaurantWorkingScheduleListSubscriptionVariables>, 'subscription'>;

    export const GetRestaurantWorkingScheduleListComponent = (props: GetRestaurantWorkingScheduleListComponentProps) => (
      <ApolloReactComponents.Subscription<GetRestaurantWorkingScheduleListSubscription, GetRestaurantWorkingScheduleListSubscriptionVariables> subscription={GetRestaurantWorkingScheduleListDocument} {...props} />
    );
    
export type GetRestaurantWorkingScheduleListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetRestaurantWorkingScheduleListSubscription, GetRestaurantWorkingScheduleListSubscriptionVariables>
    } & TChildProps;
export function withGetRestaurantWorkingScheduleList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetRestaurantWorkingScheduleListSubscription,
  GetRestaurantWorkingScheduleListSubscriptionVariables,
  GetRestaurantWorkingScheduleListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetRestaurantWorkingScheduleListSubscription, GetRestaurantWorkingScheduleListSubscriptionVariables, GetRestaurantWorkingScheduleListProps<TChildProps, TDataName>>(GetRestaurantWorkingScheduleListDocument, {
      alias: 'getRestaurantWorkingScheduleList',
      ...operationOptions
    });
};
export type GetRestaurantWorkingScheduleListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetRestaurantWorkingScheduleListSubscription>;
export const GetMuseumWorkingScheduleListDocument = gql`
    subscription getMuseumWorkingScheduleList($museumID: Int) {
  MuseumWorkingSchedule(where: {isDeleted: {_eq: false}, museumID: {_eq: $museumID}}) {
    startDate
    finishDate
    MuseumWorkingDaySchedules {
      MuseumWorkingDay {
        Day {
          name
        }
        openHour
        closeHour
      }
    }
    museumWorkingScheduleID
  }
}
    `;
export type GetMuseumWorkingScheduleListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetMuseumWorkingScheduleListSubscription, GetMuseumWorkingScheduleListSubscriptionVariables>, 'subscription'>;

    export const GetMuseumWorkingScheduleListComponent = (props: GetMuseumWorkingScheduleListComponentProps) => (
      <ApolloReactComponents.Subscription<GetMuseumWorkingScheduleListSubscription, GetMuseumWorkingScheduleListSubscriptionVariables> subscription={GetMuseumWorkingScheduleListDocument} {...props} />
    );
    
export type GetMuseumWorkingScheduleListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumWorkingScheduleListSubscription, GetMuseumWorkingScheduleListSubscriptionVariables>
    } & TChildProps;
export function withGetMuseumWorkingScheduleList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumWorkingScheduleListSubscription,
  GetMuseumWorkingScheduleListSubscriptionVariables,
  GetMuseumWorkingScheduleListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetMuseumWorkingScheduleListSubscription, GetMuseumWorkingScheduleListSubscriptionVariables, GetMuseumWorkingScheduleListProps<TChildProps, TDataName>>(GetMuseumWorkingScheduleListDocument, {
      alias: 'getMuseumWorkingScheduleList',
      ...operationOptions
    });
};
export type GetMuseumWorkingScheduleListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetMuseumWorkingScheduleListSubscription>;
export const GetArchSiteWorkingScheduleListDocument = gql`
    subscription getArchSiteWorkingScheduleList($archSiteID: Int) {
  ArchSiteWorkingSchedule(where: {isDeleted: {_eq: false}, archSiteID: {_eq: $archSiteID}}) {
    startDate
    finishDate
    ArchSiteWorkingDaySchedules {
      ArchSiteWorkingDay {
        Day {
          name
        }
        openHour
        closeHour
      }
    }
    archSiteWorkingScheduleID
  }
}
    `;
export type GetArchSiteWorkingScheduleListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArchSiteWorkingScheduleListSubscription, GetArchSiteWorkingScheduleListSubscriptionVariables>, 'subscription'>;

    export const GetArchSiteWorkingScheduleListComponent = (props: GetArchSiteWorkingScheduleListComponentProps) => (
      <ApolloReactComponents.Subscription<GetArchSiteWorkingScheduleListSubscription, GetArchSiteWorkingScheduleListSubscriptionVariables> subscription={GetArchSiteWorkingScheduleListDocument} {...props} />
    );
    
export type GetArchSiteWorkingScheduleListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSiteWorkingScheduleListSubscription, GetArchSiteWorkingScheduleListSubscriptionVariables>
    } & TChildProps;
export function withGetArchSiteWorkingScheduleList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSiteWorkingScheduleListSubscription,
  GetArchSiteWorkingScheduleListSubscriptionVariables,
  GetArchSiteWorkingScheduleListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArchSiteWorkingScheduleListSubscription, GetArchSiteWorkingScheduleListSubscriptionVariables, GetArchSiteWorkingScheduleListProps<TChildProps, TDataName>>(GetArchSiteWorkingScheduleListDocument, {
      alias: 'getArchSiteWorkingScheduleList',
      ...operationOptions
    });
};
export type GetArchSiteWorkingScheduleListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArchSiteWorkingScheduleListSubscription>;
export const GetArchSitePriceListDocument = gql`
    subscription getArchSitePriceList($archSiteID: Int) {
  ArchSitePrice(where: {isDeleted: {_eq: false}, archSiteID: {_eq: $archSiteID}}) {
    startDate
    finishDate
    price
    ArchSiteEntranceType {
      content
    }
    archSitePriceID
  }
}
    `;
export type GetArchSitePriceListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArchSitePriceListSubscription, GetArchSitePriceListSubscriptionVariables>, 'subscription'>;

    export const GetArchSitePriceListComponent = (props: GetArchSitePriceListComponentProps) => (
      <ApolloReactComponents.Subscription<GetArchSitePriceListSubscription, GetArchSitePriceListSubscriptionVariables> subscription={GetArchSitePriceListDocument} {...props} />
    );
    
export type GetArchSitePriceListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSitePriceListSubscription, GetArchSitePriceListSubscriptionVariables>
    } & TChildProps;
export function withGetArchSitePriceList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSitePriceListSubscription,
  GetArchSitePriceListSubscriptionVariables,
  GetArchSitePriceListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArchSitePriceListSubscription, GetArchSitePriceListSubscriptionVariables, GetArchSitePriceListProps<TChildProps, TDataName>>(GetArchSitePriceListDocument, {
      alias: 'getArchSitePriceList',
      ...operationOptions
    });
};
export type GetArchSitePriceListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArchSitePriceListSubscription>;
export const GetMuseumPriceListDocument = gql`
    subscription getMuseumPriceList($museumID: Int) {
  MuseumPrice(where: {isDeleted: {_eq: false}, museumID: {_eq: $museumID}}) {
    startDate
    finishDate
    price
    MuseumEntranceType {
      content
    }
    museumPriceID
  }
}
    `;
export type GetMuseumPriceListComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetMuseumPriceListSubscription, GetMuseumPriceListSubscriptionVariables>, 'subscription'>;

    export const GetMuseumPriceListComponent = (props: GetMuseumPriceListComponentProps) => (
      <ApolloReactComponents.Subscription<GetMuseumPriceListSubscription, GetMuseumPriceListSubscriptionVariables> subscription={GetMuseumPriceListDocument} {...props} />
    );
    
export type GetMuseumPriceListProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumPriceListSubscription, GetMuseumPriceListSubscriptionVariables>
    } & TChildProps;
export function withGetMuseumPriceList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumPriceListSubscription,
  GetMuseumPriceListSubscriptionVariables,
  GetMuseumPriceListProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetMuseumPriceListSubscription, GetMuseumPriceListSubscriptionVariables, GetMuseumPriceListProps<TChildProps, TDataName>>(GetMuseumPriceListDocument, {
      alias: 'getMuseumPriceList',
      ...operationOptions
    });
};
export type GetMuseumPriceListSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetMuseumPriceListSubscription>;
export const GetMuseumByIdDocument = gql`
    subscription getMuseumByID($museumID: Int) {
  Museum(where: {museumID: {_eq: $museumID}, isDeleted: {_eq: false}}) {
    description
    name
    locationID
    Location {
      addressID
      Address {
        City {
          city
        }
        District {
          district
        }
        address
        cityID
        districtID
      }
      latitude
      longtitude
    }
    companyID
    Company {
      CompanyPhones {
        Phone {
          phone
        }
      }
    }
    MuseumPrices(where: {isDeleted: {_eq: false}}) {
      startDate
      price
      finishDate
      MuseumEntranceType {
        content
      }
    }
    MuseumWorkingSchedules(where: {isDeleted: {_eq: false}}) {
      startDate
      finishDate
      MuseumWorkingDaySchedules {
        MuseumWorkingDay {
          dayID
          openHour
          closeHour
        }
      }
    }
  }
}
    `;
export type GetMuseumByIdComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetMuseumByIdSubscription, GetMuseumByIdSubscriptionVariables>, 'subscription'>;

    export const GetMuseumByIdComponent = (props: GetMuseumByIdComponentProps) => (
      <ApolloReactComponents.Subscription<GetMuseumByIdSubscription, GetMuseumByIdSubscriptionVariables> subscription={GetMuseumByIdDocument} {...props} />
    );
    
export type GetMuseumByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetMuseumByIdSubscription, GetMuseumByIdSubscriptionVariables>
    } & TChildProps;
export function withGetMuseumById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetMuseumByIdSubscription,
  GetMuseumByIdSubscriptionVariables,
  GetMuseumByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetMuseumByIdSubscription, GetMuseumByIdSubscriptionVariables, GetMuseumByIdProps<TChildProps, TDataName>>(GetMuseumByIdDocument, {
      alias: 'getMuseumById',
      ...operationOptions
    });
};
export type GetMuseumByIdSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetMuseumByIdSubscription>;
export const GetArchSiteByIdDocument = gql`
    subscription getArchSiteByID($archSiteID: Int) {
  ArchSite(where: {archSiteID: {_eq: $archSiteID}, isDeleted: {_eq: false}}) {
    description
    name
    locationID
    Location {
      addressID
      Address {
        City {
          city
        }
        District {
          district
        }
        address
        cityID
        districtID
      }
      latitude
      longtitude
    }
    companyID
    Company {
      CompanyPhones {
        Phone {
          phone
        }
      }
    }
    age
    altitude
    destruction
    diameter
    period
    ArchSitePrices(where: {isDeleted: {_eq: false}}) {
      startDate
      price
      finishDate
      ArchSiteEntranceType {
        content
      }
    }
    ArchSiteWorkingSchedules(where: {isDeleted: {_eq: false}}) {
      startDate
      finishDate
      ArchSiteWorkingDaySchedules {
        ArchSiteWorkingDay {
          dayID
          openHour
          closeHour
        }
      }
    }
  }
}
    `;
export type GetArchSiteByIdComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<GetArchSiteByIdSubscription, GetArchSiteByIdSubscriptionVariables>, 'subscription'>;

    export const GetArchSiteByIdComponent = (props: GetArchSiteByIdComponentProps) => (
      <ApolloReactComponents.Subscription<GetArchSiteByIdSubscription, GetArchSiteByIdSubscriptionVariables> subscription={GetArchSiteByIdDocument} {...props} />
    );
    
export type GetArchSiteByIdProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<GetArchSiteByIdSubscription, GetArchSiteByIdSubscriptionVariables>
    } & TChildProps;
export function withGetArchSiteById<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  GetArchSiteByIdSubscription,
  GetArchSiteByIdSubscriptionVariables,
  GetArchSiteByIdProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withSubscription<TProps, GetArchSiteByIdSubscription, GetArchSiteByIdSubscriptionVariables, GetArchSiteByIdProps<TChildProps, TDataName>>(GetArchSiteByIdDocument, {
      alias: 'getArchSiteById',
      ...operationOptions
    });
};
export type GetArchSiteByIdSubscriptionResult = ApolloReactCommon.SubscriptionResult<GetArchSiteByIdSubscription>;